unit uPSI_neuralnetwork;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_neuralnetwork = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TNNetDataParallelism(CL: TPSPascalCompiler);
procedure SIRegister_THistoricalNets(CL: TPSPascalCompiler);
procedure SIRegister_TNNet(CL: TPSPascalCompiler);
procedure SIRegister_TNNetUpsample(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDeMaxPool(CL: TPSPascalCompiler);
procedure SIRegister_TNNetAvgChannel(CL: TPSPascalCompiler);
procedure SIRegister_TNNetAvgPool(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMinChannel(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMaxChannel(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMinPool(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMaxPoolPortable(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMaxPool(CL: TPSPascalCompiler);
procedure SIRegister_TNNetPoolBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDeLocalConnectReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLocalConnectReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDeLocalConnect(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLocalConnect(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDeconvolutionReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetPointwiseConvLinear(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConvolutionLinear(CL: TPSPascalCompiler);
procedure SIRegister_TNNetPointwiseConvReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConvolutionReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDeconvolution(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConvolution(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConvolutionBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDepthwiseConvReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDepthwiseConvLinear(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDepthwiseConv(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConvolutionAbstract(CL: TPSPascalCompiler);
procedure SIRegister_TNNetSoftMax(CL: TPSPascalCompiler);
procedure SIRegister_TNNetFullConnectDiff(CL: TPSPascalCompiler);
procedure SIRegister_TNNetFullConnectReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetFullConnectSigmoid(CL: TPSPascalCompiler);
procedure SIRegister_TNNetFullConnectLinear(CL: TPSPascalCompiler);
procedure SIRegister_TNNetFullConnect(CL: TPSPascalCompiler);
procedure SIRegister_TNNetSplitChannelEvery(CL: TPSPascalCompiler);
procedure SIRegister_TNNetSplitChannels(CL: TPSPascalCompiler);
procedure SIRegister_TNNetSum(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDeepConcat(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConcat(CL: TPSPascalCompiler);
procedure SIRegister_TNNetConcatBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetReshape(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLocalResponseNormDepth(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLocalResponseNorm2D(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelStdNormalization(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelZeroCenter(CL: TPSPascalCompiler);
procedure SIRegister_TNNetCellMul(CL: TPSPascalCompiler);
procedure SIRegister_TNNetCellBias(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelMul(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelBias(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelShiftBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelTransformBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMovingStdNormalization(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLayerStdNormalization(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLayerMaxNormalization(CL: TPSPascalCompiler);
procedure SIRegister_TNNetChannelRandomMulAdd(CL: TPSPascalCompiler);
procedure SIRegister_TNNetRandomMulAdd(CL: TPSPascalCompiler);
procedure SIRegister_TNNetDropout(CL: TPSPascalCompiler);
procedure SIRegister_TNNetAddNoiseBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetAddAndDiv(CL: TPSPascalCompiler);
procedure SIRegister_TNNetMulLearning(CL: TPSPascalCompiler);
procedure SIRegister_TNNetHyperbolicTangent(CL: TPSPascalCompiler);
procedure SIRegister_TNNetSigmoid(CL: TPSPascalCompiler);
procedure SIRegister_TNNetVeryLeakyReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLeakyReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetSELU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetReLUL(CL: TPSPascalCompiler);
procedure SIRegister_TNNetReLU(CL: TPSPascalCompiler);
procedure SIRegister_TNNetReLUBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetIdentityWithoutBackprop(CL: TPSPascalCompiler);
procedure SIRegister_TNNetIdentityWithoutL2(CL: TPSPascalCompiler);
procedure SIRegister_TNNetIdentity(CL: TPSPascalCompiler);
procedure SIRegister_TNNetInput(CL: TPSPascalCompiler);
procedure SIRegister_TNNetInputBase(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLayerList(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLayerConcatedWeights(CL: TPSPascalCompiler);
procedure SIRegister_TNNetLayer(CL: TPSPascalCompiler);
procedure SIRegister_TNNetNeuronList(CL: TPSPascalCompiler);
procedure SIRegister_TNNetNeuron(CL: TPSPascalCompiler);
procedure SIRegister_neuralnetwork(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_neuralnetwork_Routines(S: TPSExec);
procedure RIRegister_TNNetDataParallelism(CL: TPSRuntimeClassImporter);
procedure RIRegister_THistoricalNets(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetUpsample(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDeMaxPool(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetAvgChannel(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetAvgPool(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMinChannel(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMaxChannel(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMinPool(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMaxPoolPortable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMaxPool(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetPoolBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDeLocalConnectReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLocalConnectReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDeLocalConnect(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLocalConnect(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDeconvolutionReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetPointwiseConvLinear(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConvolutionLinear(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetPointwiseConvReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConvolutionReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDeconvolution(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConvolution(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConvolutionBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDepthwiseConvReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDepthwiseConvLinear(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDepthwiseConv(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConvolutionAbstract(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetSoftMax(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetFullConnectDiff(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetFullConnectReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetFullConnectSigmoid(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetFullConnectLinear(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetFullConnect(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetSplitChannelEvery(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetSplitChannels(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetSum(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDeepConcat(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConcat(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetConcatBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetReshape(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLocalResponseNormDepth(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLocalResponseNorm2D(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelStdNormalization(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelZeroCenter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetCellMul(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetCellBias(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelMul(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelBias(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelShiftBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelTransformBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMovingStdNormalization(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLayerStdNormalization(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLayerMaxNormalization(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetChannelRandomMulAdd(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetRandomMulAdd(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetDropout(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetAddNoiseBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetAddAndDiv(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetMulLearning(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetHyperbolicTangent(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetSigmoid(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetVeryLeakyReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLeakyReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetSELU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetReLUL(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetReLU(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetReLUBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetIdentityWithoutBackprop(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetIdentityWithoutL2(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetIdentity(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetInput(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetInputBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLayerList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLayerConcatedWeights(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetLayer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetNeuronList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNNetNeuron(CL: TPSRuntimeClassImporter);
procedure RIRegister_neuralnetwork(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   cl
  ,neuralopencl
  ,fgl
  ,math
  ,syncobjs
  ,neuralvolume
  ,neuralnetwork
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_neuralnetwork]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDataParallelism(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetList', 'TNNetDataParallelism') do
  with CL.AddClassN(CL.FindClass('TNNetList'),'TNNetDataParallelism') do
  begin
    RegisterProperty('Items', 'TNNet Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Constructor Create40( CloneNN : TNNet; pSize : integer; pFreeObjects : Boolean);');
    RegisterMethod('Constructor Create41( pSize : integer; pFreeObjects : Boolean);');
    RegisterMethod('Procedure SetLearningRate( pLearningRate, pInertia : TNeuralFloat)');
    RegisterMethod('Procedure SetBatchUpdate( pBatchUpdate : boolean)');
    RegisterMethod('Procedure SetL2Decay( pL2Decay : TNeuralFloat)');
    RegisterMethod('Procedure SetL2DecayToConvolutionalLayers( pL2Decay : TNeuralFloat)');
    RegisterMethod('Procedure EnableDropouts( pFlag : boolean)');
    RegisterMethod('Procedure CopyWeights( Origin : TNNet)');
    RegisterMethod('Procedure SumWeights( Destin : TNNet)');
    RegisterMethod('Procedure SumDeltas( Destin : TNNet)');
    RegisterMethod('Procedure AvgWeights( Destin : TNNet)');
    RegisterMethod('Procedure ReplaceAtIdxAndUpdateWeightAvg( Idx : integer; NewNet, AverageNet : TNNet)');
    RegisterMethod('Procedure DisableOpenCL( )');
    RegisterMethod('Procedure EnableOpenCL( platform_id : cl_platform_id; device_id : cl_device_id)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_THistoricalNets(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNet', 'THistoricalNets') do
  with CL.AddClassN(CL.FindClass('TNNet'),'THistoricalNets') do
  begin
    RegisterMethod('Procedure AddLeCunLeNet5( IncludeInput : boolean)');
    RegisterMethod('Procedure AddAlexNet( IncludeInput : boolean)');
    RegisterMethod('Procedure AddVGGNet( IncludeInput : boolean)');
    RegisterMethod('Procedure AddResNetUnit( pNeurons : integer)');
    RegisterMethod('Function AddDenseNetBlock( pUnits, k : integer; BottleNeck : integer; supressBias : integer; DropoutRate : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function AddDenseNetTransition( Compression : TNeuralFloat; supressBias : integer; HasAvgPool : boolean) : TNNetLayer');
    RegisterMethod('Function AddDenseNetBlockCAI( pUnits, k, supressBias : integer; PointWiseConv : TNNetConvolutionClass; IsSeparable : boolean; HasNorm : boolean; pBefore : TNNetLayerClass; pAfter : TNNetLayerClass; Bo' +
      'ttleNeck : integer; Compression : integer; DropoutRate : TNeuralFloat; RandomBias : integer; RandomAmplifier : integer) : TNNetLayer');
    RegisterMethod('Function AddDenseFullyConnected( pUnits, k, supressBias : integer; PointWiseConv : TNNetConvolutionClass; HasNorm : boolean; HasReLU : boolean; pBefore : TNNetLayerClass; pAfter : TNNetLayerClass; Bot' +
      'tleNeck : integer; Compression : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function AddSuperResolution( pSizeX, pSizeY, pNeurons, pLayerCnt : integer) : TNNetLayer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMObject', 'TNNet') do
  with CL.AddClassN(CL.FindClass('TMObject'),'TNNet') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Function CreateLayer( strData : string) : TNNetLayer');
    RegisterMethod('Function AddLayer28( pLayer : TNNetLayer) : TNNetLayer;');
    RegisterMethod('Function AddLayer29( strData : string) : TNNetLayer;');
    RegisterMethod('Function AddLayer30( pLayers : array of TNNetLayer) : TNNetLayer;');
    RegisterMethod('Function AddSeparableConvReLU( pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; pDepthMultiplier : integer; pSuppressBias : integer; pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Function AddSeparableConvLinear( pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; pDepthMultiplier : integer; pSuppressBias : integer; pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Function AddMovingNorm31( PerCell : boolean; pAfterLayer : TNNetLayer) : TNNetLayer;');
    RegisterMethod('Function AddMovingNorm32( PerCell : boolean; RandomBias, RandomAmplifier : integer; pAfterLayer : TNNetLayer) : TNNetLayer;');
    RegisterMethod('Function AddChannelMovingNorm( PerCell : boolean; RandomBias, RandomAmplifier : integer; pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Function AddConvOrSeparableConv( IsSeparable, HasReLU, HasNorm : boolean; pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; PerCell : boolean; pSuppressBias : integer; RandomBias : integer' +
      '; RandomAmplifier : integer; pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Function AddCompression( Compression : TNeuralFloat; supressBias : integer) : TNNetLayer');
    RegisterMethod('Function AddMinMaxPool( pPoolSize : integer; pStride : integer; pPadding : integer) : TNNetLayer');
    RegisterMethod('Function AddAvgMaxPool( pPoolSize : integer; pMaxPoolDropout : TNeuralFloat; pKeepDepth : boolean; pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Function AddMinMaxChannel( pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Function AddAvgMaxChannel( pMaxPoolDropout : TNeuralFloat; pKeepDepth : boolean; pAfterLayer : TNNetLayer) : TNNetLayer');
    RegisterMethod('Procedure AddToExponentialWeightAverage( NewElement : TNNet; Decay : TNeuralFloat)');
    RegisterMethod('Procedure AddToWeightAverage( NewElement : TNNet; CurrentElementCount : integer)');
    RegisterMethod('Function AddLayerAfter33( pLayer, pAfterLayer : TNNetLayer) : TNNetLayer;');
    RegisterMethod('Function AddLayerAfter34( pLayer : TNNetLayer; pAfterLayerIdx : integer) : TNNetLayer;');
    RegisterMethod('Function AddLayerAfter35( strData : string; pAfterLayerIdx : integer) : TNNetLayer;');
    RegisterMethod('Function GetFirstNeuronalLayerIdx( FromLayerIdx : integer) : integer');
    RegisterMethod('Function GetFirstImageNeuronalLayerIdx( FromLayerIdx : integer) : integer');
    RegisterMethod('Function GetFirstNeuronalLayerIdxWithChannels( FromLayerIdx, Channels : integer) : integer');
    RegisterMethod('Function GetLastLayerIdx( ) : integer');
    RegisterMethod('Function GetLastLayer( ) : TNNetLayer');
    RegisterMethod('Procedure Compute36( pInput : TNNetVolume; FromLayerIdx : integer);');
    RegisterMethod('Procedure Compute37( pInput : array of TNeuralFloat; FromLayerIdx : integer);');
    RegisterMethod('Procedure Backpropagate38( pOutput : TNNetVolume);');
    RegisterMethod('Procedure BackpropagateForIdx( pOutput : TNNetVolume; const aIdx : array of integer)');
    RegisterMethod('Procedure BackpropagateFromLayerAndNeuron( LayerIdx, NeuronIdx : integer; Error : TNeuralFloat)');
    RegisterMethod('Procedure Backpropagate39( pOutput : array of TNeuralFloat);');
    RegisterMethod('Procedure GetOutput( pOutput : TNNetVolume)');
    RegisterMethod('Procedure AddOutput( pOutput : TNNetVolume)');
    RegisterMethod('Procedure SetActivationFn( ActFn, ActFnDeriv : TNeuralActivationFunction)');
    RegisterMethod('Procedure SetLearningRate( pLearningRate, pInertia : TNeuralFloat)');
    RegisterMethod('Procedure SetBatchUpdate( pBatchUpdate : boolean)');
    RegisterMethod('Procedure InitWeights( )');
    RegisterMethod('Procedure UpdateWeights( )');
    RegisterMethod('Procedure ClearDeltas( )');
    RegisterMethod('Procedure ResetBackpropCallCurrCnt( )');
    RegisterMethod('Procedure SetL2Decay( pL2Decay : TNeuralFloat)');
    RegisterMethod('Procedure SetL2DecayToConvolutionalLayers( pL2Decay : TNeuralFloat)');
    RegisterMethod('Procedure ComputeL2Decay( )');
    RegisterMethod('Procedure SetSmoothErrorPropagation( p : boolean)');
    RegisterMethod('Procedure ClearTime( )');
    RegisterMethod('Procedure Clear( )');
    RegisterMethod('Procedure IdxsToLayers( aIdx : array of integer; var aL : array of TNNetLayer)');
    RegisterMethod('Procedure EnableDropouts( pFlag : boolean)');
    RegisterMethod('Procedure RefreshDropoutMask( )');
    RegisterMethod('Procedure MulMulAddWeights( Value1, Value2 : TNeuralFloat; Origin : TNNet)');
    RegisterMethod('Procedure MulAddWeights( Value : TNeuralFloat; Origin : TNNet)');
    RegisterMethod('Procedure MulWeights( V : TNeuralFloat)');
    RegisterMethod('Procedure MulDeltas( V : TNeuralFloat)');
    RegisterMethod('Procedure SumWeights( Origin : TNNet)');
    RegisterMethod('Procedure SumDeltas( Origin : TNNet)');
    RegisterMethod('Procedure SumDeltasNoChecks( Origin : TNNet)');
    RegisterMethod('Procedure CopyWeights( Origin : TNNet)');
    RegisterMethod('Function ForceMaxAbsoluteDelta( vMax : TNeuralFloat) : TNeuralFloat');
    RegisterMethod('Function GetMaxAbsoluteDelta( ) : TNeuralFloat');
    RegisterMethod('Function NormalizeMaxAbsoluteDelta( NewMax : TNeuralFloat) : TNeuralFloat');
    RegisterMethod('Procedure ClearInertia( )');
    RegisterMethod('Procedure DisableOpenCL( )');
    RegisterMethod('Procedure EnableOpenCL( platform_id : cl_platform_id; device_id : cl_device_id)');
    RegisterMethod('Procedure DebugWeights( )');
    RegisterMethod('Procedure DebugErrors( )');
    RegisterMethod('Procedure DebugStructure( )');
    RegisterMethod('Function CountLayers( ) : integer');
    RegisterMethod('Function CountNeurons( ) : integer');
    RegisterMethod('Function CountWeights( ) : integer');
    RegisterMethod('Function GetWeightSum( ) : TNeuralFloat');
    RegisterMethod('Function SaveDataToString( ) : string');
    RegisterMethod('Procedure LoadDataFromString( strData : string)');
    RegisterMethod('Procedure LoadDataFromFile( filename : string)');
    RegisterMethod('Function SaveStructureToString( ) : string');
    RegisterMethod('Procedure LoadStructureFromString( strData : string)');
    RegisterMethod('Function SaveToString( ) : string');
    RegisterMethod('Procedure SaveToFile( filename : string)');
    RegisterMethod('Procedure LoadFromString( strData : string)');
    RegisterMethod('Procedure LoadFromFile( filename : string)');
    RegisterMethod('Function Clone( ) : TNNet');
    RegisterMethod('Procedure MulWeightsGlorotBengio( V : TNeuralFloat)');
    RegisterMethod('Procedure MulWeightsHe( V : TNeuralFloat)');
    RegisterProperty('LearningRate', 'TNeuralFloat', iptr);
    RegisterProperty('BackwardTime', 'double', iptrw);
    RegisterProperty('ForwardTime', 'double', iptrw);
    RegisterProperty('Layers', 'TNNetLayerList', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetUpsample(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetDeMaxPool', 'TNNetUpsample') do
  with CL.AddClassN(CL.FindClass('TNNetDeMaxPool'),'TNNetUpsample') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure ComputePreviousLayerError( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDeMaxPool(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetMaxPool', 'TNNetDeMaxPool') do
  with CL.AddClassN(CL.FindClass('TNNetMaxPool'),'TNNetDeMaxPool') do
  begin
    RegisterMethod('Constructor Create( pPoolSize : integer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure ComputePreviousLayerError( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetAvgChannel(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetAvgPool', 'TNNetAvgChannel') do
  with CL.AddClassN(CL.FindClass('TNNetAvgPool'),'TNNetAvgChannel') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetAvgPool(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetMaxPool', 'TNNetAvgPool') do
  with CL.AddClassN(CL.FindClass('TNNetMaxPool'),'TNNetAvgPool') do
  begin
    RegisterMethod('Constructor Create( pPoolSize : integer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMinChannel(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetMinPool', 'TNNetMinChannel') do
  with CL.AddClassN(CL.FindClass('TNNetMinPool'),'TNNetMinChannel') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMaxChannel(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetMaxPool', 'TNNetMaxChannel') do
  with CL.AddClassN(CL.FindClass('TNNetMaxPool'),'TNNetMaxChannel') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMinPool(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetPoolBase', 'TNNetMinPool') do
  with CL.AddClassN(CL.FindClass('TNNetPoolBase'),'TNNetMinPool') do
  begin
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMaxPoolPortable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetMaxPool', 'TNNetMaxPoolPortable') do
  with CL.AddClassN(CL.FindClass('TNNetMaxPool'),'TNNetMaxPoolPortable') do
  begin
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMaxPool(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetPoolBase', 'TNNetMaxPool') do
  with CL.AddClassN(CL.FindClass('TNNetPoolBase'),'TNNetMaxPool') do
  begin
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetPoolBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetPoolBase') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetPoolBase') do
  begin
    RegisterMethod('Constructor Create( pPoolSize : integer; pStride : integer; pPadding : integer)');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDeLocalConnectReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLocalConnectReLU', 'TNNetDeLocalConnectReLU') do
  with CL.AddClassN(CL.FindClass('TNNetLocalConnectReLU'),'TNNetDeLocalConnectReLU') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLocalConnectReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLocalConnect', 'TNNetLocalConnectReLU') do
  with CL.AddClassN(CL.FindClass('TNNetLocalConnect'),'TNNetLocalConnectReLU') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDeLocalConnect(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLocalConnect', 'TNNetDeLocalConnect') do
  with CL.AddClassN(CL.FindClass('TNNetLocalConnect'),'TNNetDeLocalConnect') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLocalConnect(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionBase', 'TNNetLocalConnect') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionBase'),'TNNetLocalConnect') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure ComputeNTL( index, threadnum : integer)');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure BackpropagateCPU( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDeconvolutionReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionReLU', 'TNNetDeconvolutionReLU') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionReLU'),'TNNetDeconvolutionReLU') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetPointwiseConvLinear(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionLinear', 'TNNetPointwiseConvLinear') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionLinear'),'TNNetPointwiseConvLinear') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConvolutionLinear(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolution', 'TNNetConvolutionLinear') do
  with CL.AddClassN(CL.FindClass('TNNetConvolution'),'TNNetConvolutionLinear') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetPointwiseConvReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionReLU', 'TNNetPointwiseConvReLU') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionReLU'),'TNNetPointwiseConvReLU') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConvolutionReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolution', 'TNNetConvolutionReLU') do
  with CL.AddClassN(CL.FindClass('TNNetConvolution'),'TNNetConvolutionReLU') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDeconvolution(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolution', 'TNNetDeconvolution') do
  with CL.AddClassN(CL.FindClass('TNNetConvolution'),'TNNetDeconvolution') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize : integer; pSuppressBias : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConvolution(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionBase', 'TNNetConvolution') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionBase'),'TNNetConvolution') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure BackpropagateCPU( )');
    RegisterMethod('Procedure BackpropagateFastCPU( )');
    RegisterMethod('Procedure BackpropagateFastCPUDev( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConvolutionBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionAbstract', 'TNNetConvolutionBase') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionAbstract'),'TNNetConvolutionBase') do
  begin
    RegisterMethod('Constructor Create( pNumFeatures, pFeatureSize, pInputPadding, pStride : integer; pSuppressBias : integer)');
    RegisterMethod('Procedure EnableOpenCL( DotProductKernel : TDotProductKernel)');
    RegisterProperty('Pointwise', 'boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDepthwiseConvReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetDepthwiseConv', 'TNNetDepthwiseConvReLU') do
  with CL.AddClassN(CL.FindClass('TNNetDepthwiseConv'),'TNNetDepthwiseConvReLU') do
  begin
    RegisterMethod('Constructor Create( pMultiplier, pFeatureSize, pInputPadding, pStride : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDepthwiseConvLinear(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetDepthwiseConv', 'TNNetDepthwiseConvLinear') do
  with CL.AddClassN(CL.FindClass('TNNetDepthwiseConv'),'TNNetDepthwiseConvLinear') do
  begin
    RegisterMethod('Constructor Create( pMultiplier, pFeatureSize, pInputPadding, pStride : integer)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDepthwiseConv(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConvolutionAbstract', 'TNNetDepthwiseConv') do
  with CL.AddClassN(CL.FindClass('TNNetConvolutionAbstract'),'TNNetDepthwiseConv') do
  begin
    RegisterMethod('Constructor Create( pMultiplier, pFeatureSize, pInputPadding, pStride : integer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConvolutionAbstract(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayerConcatedWeights', 'TNNetConvolutionAbstract') do
  with CL.AddClassN(CL.FindClass('TNNetLayerConcatedWeights'),'TNNetConvolutionAbstract') do
  begin
    RegisterMethod('Constructor Create( pFeatureSize, pInputPadding, pStride : integer; pSuppressBias : integer)');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetSoftMax(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetSoftMax') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetSoftMax') do
  begin
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetFullConnectDiff(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetFullConnectReLU', 'TNNetFullConnectDiff') do
  with CL.AddClassN(CL.FindClass('TNNetFullConnectReLU'),'TNNetFullConnectDiff') do
  begin
    RegisterMethod('Constructor Create24( pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer);');
    RegisterMethod('Constructor Create25( pSize : integer; pSuppressBias : integer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetFullConnectReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetFullConnectLinear', 'TNNetFullConnectReLU') do
  with CL.AddClassN(CL.FindClass('TNNetFullConnectLinear'),'TNNetFullConnectReLU') do
  begin
    RegisterMethod('Procedure ComputeCPU( )');
    RegisterMethod('Procedure BackpropagateCPU( )');
    RegisterMethod('Constructor Create22( pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer);');
    RegisterMethod('Constructor Create23( pSize : integer; pSuppressBias : integer);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetFullConnectSigmoid(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetFullConnect', 'TNNetFullConnectSigmoid') do
  with CL.AddClassN(CL.FindClass('TNNetFullConnect'),'TNNetFullConnectSigmoid') do
  begin
    RegisterMethod('Constructor Create20( pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer);');
    RegisterMethod('Constructor Create21( pSize : integer; pSuppressBias : integer);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetFullConnectLinear(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetFullConnect', 'TNNetFullConnectLinear') do
  with CL.AddClassN(CL.FindClass('TNNetFullConnect'),'TNNetFullConnectLinear') do
  begin
    RegisterMethod('Procedure ComputeCPU( )');
    RegisterMethod('Procedure BackpropagateCPU( )');
    RegisterMethod('Constructor Create18( pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer);');
    RegisterMethod('Constructor Create19( pSize : integer; pSuppressBias : integer);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetFullConnect(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetFullConnect') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetFullConnect') do
  begin
    RegisterMethod('Constructor Create16( pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer);');
    RegisterMethod('Constructor Create17( pSize : integer; pSuppressBias : integer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure ComputeCPU( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure BackpropagateCPU( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetSplitChannelEvery(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetSplitChannels', 'TNNetSplitChannelEvery') do
  with CL.AddClassN(CL.FindClass('TNNetSplitChannels'),'TNNetSplitChannelEvery') do
  begin
    RegisterMethod('Constructor Create14( GetChannelEvery, ChannelShift : integer);');
    RegisterMethod('Constructor Create15( pChannels : array of integer);');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetSplitChannels(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetSplitChannels') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetSplitChannels') do
  begin
    RegisterMethod('Constructor Create12( ChannelStart, ChannelLen : integer);');
    RegisterMethod('Constructor Create13( pChannels : array of integer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Function SaveStructureToString( ) : string');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetSum(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConcatBase', 'TNNetSum') do
  with CL.AddClassN(CL.FindClass('TNNetConcatBase'),'TNNetSum') do
  begin
    RegisterMethod('Constructor Create11( aL : array of TNNetLayer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDeepConcat(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConcatBase', 'TNNetDeepConcat') do
  with CL.AddClassN(CL.FindClass('TNNetConcatBase'),'TNNetDeepConcat') do
  begin
    RegisterMethod('Constructor Create10( aL : array of TNNetLayer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConcat(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetConcatBase', 'TNNetConcat') do
  with CL.AddClassN(CL.FindClass('TNNetConcatBase'),'TNNetConcat') do
  begin
    RegisterMethod('Constructor Create8( pSizeX, pSizeY, pDepth : integer; aL : array of TNNetLayer);');
    RegisterMethod('Constructor Create9( aL : array of TNNetLayer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetConcatBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetConcatBase') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetConcatBase') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Function SaveStructureToString( ) : string');
    RegisterMethod('Procedure BackpropagateConcat( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetReshape(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetReshape') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetReshape') do
  begin
    RegisterMethod('Constructor Create7( pSizeX, pSizeY, pDepth : integer);');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLocalResponseNormDepth(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLocalResponseNorm2D', 'TNNetLocalResponseNormDepth') do
  with CL.AddClassN(CL.FindClass('TNNetLocalResponseNorm2D'),'TNNetLocalResponseNormDepth') do
  begin
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLocalResponseNorm2D(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetLocalResponseNorm2D') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetLocalResponseNorm2D') do
  begin
    RegisterMethod('Constructor Create( pSize : integer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelStdNormalization(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetChannelZeroCenter', 'TNNetChannelStdNormalization') do
  with CL.AddClassN(CL.FindClass('TNNetChannelZeroCenter'),'TNNetChannelStdNormalization') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelZeroCenter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetChannelShiftBase', 'TNNetChannelZeroCenter') do
  with CL.AddClassN(CL.FindClass('TNNetChannelShiftBase'),'TNNetChannelZeroCenter') do
  begin
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure ComputeL2Decay( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetCellMul(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentityWithoutL2', 'TNNetCellMul') do
  with CL.AddClassN(CL.FindClass('TNNetIdentityWithoutL2'),'TNNetCellMul') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetCellBias(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentityWithoutL2', 'TNNetCellBias') do
  with CL.AddClassN(CL.FindClass('TNNetIdentityWithoutL2'),'TNNetCellBias') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelMul(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetChannelTransformBase', 'TNNetChannelMul') do
  with CL.AddClassN(CL.FindClass('TNNetChannelTransformBase'),'TNNetChannelMul') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelBias(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetChannelShiftBase', 'TNNetChannelBias') do
  with CL.AddClassN(CL.FindClass('TNNetChannelShiftBase'),'TNNetChannelBias') do
  begin
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelShiftBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetChannelTransformBase', 'TNNetChannelShiftBase') do
  with CL.AddClassN(CL.FindClass('TNNetChannelTransformBase'),'TNNetChannelShiftBase') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelTransformBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentityWithoutL2', 'TNNetChannelTransformBase') do
  with CL.AddClassN(CL.FindClass('TNNetIdentityWithoutL2'),'TNNetChannelTransformBase') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMovingStdNormalization(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentityWithoutL2', 'TNNetMovingStdNormalization') do
  with CL.AddClassN(CL.FindClass('TNNetIdentityWithoutL2'),'TNNetMovingStdNormalization') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure InitDefault( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLayerStdNormalization(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetLayerStdNormalization') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetLayerStdNormalization') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLayerMaxNormalization(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetLayerMaxNormalization') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetLayerMaxNormalization') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetChannelRandomMulAdd(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetAddNoiseBase', 'TNNetChannelRandomMulAdd') do
  with CL.AddClassN(CL.FindClass('TNNetAddNoiseBase'),'TNNetChannelRandomMulAdd') do
  begin
    RegisterMethod('Constructor Create( AddRate, MulRate : integer)');
    RegisterMethod('Procedure SetPrevLayer( pPrevLayer : TNNetLayer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetRandomMulAdd(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetAddNoiseBase', 'TNNetRandomMulAdd') do
  with CL.AddClassN(CL.FindClass('TNNetAddNoiseBase'),'TNNetRandomMulAdd') do
  begin
    RegisterMethod('Constructor Create( AddRate, MulRate : integer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetDropout(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetAddNoiseBase', 'TNNetDropout') do
  with CL.AddClassN(CL.FindClass('TNNetAddNoiseBase'),'TNNetDropout') do
  begin
    RegisterMethod('Constructor Create( Rate : double; OneMaskPerbatch : integer)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure CopyWeights( Origin : TNNetLayer)');
    RegisterMethod('Procedure RefreshDropoutMask( )');
    RegisterProperty('DropoutMask', 'TNNetVolume', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetAddNoiseBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetAddNoiseBase') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetAddNoiseBase') do
  begin
    RegisterProperty('Enabled', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetAddAndDiv(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetAddAndDiv') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetAddAndDiv') do
  begin
    RegisterMethod('Constructor Create6( pAdd, pDiv : integer);');
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetMulLearning(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetMulLearning') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetMulLearning') do
  begin
    RegisterMethod('Constructor Create( pMul : integer)');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetHyperbolicTangent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetSigmoid', 'TNNetHyperbolicTangent') do
  with CL.AddClassN(CL.FindClass('TNNetSigmoid'),'TNNetHyperbolicTangent') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetSigmoid(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetSigmoid') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetSigmoid') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetVeryLeakyReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLeakyReLU', 'TNNetVeryLeakyReLU') do
  with CL.AddClassN(CL.FindClass('TNNetLeakyReLU'),'TNNetVeryLeakyReLU') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLeakyReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetReLUBase', 'TNNetLeakyReLU') do
  with CL.AddClassN(CL.FindClass('TNNetReLUBase'),'TNNetLeakyReLU') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetSELU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetReLUBase', 'TNNetSELU') do
  with CL.AddClassN(CL.FindClass('TNNetReLUBase'),'TNNetSELU') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetReLUL(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetReLUBase', 'TNNetReLUL') do
  with CL.AddClassN(CL.FindClass('TNNetReLUBase'),'TNNetReLUL') do
  begin
    RegisterMethod('Constructor Create( LowLimit, HighLimit : integer)');
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetReLU(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetReLUBase', 'TNNetReLU') do
  with CL.AddClassN(CL.FindClass('TNNetReLUBase'),'TNNetReLU') do
  begin
    RegisterMethod('Procedure Compute( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetReLUBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetReLUBase') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetReLUBase') do
  begin
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetIdentityWithoutBackprop(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetIdentityWithoutBackprop') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetIdentityWithoutBackprop') do
  begin
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetIdentityWithoutL2(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetIdentity', 'TNNetIdentityWithoutL2') do
  with CL.AddClassN(CL.FindClass('TNNetIdentity'),'TNNetIdentityWithoutL2') do
  begin
    RegisterMethod('Procedure ComputeL2Decay( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetIdentity(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetIdentity') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetIdentity') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetInput(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetInputBase', 'TNNetInput') do
  with CL.AddClassN(CL.FindClass('TNNetInputBase'),'TNNetInput') do
  begin
    RegisterMethod('Constructor Create3( pSize : integer);');
    RegisterMethod('Constructor Create4( pSizeX, pSizeY, pDepth : integer);');
    RegisterMethod('Constructor Create5( pSizeX, pSizeY, pDepth, pError : integer);');
    RegisterMethod('Function EnableErrorCollection : TNNetInput');
    RegisterMethod('Function DisableErrorCollection : TNNetInput');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetInputBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetInputBase') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetInputBase') do
  begin
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLayerList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetList', 'TNNetLayerList') do
  with CL.AddClassN(CL.FindClass('TNNetList'),'TNNetLayerList') do
  begin
    RegisterProperty('Items', 'TNNetLayer Integer', iptrw);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLayerConcatedWeights(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetLayer', 'TNNetLayerConcatedWeights') do
  with CL.AddClassN(CL.FindClass('TNNetLayer'),'TNNetLayerConcatedWeights') do
  begin
    RegisterMethod('Constructor Create( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetLayer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMObject', 'TNNetLayer') do
  with CL.AddClassN(CL.FindClass('TMObject'),'TNNetLayer') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure DisableOpenCL( )');
    RegisterMethod('Procedure EnableOpenCL( DotProductKernel : TDotProductKernel)');
    RegisterMethod('Procedure Compute( )');
    RegisterMethod('Procedure Backpropagate( )');
    RegisterMethod('Procedure ComputeOutputErrorForOneNeuron( NeuronIdx : integer; value : TNeuralFloat)');
    RegisterMethod('Procedure ComputeOutputErrorWith( pOutput : TNNetVolume)');
    RegisterMethod('Procedure ComputeOutputErrorForIdx( pOutput : TNNetVolume; const aIdx : array of integer)');
    RegisterMethod('Procedure ComputeErrorDeriv( )');
    RegisterMethod('Procedure Fill( value : TNeuralFloat)');
    RegisterMethod('Procedure ClearDeltas( )');
    RegisterMethod('Procedure AddNeurons( NeuronNum : integer)');
    RegisterMethod('Procedure AddMissingNeurons( NeuronNum : integer)');
    RegisterMethod('Procedure SetNumWeightsForAllNeurons0( NumWeights : integer);');
    RegisterMethod('Procedure SetNumWeightsForAllNeurons1( x, y, d : integer);');
    RegisterMethod('Procedure SetNumWeightsForAllNeurons2( Origin : TNNetVolume);');
    RegisterMethod('Function GetMaxWeight( ) : TNeuralFloat');
    RegisterMethod('Function GetMinWeight( ) : TNeuralFloat');
    RegisterMethod('Function GetMaxDelta( ) : TNeuralFloat');
    RegisterMethod('Function GetMinDelta( ) : TNeuralFloat');
    RegisterMethod('Function ForceMaxAbsoluteDelta( vMax : TNeuralFloat) : TNeuralFloat');
    RegisterMethod('Function GetMaxAbsoluteDelta( ) : TNeuralFloat');
    RegisterMethod('Procedure GetMinMaxAtDepth( pDepth : integer; var pMin, pMax : TNeuralFloat)');
    RegisterMethod('Function GetWeightSum( ) : TNeuralFloat');
    RegisterMethod('Function GetBiasSum( ) : TNeuralFloat');
    RegisterMethod('Function GetInertiaSum( ) : TNeuralFloat');
    RegisterMethod('Function CountWeights( ) : integer');
    RegisterMethod('Procedure MulWeights( V : TNeuralFloat)');
    RegisterMethod('Procedure MulDeltas( V : TNeuralFloat)');
    RegisterMethod('Procedure ClearInertia( )');
    RegisterMethod('Procedure ClearTimes( )');
    RegisterMethod('Procedure AddTimes( Origin : TNNetLayer)');
    RegisterMethod('Procedure CopyTimes( Origin : TNNetLayer)');
    RegisterMethod('Procedure MulMulAddWeights( Value1, Value2 : TNeuralFloat; Origin : TNNetLayer)');
    RegisterMethod('Procedure SumWeights( Origin : TNNetLayer)');
    RegisterMethod('Procedure SumDeltas( Origin : TNNetLayer)');
    RegisterMethod('Procedure SumDeltasNoChecks( Origin : TNNetLayer)');
    RegisterMethod('Procedure CopyWeights( Origin : TNNetLayer)');
    RegisterMethod('Procedure ForceRangeWeights( V : TNeuralFloat)');
    RegisterMethod('Procedure NormalizeWeights( VMax : TNeuralFloat)');
    RegisterMethod('Function SaveDataToString( ) : string');
    RegisterMethod('Procedure LoadDataFromString( strData : string)');
    RegisterMethod('Function SaveStructureToString( ) : string');
    RegisterMethod('Procedure SetBatchUpdate( pBatchUpdate : boolean)');
    RegisterMethod('Procedure UpdateWeights( )');
    RegisterMethod('Function InitBasicPatterns( ) : TNNetLayer');
    RegisterMethod('Procedure IncDepartingBranchesCnt( )');
    RegisterMethod('Procedure ResetBackpropCallCurrCnt( )');
    RegisterMethod('Function InitUniform( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitLeCunUniform( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitHeUniform( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitHeUniformDepthwise( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitHeGaussian( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitHeGaussianDepthwise( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitGlorotBengioUniform( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Function InitSELU( Value : TNeuralFloat) : TNNetLayer');
    RegisterMethod('Procedure InitDefault( )');
    RegisterProperty('ActivationFn', 'TNeuralActivationFunction', iptrw);
    RegisterProperty('ActivationFnDerivative', 'TNeuralActivationFunction', iptrw);
    RegisterProperty('Neurons', 'TNNetNeuronList', iptr);
    RegisterProperty('Output', 'TNNetVolume', iptr);
    RegisterProperty('OutputRaw', 'TNNetVolume', iptr);
    RegisterProperty('PrevLayer', 'TNNetLayer', iptrw);
    RegisterProperty('LearningRate', 'TNeuralFloat', iptrw);
    RegisterProperty('L2Decay', 'TNeuralFloat', iptrw);
    RegisterProperty('Inertia', 'TNeuralFloat', iptr);
    RegisterProperty('OutputError', 'TNNetVolume', iptrw);
    RegisterProperty('OutputErrorDeriv', 'TNNetVolume', iptrw);
    RegisterProperty('LayerIdx', 'integer', iptr);
    RegisterProperty('SmoothErrorPropagation', 'boolean', iptrw);
    RegisterProperty('BackwardTime', 'double', iptrw);
    RegisterProperty('ForwardTime', 'double', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetNeuronList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TNNetNeuron', 'TNNetNeuronList') do
  with CL.AddClassN(CL.FindClass('TNNetNeuron'),'TNNetNeuronList') do
  begin
    RegisterProperty('Items', 'TNNetNeuron Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Constructor CreateWithElements( ElementCount : integer)');
    RegisterMethod('Function GetMaxWeight( ) : TNeuralFloat');
    RegisterMethod('Function GetMinWeight( ) : TNeuralFloat');
    RegisterMethod('Procedure InitForDebug( )');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNNetNeuron(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMObject', 'TNNetNeuron') do
  with CL.AddClassN(CL.FindClass('TMObject'),'TNNetNeuron') do
  begin
    RegisterMethod('Constructor Create( )');
    RegisterMethod('Procedure Fill( Value : TNeuralFloat)');
    RegisterMethod('Procedure AddInertia( )');
    RegisterMethod('Procedure UpdateWeights( Inertia : TNeuralFloat)');
    RegisterMethod('Function SaveToString( ) : string');
    RegisterMethod('Procedure LoadFromString( strData : string)');
    RegisterMethod('Procedure ClearDelta');
    RegisterMethod('Procedure InitUniform( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitGaussian( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitLeCunUniform( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitHeUniform( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitHeGaussian( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitHeUniformDepthwise( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitHeGaussianDepthwise( Value : TNeuralFloat)');
    RegisterMethod('Procedure InitSELU( Value : TNeuralFloat)');
    RegisterProperty('Weights', 'TNNetVolume', iptr);
    RegisterProperty('BackInertia', 'TNNetVolume', iptr);
    RegisterProperty('Delta', 'TNNetVolume', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_neuralnetwork(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('csMaxInterleavedSize','integer').SetInt( 95);
  SIRegister_TNNetNeuron(CL);
  SIRegister_TNNetNeuronList(CL);
 CL.AddConstantN('csNNetMaxParameterIdx','LongInt').SetInt( 7);
  SIRegister_TNNetLayer(CL);
  //CL.AddTypeS('TNNetLayerClass', 'class of TNNetLayer');
  SIRegister_TNNetLayerConcatedWeights(CL);
  SIRegister_TNNetLayerList(CL);
  SIRegister_TNNetInputBase(CL);
  SIRegister_TNNetInput(CL);
  SIRegister_TNNetIdentity(CL);
  SIRegister_TNNetIdentityWithoutL2(CL);
  SIRegister_TNNetIdentityWithoutBackprop(CL);
  SIRegister_TNNetReLUBase(CL);
  SIRegister_TNNetReLU(CL);
  SIRegister_TNNetReLUL(CL);
  SIRegister_TNNetSELU(CL);
  SIRegister_TNNetLeakyReLU(CL);
  SIRegister_TNNetVeryLeakyReLU(CL);
  SIRegister_TNNetSigmoid(CL);
  SIRegister_TNNetHyperbolicTangent(CL);
  SIRegister_TNNetMulLearning(CL);
  SIRegister_TNNetAddAndDiv(CL);
  SIRegister_TNNetAddNoiseBase(CL);
  SIRegister_TNNetDropout(CL);
  SIRegister_TNNetRandomMulAdd(CL);
  SIRegister_TNNetChannelRandomMulAdd(CL);
  SIRegister_TNNetLayerMaxNormalization(CL);
  SIRegister_TNNetLayerStdNormalization(CL);
  SIRegister_TNNetMovingStdNormalization(CL);
  SIRegister_TNNetChannelTransformBase(CL);
  SIRegister_TNNetChannelShiftBase(CL);
  SIRegister_TNNetChannelBias(CL);
  SIRegister_TNNetChannelMul(CL);
  SIRegister_TNNetCellBias(CL);
  SIRegister_TNNetCellMul(CL);
  SIRegister_TNNetChannelZeroCenter(CL);
  SIRegister_TNNetChannelStdNormalization(CL);
  SIRegister_TNNetLocalResponseNorm2D(CL);
  SIRegister_TNNetLocalResponseNormDepth(CL);
  SIRegister_TNNetReshape(CL);
  SIRegister_TNNetConcatBase(CL);
  SIRegister_TNNetConcat(CL);
  SIRegister_TNNetDeepConcat(CL);
  SIRegister_TNNetSum(CL);
  SIRegister_TNNetSplitChannels(CL);
  SIRegister_TNNetSplitChannelEvery(CL);
  SIRegister_TNNetFullConnect(CL);
  SIRegister_TNNetFullConnectLinear(CL);
  SIRegister_TNNetFullConnectSigmoid(CL);
  SIRegister_TNNetFullConnectReLU(CL);
  SIRegister_TNNetFullConnectDiff(CL);
  SIRegister_TNNetSoftMax(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNNetLayerFullConnect');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNNetLayerFullConnectReLU');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNNetLayerSoftMax');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNNetDense');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNNetDenseReLU');
  SIRegister_TNNetConvolutionAbstract(CL);
  SIRegister_TNNetDepthwiseConv(CL);
  SIRegister_TNNetDepthwiseConvLinear(CL);
  SIRegister_TNNetDepthwiseConvReLU(CL);
  SIRegister_TNNetConvolutionBase(CL);
  //CL.AddTypeS('TNNetConvolutionClass', 'class of TNNetConvolutionBase');
  SIRegister_TNNetConvolution(CL);
  SIRegister_TNNetDeconvolution(CL);
  SIRegister_TNNetConvolutionReLU(CL);
  SIRegister_TNNetPointwiseConvReLU(CL);
  SIRegister_TNNetConvolutionLinear(CL);
  SIRegister_TNNetPointwiseConvLinear(CL);
  SIRegister_TNNetDeconvolutionReLU(CL);
  SIRegister_TNNetLocalConnect(CL);
  SIRegister_TNNetDeLocalConnect(CL);
  SIRegister_TNNetLocalConnectReLU(CL);
  SIRegister_TNNetDeLocalConnectReLU(CL);
  SIRegister_TNNetPoolBase(CL);
  SIRegister_TNNetMaxPool(CL);
  SIRegister_TNNetMaxPoolPortable(CL);
  SIRegister_TNNetMinPool(CL);
  SIRegister_TNNetMaxChannel(CL);
  SIRegister_TNNetMinChannel(CL);
  SIRegister_TNNetAvgPool(CL);
  SIRegister_TNNetAvgChannel(CL);
  SIRegister_TNNetDeMaxPool(CL);
  SIRegister_TNNetUpsample(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TNNetDeAvgPool');
  SIRegister_TNNet(CL);
  SIRegister_THistoricalNets(CL);
  SIRegister_TNNetDataParallelism(CL);
 CL.AddDelphiFunction('Procedure TestConvolutionAPI( )');
 CL.AddDelphiFunction('Procedure TestConvolutionOpenCL( platform_id : cl_platform_id; device_id : cl_device_id)');
 CL.AddDelphiFunction('Procedure RebuildPatternOnPreviousPatterns( Calculated : TNNetVolume; LocalWeight : TNNetVolume; PrevLayer : TNNetNeuronList; PrevStride : integer; ReLU : boolean; Threshold : TNeuralFloat)');
 CL.AddDelphiFunction('Procedure RebuildNeuronListOnPreviousPatterns( CalculatedLayer : TNNetNeuronList; CurrentLayer, PrevLayer : TNNetNeuronList; PrevStride : integer; ReLU : boolean; Threshold : TNeuralFloat)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function TNNetDataParallelismCreate41_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer; pFreeObjects : Boolean):TObject;
Begin Result := TNNetDataParallelism.Create(pSize, pFreeObjects); END;

(*----------------------------------------------------------------------------*)
Function TNNetDataParallelismCreate40_P(Self: TClass; CreateNewInstance: Boolean;  CloneNN : TNNet; pSize : integer; pFreeObjects : Boolean):TObject;
Begin Result := TNNetDataParallelism.Create(CloneNN, pSize, pFreeObjects); END;

(*----------------------------------------------------------------------------*)
procedure TNNetDataParallelismItems_W(Self: TNNetDataParallelism; const T: TNNet; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetDataParallelismItems_R(Self: TNNetDataParallelism; var T: TNNet; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayers_R(Self: TNNet; var T: TNNetLayerList);
begin T := Self.Layers; end;

(*----------------------------------------------------------------------------*)
procedure TNNetForwardTime_W(Self: TNNet; const T: double);
begin Self.ForwardTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetForwardTime_R(Self: TNNet; var T: double);
begin T := Self.ForwardTime; end;

(*----------------------------------------------------------------------------*)
procedure TNNetBackwardTime_W(Self: TNNet; const T: double);
begin Self.BackwardTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetBackwardTime_R(Self: TNNet; var T: double);
begin T := Self.BackwardTime; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLearningRate_R(Self: TNNet; var T: TNeuralFloat);
begin T := Self.LearningRate; end;

(*----------------------------------------------------------------------------*)
Procedure TNNetBackpropagate39_P(Self: TNNet;  pOutput : array of TNeuralFloat);
Begin Self.Backpropagate(pOutput); END;

(*----------------------------------------------------------------------------*)
Procedure TNNetBackpropagate38_P(Self: TNNet;  pOutput : TNNetVolume);
Begin Self.Backpropagate(pOutput); END;

(*----------------------------------------------------------------------------*)
Procedure TNNetCompute37_P(Self: TNNet;  pInput : array of TNeuralFloat; FromLayerIdx : integer);
Begin Self.Compute(pInput, FromLayerIdx); END;

(*----------------------------------------------------------------------------*)
Procedure TNNetCompute36_P(Self: TNNet;  pInput : TNNetVolume; FromLayerIdx : integer);
Begin Self.Compute(pInput, FromLayerIdx); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddLayerAfter35_P(Self: TNNet;  strData : string; pAfterLayerIdx : integer) : TNNetLayer;
Begin Result := Self.AddLayerAfter(strData, pAfterLayerIdx); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddLayerAfter34_P(Self: TNNet;  pLayer : TNNetLayer; pAfterLayerIdx : integer) : TNNetLayer;
Begin Result := Self.AddLayerAfter(pLayer, pAfterLayerIdx); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddLayerAfter33_P(Self: TNNet;  pLayer, pAfterLayer : TNNetLayer) : TNNetLayer;
Begin Result := Self.AddLayerAfter(pLayer, pAfterLayer); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddMovingNorm32_P(Self: TNNet;  PerCell : boolean; RandomBias, RandomAmplifier : integer; pAfterLayer : TNNetLayer) : TNNetLayer;
Begin Result := Self.AddMovingNorm(PerCell, RandomBias, RandomAmplifier, pAfterLayer); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddMovingNorm31_P(Self: TNNet;  PerCell : boolean; pAfterLayer : TNNetLayer) : TNNetLayer;
Begin Result := Self.AddMovingNorm(PerCell, pAfterLayer); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddLayer30_P(Self: TNNet;  pLayers : array of TNNetLayer) : TNNetLayer;
Begin Result := Self.AddLayer(pLayers); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddLayer29_P(Self: TNNet;  strData : string) : TNNetLayer;
Begin Result := Self.AddLayer(strData); END;

(*----------------------------------------------------------------------------*)
Function TNNetAddLayer28_P(Self: TNNet;  pLayer : TNNetLayer) : TNNetLayer;
Begin Result := Self.AddLayer(pLayer); END;

(*----------------------------------------------------------------------------*)
procedure TNNetConvolutionBasePointwise_R(Self: TNNetConvolutionBase; var T: boolean);
begin T := Self.Pointwise; end;

(*----------------------------------------------------------------------------*)
Procedure TNNetConvolutionBasePrepareInputForConvolution27_P(Self: TNNetConvolutionBase;  OutputX, OutputY : integer);
Begin Self.PrepareInputForConvolution(OutputX, OutputY); END;

(*----------------------------------------------------------------------------*)
Procedure TNNetConvolutionBasePrepareInputForConvolution26_P(Self: TNNetConvolutionBase;  );
Begin Self.PrepareInputForConvolution; END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectDiffCreate25_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectDiff.Create(pSize, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectDiffCreate24_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectDiff.Create(pSizeX, pSizeY, pDepth, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectReLUCreate23_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectReLU.Create(pSize, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectReLUCreate22_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectReLU.Create(pSizeX, pSizeY, pDepth, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectSigmoidCreate21_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectSigmoid.Create(pSize, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectSigmoidCreate20_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectSigmoid.Create(pSizeX, pSizeY, pDepth, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectLinearCreate19_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectLinear.Create(pSize, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectLinearCreate18_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnectLinear.Create(pSizeX, pSizeY, pDepth, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectCreate17_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnect.Create(pSize, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetFullConnectCreate16_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer; pSuppressBias : integer):TObject;
Begin Result := TNNetFullConnect.Create(pSizeX, pSizeY, pDepth, pSuppressBias); END;

(*----------------------------------------------------------------------------*)
Function TNNetSplitChannelEveryCreate15_P(Self: TClass; CreateNewInstance: Boolean;  pChannels : array of integer):TObject;
Begin Result := TNNetSplitChannelEvery.Create(pChannels); END;

(*----------------------------------------------------------------------------*)
Function TNNetSplitChannelEveryCreate14_P(Self: TClass; CreateNewInstance: Boolean;  GetChannelEvery, ChannelShift : integer):TObject;
Begin Result := TNNetSplitChannelEvery.Create(GetChannelEvery, ChannelShift); END;

(*----------------------------------------------------------------------------*)
Function TNNetSplitChannelsCreate13_P(Self: TClass; CreateNewInstance: Boolean;  pChannels : array of integer):TObject;
Begin Result := TNNetSplitChannels.Create(pChannels); END;

(*----------------------------------------------------------------------------*)
Function TNNetSplitChannelsCreate12_P(Self: TClass; CreateNewInstance: Boolean;  ChannelStart, ChannelLen : integer):TObject;
Begin Result := TNNetSplitChannels.Create(ChannelStart, ChannelLen); END;

(*----------------------------------------------------------------------------*)
Function TNNetSumCreate11_P(Self: TClass; CreateNewInstance: Boolean;  aL : array of TNNetLayer):TObject;
Begin Result := TNNetSum.Create(aL); END;

(*----------------------------------------------------------------------------*)
Function TNNetDeepConcatCreate10_P(Self: TClass; CreateNewInstance: Boolean;  aL : array of TNNetLayer):TObject;
Begin Result := TNNetDeepConcat.Create(aL); END;

(*----------------------------------------------------------------------------*)
Function TNNetConcatCreate9_P(Self: TClass; CreateNewInstance: Boolean;  aL : array of TNNetLayer):TObject;
Begin Result := TNNetConcat.Create(aL); END;

(*----------------------------------------------------------------------------*)
Function TNNetConcatCreate8_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer; aL : array of TNNetLayer):TObject;
Begin Result := TNNetConcat.Create(pSizeX, pSizeY, pDepth, aL); END;

(*----------------------------------------------------------------------------*)
Function TNNetReshapeCreate7_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer):TObject;
Begin Result := TNNetReshape.Create(pSizeX, pSizeY, pDepth); END;

(*----------------------------------------------------------------------------*)
procedure TNNetDropoutDropoutMask_R(Self: TNNetDropout; var T: TNNetVolume);
begin T := Self.DropoutMask; end;

(*----------------------------------------------------------------------------*)
procedure TNNetAddNoiseBaseEnabled_W(Self: TNNetAddNoiseBase; const T: boolean);
begin Self.Enabled := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetAddNoiseBaseEnabled_R(Self: TNNetAddNoiseBase; var T: boolean);
begin T := Self.Enabled; end;

(*----------------------------------------------------------------------------*)
Function TNNetAddAndDivCreate6_P(Self: TClass; CreateNewInstance: Boolean;  pAdd, pDiv : integer):TObject;
Begin Result := TNNetAddAndDiv.Create(pAdd, pDiv); END;

(*----------------------------------------------------------------------------*)
Function TNNetInputCreate5_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth, pError : integer):TObject;
Begin Result := TNNetInput.Create(pSizeX, pSizeY, pDepth, pError); END;

(*----------------------------------------------------------------------------*)
Function TNNetInputCreate4_P(Self: TClass; CreateNewInstance: Boolean;  pSizeX, pSizeY, pDepth : integer):TObject;
Begin Result := TNNetInput.Create(pSizeX, pSizeY, pDepth); END;

(*----------------------------------------------------------------------------*)
Function TNNetInputCreate3_P(Self: TClass; CreateNewInstance: Boolean;  pSize : integer):TObject;
Begin Result := TNNetInput.Create(pSize); END;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerListItems_W(Self: TNNetLayerList; const T: TNNetLayer; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerListItems_R(Self: TNNetLayerList; var T: TNNetLayer; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerForwardTime_W(Self: TNNetLayer; const T: double);
begin Self.ForwardTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerForwardTime_R(Self: TNNetLayer; var T: double);
begin T := Self.ForwardTime; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerBackwardTime_W(Self: TNNetLayer; const T: double);
begin Self.BackwardTime := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerBackwardTime_R(Self: TNNetLayer; var T: double);
begin T := Self.BackwardTime; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerSmoothErrorPropagation_W(Self: TNNetLayer; const T: boolean);
begin Self.SmoothErrorPropagation := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerSmoothErrorPropagation_R(Self: TNNetLayer; var T: boolean);
begin T := Self.SmoothErrorPropagation; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerLayerIdx_R(Self: TNNetLayer; var T: integer);
begin T := Self.LayerIdx; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerOutputErrorDeriv_W(Self: TNNetLayer; const T: TNNetVolume);
begin Self.OutputErrorDeriv := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerOutputErrorDeriv_R(Self: TNNetLayer; var T: TNNetVolume);
begin T := Self.OutputErrorDeriv; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerOutputError_W(Self: TNNetLayer; const T: TNNetVolume);
begin Self.OutputError := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerOutputError_R(Self: TNNetLayer; var T: TNNetVolume);
begin T := Self.OutputError; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerInertia_R(Self: TNNetLayer; var T: TNeuralFloat);
begin T := Self.Inertia; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerL2Decay_W(Self: TNNetLayer; const T: TNeuralFloat);
begin Self.L2Decay := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerL2Decay_R(Self: TNNetLayer; var T: TNeuralFloat);
begin T := Self.L2Decay; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerLearningRate_W(Self: TNNetLayer; const T: TNeuralFloat);
begin Self.LearningRate := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerLearningRate_R(Self: TNNetLayer; var T: TNeuralFloat);
begin T := Self.LearningRate; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerPrevLayer_W(Self: TNNetLayer; const T: TNNetLayer);
begin Self.PrevLayer := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerPrevLayer_R(Self: TNNetLayer; var T: TNNetLayer);
begin T := Self.PrevLayer; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerOutputRaw_R(Self: TNNetLayer; var T: TNNetVolume);
begin T := Self.OutputRaw; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerOutput_R(Self: TNNetLayer; var T: TNNetVolume);
begin T := Self.Output; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerNeurons_R(Self: TNNetLayer; var T: TNNetNeuronList);
begin T := Self.Neurons; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerActivationFnDerivative_W(Self: TNNetLayer; const T: TNeuralActivationFunction);
begin Self.ActivationFnDerivative := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerActivationFnDerivative_R(Self: TNNetLayer; var T: TNeuralActivationFunction);
begin T := Self.ActivationFnDerivative; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerActivationFn_W(Self: TNNetLayer; const T: TNeuralActivationFunction);
begin Self.ActivationFn := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetLayerActivationFn_R(Self: TNNetLayer; var T: TNeuralActivationFunction);
begin T := Self.ActivationFn; end;

(*----------------------------------------------------------------------------*)
Procedure TNNetLayerSetNumWeightsForAllNeurons2_P(Self: TNNetLayer;  Origin : TNNetVolume);
Begin Self.SetNumWeightsForAllNeurons(Origin); END;

(*----------------------------------------------------------------------------*)
Procedure TNNetLayerSetNumWeightsForAllNeurons1_P(Self: TNNetLayer;  x, y, d : integer);
Begin Self.SetNumWeightsForAllNeurons(x, y, d); END;

(*----------------------------------------------------------------------------*)
Procedure TNNetLayerSetNumWeightsForAllNeurons0_P(Self: TNNetLayer;  NumWeights : integer);
Begin Self.SetNumWeightsForAllNeurons(NumWeights); END;

(*----------------------------------------------------------------------------*)
procedure TNNetNeuronListItems_W(Self: TNNetNeuronList; const T: TNNetNeuron; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TNNetNeuronListItems_R(Self: TNNetNeuronList; var T: TNNetNeuron; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TNNetNeuronDelta_R(Self: TNNetNeuron; var T: TNNetVolume);
begin T := Self.Delta; end;

(*----------------------------------------------------------------------------*)
procedure TNNetNeuronBackInertia_R(Self: TNNetNeuron; var T: TNNetVolume);
begin T := Self.BackInertia; end;

(*----------------------------------------------------------------------------*)
procedure TNNetNeuronWeights_R(Self: TNNetNeuron; var T: TNNetVolume);
begin T := Self.Weights; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_neuralnetwork_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@TestConvolutionAPI, 'TestConvolutionAPI', cdRegister);
 S.RegisterDelphiFunction(@TestConvolutionOpenCL, 'TestConvolutionOpenCL', cdRegister);
 S.RegisterDelphiFunction(@RebuildPatternOnPreviousPatterns, 'RebuildPatternOnPreviousPatterns', cdRegister);
 S.RegisterDelphiFunction(@RebuildNeuronListOnPreviousPatterns, 'RebuildNeuronListOnPreviousPatterns', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDataParallelism(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDataParallelism) do
  begin
    RegisterPropertyHelper(@TNNetDataParallelismItems_R,@TNNetDataParallelismItems_W,'Items');
    RegisterConstructor(@TNNetDataParallelismCreate40_P, 'Create40');
    RegisterConstructor(@TNNetDataParallelismCreate41_P, 'Create41');
    RegisterMethod(@TNNetDataParallelism.SetLearningRate, 'SetLearningRate');
    RegisterMethod(@TNNetDataParallelism.SetBatchUpdate, 'SetBatchUpdate');
    RegisterMethod(@TNNetDataParallelism.SetL2Decay, 'SetL2Decay');
    RegisterMethod(@TNNetDataParallelism.SetL2DecayToConvolutionalLayers, 'SetL2DecayToConvolutionalLayers');
    RegisterMethod(@TNNetDataParallelism.EnableDropouts, 'EnableDropouts');
    RegisterMethod(@TNNetDataParallelism.CopyWeights, 'CopyWeights');
    RegisterMethod(@TNNetDataParallelism.SumWeights, 'SumWeights');
    RegisterMethod(@TNNetDataParallelism.SumDeltas, 'SumDeltas');
    RegisterMethod(@TNNetDataParallelism.AvgWeights, 'AvgWeights');
    RegisterMethod(@TNNetDataParallelism.ReplaceAtIdxAndUpdateWeightAvg, 'ReplaceAtIdxAndUpdateWeightAvg');
    RegisterMethod(@TNNetDataParallelism.DisableOpenCL, 'DisableOpenCL');
    RegisterMethod(@TNNetDataParallelism.EnableOpenCL, 'EnableOpenCL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_THistoricalNets(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(THistoricalNets) do
  begin
    RegisterMethod(@THistoricalNets.AddLeCunLeNet5, 'AddLeCunLeNet5');
    RegisterMethod(@THistoricalNets.AddAlexNet, 'AddAlexNet');
    RegisterMethod(@THistoricalNets.AddVGGNet, 'AddVGGNet');
    RegisterMethod(@THistoricalNets.AddResNetUnit, 'AddResNetUnit');
    RegisterMethod(@THistoricalNets.AddDenseNetBlock, 'AddDenseNetBlock');
    RegisterMethod(@THistoricalNets.AddDenseNetTransition, 'AddDenseNetTransition');
    RegisterMethod(@THistoricalNets.AddDenseNetBlockCAI, 'AddDenseNetBlockCAI');
    RegisterMethod(@THistoricalNets.AddDenseFullyConnected, 'AddDenseFullyConnected');
    RegisterMethod(@THistoricalNets.AddSuperResolution, 'AddSuperResolution');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNet) do
  begin
    RegisterConstructor(@TNNet.Create, 'Create');
    RegisterMethod(@TNNet.CreateLayer, 'CreateLayer');
    RegisterMethod(@TNNetAddLayer28_P, 'AddLayer28');
    RegisterMethod(@TNNetAddLayer29_P, 'AddLayer29');
    RegisterMethod(@TNNetAddLayer30_P, 'AddLayer30');
    RegisterMethod(@TNNet.AddSeparableConvReLU, 'AddSeparableConvReLU');
    RegisterMethod(@TNNet.AddSeparableConvLinear, 'AddSeparableConvLinear');
    RegisterMethod(@TNNetAddMovingNorm31_P, 'AddMovingNorm31');
    RegisterMethod(@TNNetAddMovingNorm32_P, 'AddMovingNorm32');
    RegisterMethod(@TNNet.AddChannelMovingNorm, 'AddChannelMovingNorm');
    RegisterMethod(@TNNet.AddConvOrSeparableConv, 'AddConvOrSeparableConv');
    RegisterMethod(@TNNet.AddCompression, 'AddCompression');
    RegisterMethod(@TNNet.AddMinMaxPool, 'AddMinMaxPool');
    RegisterMethod(@TNNet.AddAvgMaxPool, 'AddAvgMaxPool');
    RegisterMethod(@TNNet.AddMinMaxChannel, 'AddMinMaxChannel');
    RegisterMethod(@TNNet.AddAvgMaxChannel, 'AddAvgMaxChannel');
    RegisterMethod(@TNNet.AddToExponentialWeightAverage, 'AddToExponentialWeightAverage');
    RegisterMethod(@TNNet.AddToWeightAverage, 'AddToWeightAverage');
    RegisterMethod(@TNNetAddLayerAfter33_P, 'AddLayerAfter33');
    RegisterMethod(@TNNetAddLayerAfter34_P, 'AddLayerAfter34');
    RegisterMethod(@TNNetAddLayerAfter35_P, 'AddLayerAfter35');
    RegisterMethod(@TNNet.GetFirstNeuronalLayerIdx, 'GetFirstNeuronalLayerIdx');
    RegisterMethod(@TNNet.GetFirstImageNeuronalLayerIdx, 'GetFirstImageNeuronalLayerIdx');
    RegisterMethod(@TNNet.GetFirstNeuronalLayerIdxWithChannels, 'GetFirstNeuronalLayerIdxWithChannels');
    RegisterMethod(@TNNet.GetLastLayerIdx, 'GetLastLayerIdx');
    RegisterMethod(@TNNet.GetLastLayer, 'GetLastLayer');
    RegisterMethod(@TNNetCompute36_P, 'Compute36');
    RegisterMethod(@TNNetCompute37_P, 'Compute37');
    RegisterMethod(@TNNetBackpropagate38_P, 'Backpropagate38');
    RegisterMethod(@TNNet.BackpropagateForIdx, 'BackpropagateForIdx');
    RegisterMethod(@TNNet.BackpropagateFromLayerAndNeuron, 'BackpropagateFromLayerAndNeuron');
    RegisterMethod(@TNNetBackpropagate39_P, 'Backpropagate39');
    RegisterMethod(@TNNet.GetOutput, 'GetOutput');
    RegisterMethod(@TNNet.AddOutput, 'AddOutput');
    RegisterMethod(@TNNet.SetActivationFn, 'SetActivationFn');
    RegisterMethod(@TNNet.SetLearningRate, 'SetLearningRate');
    RegisterMethod(@TNNet.SetBatchUpdate, 'SetBatchUpdate');
    RegisterMethod(@TNNet.InitWeights, 'InitWeights');
    RegisterMethod(@TNNet.UpdateWeights, 'UpdateWeights');
    RegisterMethod(@TNNet.ClearDeltas, 'ClearDeltas');
    RegisterMethod(@TNNet.ResetBackpropCallCurrCnt, 'ResetBackpropCallCurrCnt');
    RegisterMethod(@TNNet.SetL2Decay, 'SetL2Decay');
    RegisterMethod(@TNNet.SetL2DecayToConvolutionalLayers, 'SetL2DecayToConvolutionalLayers');
    RegisterMethod(@TNNet.ComputeL2Decay, 'ComputeL2Decay');
    RegisterMethod(@TNNet.SetSmoothErrorPropagation, 'SetSmoothErrorPropagation');
    RegisterMethod(@TNNet.ClearTime, 'ClearTime');
    RegisterMethod(@TNNet.Clear, 'Clear');
    RegisterMethod(@TNNet.IdxsToLayers, 'IdxsToLayers');
    RegisterMethod(@TNNet.EnableDropouts, 'EnableDropouts');
    RegisterMethod(@TNNet.RefreshDropoutMask, 'RefreshDropoutMask');
    RegisterMethod(@TNNet.MulMulAddWeights, 'MulMulAddWeights');
    RegisterMethod(@TNNet.MulAddWeights, 'MulAddWeights');
    RegisterMethod(@TNNet.MulWeights, 'MulWeights');
    RegisterMethod(@TNNet.MulDeltas, 'MulDeltas');
    RegisterMethod(@TNNet.SumWeights, 'SumWeights');
    RegisterMethod(@TNNet.SumDeltas, 'SumDeltas');
    RegisterMethod(@TNNet.SumDeltasNoChecks, 'SumDeltasNoChecks');
    RegisterMethod(@TNNet.CopyWeights, 'CopyWeights');
    RegisterMethod(@TNNet.ForceMaxAbsoluteDelta, 'ForceMaxAbsoluteDelta');
    RegisterMethod(@TNNet.GetMaxAbsoluteDelta, 'GetMaxAbsoluteDelta');
    RegisterMethod(@TNNet.NormalizeMaxAbsoluteDelta, 'NormalizeMaxAbsoluteDelta');
    RegisterMethod(@TNNet.ClearInertia, 'ClearInertia');
    RegisterMethod(@TNNet.DisableOpenCL, 'DisableOpenCL');
    RegisterMethod(@TNNet.EnableOpenCL, 'EnableOpenCL');
    RegisterMethod(@TNNet.DebugWeights, 'DebugWeights');
    RegisterMethod(@TNNet.DebugErrors, 'DebugErrors');
    RegisterMethod(@TNNet.DebugStructure, 'DebugStructure');
    RegisterMethod(@TNNet.CountLayers, 'CountLayers');
    RegisterMethod(@TNNet.CountNeurons, 'CountNeurons');
    RegisterMethod(@TNNet.CountWeights, 'CountWeights');
    RegisterMethod(@TNNet.GetWeightSum, 'GetWeightSum');
    RegisterMethod(@TNNet.SaveDataToString, 'SaveDataToString');
    RegisterMethod(@TNNet.LoadDataFromString, 'LoadDataFromString');
    RegisterMethod(@TNNet.LoadDataFromFile, 'LoadDataFromFile');
    RegisterMethod(@TNNet.SaveStructureToString, 'SaveStructureToString');
    RegisterMethod(@TNNet.LoadStructureFromString, 'LoadStructureFromString');
    RegisterMethod(@TNNet.SaveToString, 'SaveToString');
    RegisterMethod(@TNNet.SaveToFile, 'SaveToFile');
    RegisterMethod(@TNNet.LoadFromString, 'LoadFromString');
    RegisterMethod(@TNNet.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TNNet.Clone, 'Clone');
    RegisterMethod(@TNNet.MulWeightsGlorotBengio, 'MulWeightsGlorotBengio');
    RegisterMethod(@TNNet.MulWeightsHe, 'MulWeightsHe');
    RegisterPropertyHelper(@TNNetLearningRate_R,nil,'LearningRate');
    RegisterPropertyHelper(@TNNetBackwardTime_R,@TNNetBackwardTime_W,'BackwardTime');
    RegisterPropertyHelper(@TNNetForwardTime_R,@TNNetForwardTime_W,'ForwardTime');
    RegisterPropertyHelper(@TNNetLayers_R,nil,'Layers');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetUpsample(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetUpsample) do
  begin
    RegisterConstructor(@TNNetUpsample.Create, 'Create');
    RegisterMethod(@TNNetUpsample.Compute, 'Compute');
    RegisterMethod(@TNNetUpsample.ComputePreviousLayerError, 'ComputePreviousLayerError');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDeMaxPool(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDeMaxPool) do
  begin
    RegisterConstructor(@TNNetDeMaxPool.Create, 'Create');
    RegisterMethod(@TNNetDeMaxPool.Compute, 'Compute');
    RegisterMethod(@TNNetDeMaxPool.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetDeMaxPool.ComputePreviousLayerError, 'ComputePreviousLayerError');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetAvgChannel(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetAvgChannel) do
  begin
    RegisterConstructor(@TNNetAvgChannel.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetAvgPool(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetAvgPool) do
  begin
    RegisterConstructor(@TNNetAvgPool.Create, 'Create');
    RegisterMethod(@TNNetAvgPool.Compute, 'Compute');
    RegisterMethod(@TNNetAvgPool.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMinChannel(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMinChannel) do
  begin
    RegisterConstructor(@TNNetMinChannel.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMaxChannel(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMaxChannel) do
  begin
    RegisterConstructor(@TNNetMaxChannel.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMinPool(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMinPool) do
  begin
    RegisterMethod(@TNNetMinPool.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMaxPoolPortable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMaxPoolPortable) do
  begin
    RegisterMethod(@TNNetMaxPoolPortable.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMaxPool(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMaxPool) do
  begin
    RegisterMethod(@TNNetMaxPool.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetPoolBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetPoolBase) do
  begin
    RegisterConstructor(@TNNetPoolBase.Create, 'Create');
    RegisterMethod(@TNNetPoolBase.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDeLocalConnectReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDeLocalConnectReLU) do
  begin
    RegisterConstructor(@TNNetDeLocalConnectReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLocalConnectReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLocalConnectReLU) do
  begin
    RegisterConstructor(@TNNetLocalConnectReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDeLocalConnect(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDeLocalConnect) do
  begin
    RegisterConstructor(@TNNetDeLocalConnect.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLocalConnect(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLocalConnect) do
  begin
    RegisterMethod(@TNNetLocalConnect.Compute, 'Compute');
    RegisterMethod(@TNNetLocalConnect.ComputeNTL, 'ComputeNTL');
    RegisterMethod(@TNNetLocalConnect.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetLocalConnect.BackpropagateCPU, 'BackpropagateCPU');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDeconvolutionReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDeconvolutionReLU) do
  begin
    RegisterConstructor(@TNNetDeconvolutionReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetPointwiseConvLinear(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetPointwiseConvLinear) do
  begin
    RegisterConstructor(@TNNetPointwiseConvLinear.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConvolutionLinear(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConvolutionLinear) do
  begin
    RegisterConstructor(@TNNetConvolutionLinear.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetPointwiseConvReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetPointwiseConvReLU) do
  begin
    RegisterConstructor(@TNNetPointwiseConvReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConvolutionReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConvolutionReLU) do
  begin
    RegisterConstructor(@TNNetConvolutionReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDeconvolution(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDeconvolution) do
  begin
    RegisterConstructor(@TNNetDeconvolution.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConvolution(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConvolution) do
  begin
    RegisterMethod(@TNNetConvolution.Compute, 'Compute');
    RegisterMethod(@TNNetConvolution.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetConvolution.BackpropagateCPU, 'BackpropagateCPU');
    RegisterMethod(@TNNetConvolution.BackpropagateFastCPU, 'BackpropagateFastCPU');
    RegisterMethod(@TNNetConvolution.BackpropagateFastCPUDev, 'BackpropagateFastCPUDev');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConvolutionBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConvolutionBase) do
  begin
    RegisterConstructor(@TNNetConvolutionBase.Create, 'Create');
    RegisterMethod(@TNNetConvolutionBase.EnableOpenCL, 'EnableOpenCL');
    RegisterPropertyHelper(@TNNetConvolutionBasePointwise_R,nil,'Pointwise');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDepthwiseConvReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDepthwiseConvReLU) do
  begin
    RegisterConstructor(@TNNetDepthwiseConvReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDepthwiseConvLinear(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDepthwiseConvLinear) do
  begin
    RegisterConstructor(@TNNetDepthwiseConvLinear.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDepthwiseConv(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDepthwiseConv) do
  begin
    RegisterConstructor(@TNNetDepthwiseConv.Create, 'Create');
    RegisterMethod(@TNNetDepthwiseConv.Compute, 'Compute');
    RegisterMethod(@TNNetDepthwiseConv.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetDepthwiseConv.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConvolutionAbstract(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConvolutionAbstract) do
  begin
    RegisterConstructor(@TNNetConvolutionAbstract.Create, 'Create');
    RegisterMethod(@TNNetConvolutionAbstract.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetSoftMax(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetSoftMax) do
  begin
    RegisterMethod(@TNNetSoftMax.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetFullConnectDiff(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetFullConnectDiff) do
  begin
    RegisterConstructor(@TNNetFullConnectDiffCreate24_P, 'Create24');
    RegisterConstructor(@TNNetFullConnectDiffCreate25_P, 'Create25');
    RegisterMethod(@TNNetFullConnectDiff.Compute, 'Compute');
    RegisterMethod(@TNNetFullConnectDiff.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetFullConnectReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetFullConnectReLU) do
  begin
    RegisterMethod(@TNNetFullConnectReLU.ComputeCPU, 'ComputeCPU');
    RegisterMethod(@TNNetFullConnectReLU.BackpropagateCPU, 'BackpropagateCPU');
    RegisterConstructor(@TNNetFullConnectReLUCreate22_P, 'Create22');
    RegisterConstructor(@TNNetFullConnectReLUCreate23_P, 'Create23');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetFullConnectSigmoid(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetFullConnectSigmoid) do
  begin
    RegisterConstructor(@TNNetFullConnectSigmoidCreate20_P, 'Create20');
    RegisterConstructor(@TNNetFullConnectSigmoidCreate21_P, 'Create21');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetFullConnectLinear(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetFullConnectLinear) do
  begin
    RegisterMethod(@TNNetFullConnectLinear.ComputeCPU, 'ComputeCPU');
    RegisterMethod(@TNNetFullConnectLinear.BackpropagateCPU, 'BackpropagateCPU');
    RegisterConstructor(@TNNetFullConnectLinearCreate18_P, 'Create18');
    RegisterConstructor(@TNNetFullConnectLinearCreate19_P, 'Create19');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetFullConnect(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetFullConnect) do
  begin
    RegisterConstructor(@TNNetFullConnectCreate16_P, 'Create16');
    RegisterConstructor(@TNNetFullConnectCreate17_P, 'Create17');
    RegisterMethod(@TNNetFullConnect.Compute, 'Compute');
    RegisterVirtualMethod(@TNNetFullConnect.ComputeCPU, 'ComputeCPU');
    RegisterMethod(@TNNetFullConnect.Backpropagate, 'Backpropagate');
    RegisterVirtualMethod(@TNNetFullConnect.BackpropagateCPU, 'BackpropagateCPU');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetSplitChannelEvery(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetSplitChannelEvery) do
  begin
    RegisterConstructor(@TNNetSplitChannelEveryCreate14_P, 'Create14');
    RegisterConstructor(@TNNetSplitChannelEveryCreate15_P, 'Create15');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetSplitChannels(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetSplitChannels) do
  begin
    RegisterConstructor(@TNNetSplitChannelsCreate12_P, 'Create12');
    RegisterConstructor(@TNNetSplitChannelsCreate13_P, 'Create13');
    RegisterMethod(@TNNetSplitChannels.Compute, 'Compute');
    RegisterMethod(@TNNetSplitChannels.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetSplitChannels.SaveStructureToString, 'SaveStructureToString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetSum(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetSum) do
  begin
    RegisterConstructor(@TNNetSumCreate11_P, 'Create11');
    RegisterMethod(@TNNetSum.Compute, 'Compute');
    RegisterMethod(@TNNetSum.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDeepConcat(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDeepConcat) do
  begin
    RegisterConstructor(@TNNetDeepConcatCreate10_P, 'Create10');
    RegisterMethod(@TNNetDeepConcat.Compute, 'Compute');
    RegisterMethod(@TNNetDeepConcat.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConcat(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConcat) do
  begin
    RegisterConstructor(@TNNetConcatCreate8_P, 'Create8');
    RegisterConstructor(@TNNetConcatCreate9_P, 'Create9');
    RegisterMethod(@TNNetConcat.Compute, 'Compute');
    RegisterMethod(@TNNetConcat.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetConcatBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetConcatBase) do
  begin
    RegisterConstructor(@TNNetConcatBase.Create, 'Create');
    RegisterMethod(@TNNetConcatBase.SaveStructureToString, 'SaveStructureToString');
    RegisterMethod(@TNNetConcatBase.BackpropagateConcat, 'BackpropagateConcat');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetReshape(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetReshape) do
  begin
    RegisterConstructor(@TNNetReshapeCreate7_P, 'Create7');
    RegisterMethod(@TNNetReshape.Compute, 'Compute');
    RegisterMethod(@TNNetReshape.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLocalResponseNormDepth(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLocalResponseNormDepth) do
  begin
    RegisterMethod(@TNNetLocalResponseNormDepth.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLocalResponseNorm2D(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLocalResponseNorm2D) do
  begin
    RegisterConstructor(@TNNetLocalResponseNorm2D.Create, 'Create');
    RegisterMethod(@TNNetLocalResponseNorm2D.Compute, 'Compute');
    RegisterMethod(@TNNetLocalResponseNorm2D.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelStdNormalization(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelStdNormalization) do
  begin
    RegisterConstructor(@TNNetChannelStdNormalization.Create, 'Create');
    RegisterMethod(@TNNetChannelStdNormalization.Compute, 'Compute');
    RegisterMethod(@TNNetChannelStdNormalization.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetChannelStdNormalization.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelZeroCenter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelZeroCenter) do
  begin
    RegisterMethod(@TNNetChannelZeroCenter.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetChannelZeroCenter.ComputeL2Decay, 'ComputeL2Decay');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetCellMul(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetCellMul) do
  begin
    RegisterMethod(@TNNetCellMul.Compute, 'Compute');
    RegisterMethod(@TNNetCellMul.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetCellMul.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetCellBias(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetCellBias) do
  begin
    RegisterMethod(@TNNetCellBias.Compute, 'Compute');
    RegisterMethod(@TNNetCellBias.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetCellBias.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelMul(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelMul) do
  begin
    RegisterMethod(@TNNetChannelMul.Compute, 'Compute');
    RegisterMethod(@TNNetChannelMul.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetChannelMul.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelBias(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelBias) do
  begin
    RegisterMethod(@TNNetChannelBias.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelShiftBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelShiftBase) do
  begin
    RegisterMethod(@TNNetChannelShiftBase.Compute, 'Compute');
    RegisterMethod(@TNNetChannelShiftBase.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelTransformBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelTransformBase) do
  begin
    RegisterConstructor(@TNNetChannelTransformBase.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMovingStdNormalization(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMovingStdNormalization) do
  begin
    RegisterConstructor(@TNNetMovingStdNormalization.Create, 'Create');
    RegisterMethod(@TNNetMovingStdNormalization.Compute, 'Compute');
    RegisterMethod(@TNNetMovingStdNormalization.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetMovingStdNormalization.InitDefault, 'InitDefault');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLayerStdNormalization(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLayerStdNormalization) do
  begin
    RegisterMethod(@TNNetLayerStdNormalization.Compute, 'Compute');
    RegisterMethod(@TNNetLayerStdNormalization.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLayerMaxNormalization(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLayerMaxNormalization) do
  begin
    RegisterMethod(@TNNetLayerMaxNormalization.Compute, 'Compute');
    RegisterMethod(@TNNetLayerMaxNormalization.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetChannelRandomMulAdd(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetChannelRandomMulAdd) do
  begin
    RegisterConstructor(@TNNetChannelRandomMulAdd.Create, 'Create');
    RegisterMethod(@TNNetChannelRandomMulAdd.SetPrevLayer, 'SetPrevLayer');
    RegisterMethod(@TNNetChannelRandomMulAdd.Compute, 'Compute');
    RegisterMethod(@TNNetChannelRandomMulAdd.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetRandomMulAdd(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetRandomMulAdd) do
  begin
    RegisterConstructor(@TNNetRandomMulAdd.Create, 'Create');
    RegisterMethod(@TNNetRandomMulAdd.Compute, 'Compute');
    RegisterMethod(@TNNetRandomMulAdd.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetDropout(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetDropout) do
  begin
    RegisterConstructor(@TNNetDropout.Create, 'Create');
    RegisterMethod(@TNNetDropout.Compute, 'Compute');
    RegisterMethod(@TNNetDropout.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetDropout.CopyWeights, 'CopyWeights');
    RegisterMethod(@TNNetDropout.RefreshDropoutMask, 'RefreshDropoutMask');
    RegisterPropertyHelper(@TNNetDropoutDropoutMask_R,nil,'DropoutMask');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetAddNoiseBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetAddNoiseBase) do
  begin
    RegisterPropertyHelper(@TNNetAddNoiseBaseEnabled_R,@TNNetAddNoiseBaseEnabled_W,'Enabled');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetAddAndDiv(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetAddAndDiv) do
  begin
    RegisterConstructor(@TNNetAddAndDivCreate6_P, 'Create6');
    RegisterMethod(@TNNetAddAndDiv.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetMulLearning(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetMulLearning) do
  begin
    RegisterConstructor(@TNNetMulLearning.Create, 'Create');
    RegisterMethod(@TNNetMulLearning.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetHyperbolicTangent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetHyperbolicTangent) do
  begin
    RegisterConstructor(@TNNetHyperbolicTangent.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetSigmoid(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetSigmoid) do
  begin
    RegisterConstructor(@TNNetSigmoid.Create, 'Create');
    RegisterMethod(@TNNetSigmoid.Compute, 'Compute');
    RegisterMethod(@TNNetSigmoid.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetVeryLeakyReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetVeryLeakyReLU) do
  begin
    RegisterConstructor(@TNNetVeryLeakyReLU.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLeakyReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLeakyReLU) do
  begin
    RegisterConstructor(@TNNetLeakyReLU.Create, 'Create');
    RegisterMethod(@TNNetLeakyReLU.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetSELU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetSELU) do
  begin
    RegisterConstructor(@TNNetSELU.Create, 'Create');
    RegisterMethod(@TNNetSELU.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetReLUL(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetReLUL) do
  begin
    RegisterConstructor(@TNNetReLUL.Create, 'Create');
    RegisterMethod(@TNNetReLUL.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetReLU(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetReLU) do
  begin
    RegisterMethod(@TNNetReLU.Compute, 'Compute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetReLUBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetReLUBase) do
  begin
    RegisterMethod(@TNNetReLUBase.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetIdentityWithoutBackprop(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetIdentityWithoutBackprop) do
  begin
    RegisterMethod(@TNNetIdentityWithoutBackprop.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetIdentityWithoutL2(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetIdentityWithoutL2) do
  begin
    RegisterMethod(@TNNetIdentityWithoutL2.ComputeL2Decay, 'ComputeL2Decay');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetIdentity(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetIdentity) do
  begin
    RegisterMethod(@TNNetIdentity.Compute, 'Compute');
    RegisterMethod(@TNNetIdentity.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetInput(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetInput) do
  begin
    RegisterConstructor(@TNNetInputCreate3_P, 'Create3');
    RegisterConstructor(@TNNetInputCreate4_P, 'Create4');
    RegisterConstructor(@TNNetInputCreate5_P, 'Create5');
    RegisterMethod(@TNNetInput.EnableErrorCollection, 'EnableErrorCollection');
    RegisterMethod(@TNNetInput.DisableErrorCollection, 'DisableErrorCollection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetInputBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetInputBase) do
  begin
    RegisterMethod(@TNNetInputBase.Compute, 'Compute');
    RegisterMethod(@TNNetInputBase.Backpropagate, 'Backpropagate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLayerList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLayerList) do
  begin
    RegisterPropertyHelper(@TNNetLayerListItems_R,@TNNetLayerListItems_W,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLayerConcatedWeights(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLayerConcatedWeights) do
  begin
    RegisterConstructor(@TNNetLayerConcatedWeights.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetLayer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetLayer) do
  begin
    RegisterConstructor(@TNNetLayer.Create, 'Create');
    RegisterVirtualMethod(@TNNetLayer.DisableOpenCL, 'DisableOpenCL');
    RegisterVirtualMethod(@TNNetLayer.EnableOpenCL, 'EnableOpenCL');
    RegisterVirtualAbstractMethod(@TNNetLayer, @!.Compute, 'Compute');
    RegisterVirtualAbstractMethod(@TNNetLayer, @!.Backpropagate, 'Backpropagate');
    RegisterMethod(@TNNetLayer.ComputeOutputErrorForOneNeuron, 'ComputeOutputErrorForOneNeuron');
    RegisterVirtualMethod(@TNNetLayer.ComputeOutputErrorWith, 'ComputeOutputErrorWith');
    RegisterVirtualMethod(@TNNetLayer.ComputeOutputErrorForIdx, 'ComputeOutputErrorForIdx');
    RegisterMethod(@TNNetLayer.ComputeErrorDeriv, 'ComputeErrorDeriv');
    RegisterMethod(@TNNetLayer.Fill, 'Fill');
    RegisterMethod(@TNNetLayer.ClearDeltas, 'ClearDeltas');
    RegisterMethod(@TNNetLayer.AddNeurons, 'AddNeurons');
    RegisterMethod(@TNNetLayer.AddMissingNeurons, 'AddMissingNeurons');
    RegisterMethod(@TNNetLayerSetNumWeightsForAllNeurons0_P, 'SetNumWeightsForAllNeurons0');
    RegisterMethod(@TNNetLayerSetNumWeightsForAllNeurons1_P, 'SetNumWeightsForAllNeurons1');
    RegisterMethod(@TNNetLayerSetNumWeightsForAllNeurons2_P, 'SetNumWeightsForAllNeurons2');
    RegisterMethod(@TNNetLayer.GetMaxWeight, 'GetMaxWeight');
    RegisterMethod(@TNNetLayer.GetMinWeight, 'GetMinWeight');
    RegisterMethod(@TNNetLayer.GetMaxDelta, 'GetMaxDelta');
    RegisterMethod(@TNNetLayer.GetMinDelta, 'GetMinDelta');
    RegisterMethod(@TNNetLayer.ForceMaxAbsoluteDelta, 'ForceMaxAbsoluteDelta');
    RegisterMethod(@TNNetLayer.GetMaxAbsoluteDelta, 'GetMaxAbsoluteDelta');
    RegisterMethod(@TNNetLayer.GetMinMaxAtDepth, 'GetMinMaxAtDepth');
    RegisterMethod(@TNNetLayer.GetWeightSum, 'GetWeightSum');
    RegisterMethod(@TNNetLayer.GetBiasSum, 'GetBiasSum');
    RegisterMethod(@TNNetLayer.GetInertiaSum, 'GetInertiaSum');
    RegisterMethod(@TNNetLayer.CountWeights, 'CountWeights');
    RegisterMethod(@TNNetLayer.MulWeights, 'MulWeights');
    RegisterMethod(@TNNetLayer.MulDeltas, 'MulDeltas');
    RegisterMethod(@TNNetLayer.ClearInertia, 'ClearInertia');
    RegisterMethod(@TNNetLayer.ClearTimes, 'ClearTimes');
    RegisterMethod(@TNNetLayer.AddTimes, 'AddTimes');
    RegisterMethod(@TNNetLayer.CopyTimes, 'CopyTimes');
    RegisterMethod(@TNNetLayer.MulMulAddWeights, 'MulMulAddWeights');
    RegisterMethod(@TNNetLayer.SumWeights, 'SumWeights');
    RegisterMethod(@TNNetLayer.SumDeltas, 'SumDeltas');
    RegisterMethod(@TNNetLayer.SumDeltasNoChecks, 'SumDeltasNoChecks');
    RegisterVirtualMethod(@TNNetLayer.CopyWeights, 'CopyWeights');
    RegisterMethod(@TNNetLayer.ForceRangeWeights, 'ForceRangeWeights');
    RegisterMethod(@TNNetLayer.NormalizeWeights, 'NormalizeWeights');
    RegisterVirtualMethod(@TNNetLayer.SaveDataToString, 'SaveDataToString');
    RegisterVirtualMethod(@TNNetLayer.LoadDataFromString, 'LoadDataFromString');
    RegisterVirtualMethod(@TNNetLayer.SaveStructureToString, 'SaveStructureToString');
    RegisterMethod(@TNNetLayer.SetBatchUpdate, 'SetBatchUpdate');
    RegisterMethod(@TNNetLayer.UpdateWeights, 'UpdateWeights');
    RegisterMethod(@TNNetLayer.InitBasicPatterns, 'InitBasicPatterns');
    RegisterMethod(@TNNetLayer.IncDepartingBranchesCnt, 'IncDepartingBranchesCnt');
    RegisterMethod(@TNNetLayer.ResetBackpropCallCurrCnt, 'ResetBackpropCallCurrCnt');
    RegisterMethod(@TNNetLayer.InitUniform, 'InitUniform');
    RegisterMethod(@TNNetLayer.InitLeCunUniform, 'InitLeCunUniform');
    RegisterMethod(@TNNetLayer.InitHeUniform, 'InitHeUniform');
    RegisterMethod(@TNNetLayer.InitHeUniformDepthwise, 'InitHeUniformDepthwise');
    RegisterMethod(@TNNetLayer.InitHeGaussian, 'InitHeGaussian');
    RegisterMethod(@TNNetLayer.InitHeGaussianDepthwise, 'InitHeGaussianDepthwise');
    RegisterMethod(@TNNetLayer.InitGlorotBengioUniform, 'InitGlorotBengioUniform');
    RegisterMethod(@TNNetLayer.InitSELU, 'InitSELU');
    RegisterVirtualMethod(@TNNetLayer.InitDefault, 'InitDefault');
    RegisterPropertyHelper(@TNNetLayerActivationFn_R,@TNNetLayerActivationFn_W,'ActivationFn');
    RegisterPropertyHelper(@TNNetLayerActivationFnDerivative_R,@TNNetLayerActivationFnDerivative_W,'ActivationFnDerivative');
    RegisterPropertyHelper(@TNNetLayerNeurons_R,nil,'Neurons');
    RegisterPropertyHelper(@TNNetLayerOutput_R,nil,'Output');
    RegisterPropertyHelper(@TNNetLayerOutputRaw_R,nil,'OutputRaw');
    RegisterPropertyHelper(@TNNetLayerPrevLayer_R,@TNNetLayerPrevLayer_W,'PrevLayer');
    RegisterPropertyHelper(@TNNetLayerLearningRate_R,@TNNetLayerLearningRate_W,'LearningRate');
    RegisterPropertyHelper(@TNNetLayerL2Decay_R,@TNNetLayerL2Decay_W,'L2Decay');
    RegisterPropertyHelper(@TNNetLayerInertia_R,nil,'Inertia');
    RegisterPropertyHelper(@TNNetLayerOutputError_R,@TNNetLayerOutputError_W,'OutputError');
    RegisterPropertyHelper(@TNNetLayerOutputErrorDeriv_R,@TNNetLayerOutputErrorDeriv_W,'OutputErrorDeriv');
    RegisterPropertyHelper(@TNNetLayerLayerIdx_R,nil,'LayerIdx');
    RegisterPropertyHelper(@TNNetLayerSmoothErrorPropagation_R,@TNNetLayerSmoothErrorPropagation_W,'SmoothErrorPropagation');
    RegisterPropertyHelper(@TNNetLayerBackwardTime_R,@TNNetLayerBackwardTime_W,'BackwardTime');
    RegisterPropertyHelper(@TNNetLayerForwardTime_R,@TNNetLayerForwardTime_W,'ForwardTime');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetNeuronList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetNeuronList) do
  begin
    RegisterPropertyHelper(@TNNetNeuronListItems_R,@TNNetNeuronListItems_W,'Items');
    RegisterConstructor(@TNNetNeuronList.CreateWithElements, 'CreateWithElements');
    RegisterMethod(@TNNetNeuronList.GetMaxWeight, 'GetMaxWeight');
    RegisterMethod(@TNNetNeuronList.GetMinWeight, 'GetMinWeight');
    RegisterMethod(@TNNetNeuronList.InitForDebug, 'InitForDebug');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNNetNeuron(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNNetNeuron) do
  begin
    RegisterConstructor(@TNNetNeuron.Create, 'Create');
    RegisterMethod(@TNNetNeuron.Fill, 'Fill');
    RegisterMethod(@TNNetNeuron.AddInertia, 'AddInertia');
    RegisterMethod(@TNNetNeuron.UpdateWeights, 'UpdateWeights');
    RegisterMethod(@TNNetNeuron.SaveToString, 'SaveToString');
    RegisterMethod(@TNNetNeuron.LoadFromString, 'LoadFromString');
    RegisterMethod(@TNNetNeuron.ClearDelta, 'ClearDelta');
    RegisterMethod(@TNNetNeuron.InitUniform, 'InitUniform');
    RegisterMethod(@TNNetNeuron.InitGaussian, 'InitGaussian');
    RegisterMethod(@TNNetNeuron.InitLeCunUniform, 'InitLeCunUniform');
    RegisterMethod(@TNNetNeuron.InitHeUniform, 'InitHeUniform');
    RegisterMethod(@TNNetNeuron.InitHeGaussian, 'InitHeGaussian');
    RegisterMethod(@TNNetNeuron.InitHeUniformDepthwise, 'InitHeUniformDepthwise');
    RegisterMethod(@TNNetNeuron.InitHeGaussianDepthwise, 'InitHeGaussianDepthwise');
    RegisterMethod(@TNNetNeuron.InitSELU, 'InitSELU');
    RegisterPropertyHelper(@TNNetNeuronWeights_R,nil,'Weights');
    RegisterPropertyHelper(@TNNetNeuronBackInertia_R,nil,'BackInertia');
    RegisterPropertyHelper(@TNNetNeuronDelta_R,nil,'Delta');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_neuralnetwork(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TNNetNeuron(CL);
  RIRegister_TNNetNeuronList(CL);
  RIRegister_TNNetLayer(CL);
  RIRegister_TNNetLayerConcatedWeights(CL);
  RIRegister_TNNetLayerList(CL);
  RIRegister_TNNetInputBase(CL);
  RIRegister_TNNetInput(CL);
  RIRegister_TNNetIdentity(CL);
  RIRegister_TNNetIdentityWithoutL2(CL);
  RIRegister_TNNetIdentityWithoutBackprop(CL);
  RIRegister_TNNetReLUBase(CL);
  RIRegister_TNNetReLU(CL);
  RIRegister_TNNetReLUL(CL);
  RIRegister_TNNetSELU(CL);
  RIRegister_TNNetLeakyReLU(CL);
  RIRegister_TNNetVeryLeakyReLU(CL);
  RIRegister_TNNetSigmoid(CL);
  RIRegister_TNNetHyperbolicTangent(CL);
  RIRegister_TNNetMulLearning(CL);
  RIRegister_TNNetAddAndDiv(CL);
  RIRegister_TNNetAddNoiseBase(CL);
  RIRegister_TNNetDropout(CL);
  RIRegister_TNNetRandomMulAdd(CL);
  RIRegister_TNNetChannelRandomMulAdd(CL);
  RIRegister_TNNetLayerMaxNormalization(CL);
  RIRegister_TNNetLayerStdNormalization(CL);
  RIRegister_TNNetMovingStdNormalization(CL);
  RIRegister_TNNetChannelTransformBase(CL);
  RIRegister_TNNetChannelShiftBase(CL);
  RIRegister_TNNetChannelBias(CL);
  RIRegister_TNNetChannelMul(CL);
  RIRegister_TNNetCellBias(CL);
  RIRegister_TNNetCellMul(CL);
  RIRegister_TNNetChannelZeroCenter(CL);
  RIRegister_TNNetChannelStdNormalization(CL);
  RIRegister_TNNetLocalResponseNorm2D(CL);
  RIRegister_TNNetLocalResponseNormDepth(CL);
  RIRegister_TNNetReshape(CL);
  RIRegister_TNNetConcatBase(CL);
  RIRegister_TNNetConcat(CL);
  RIRegister_TNNetDeepConcat(CL);
  RIRegister_TNNetSum(CL);
  RIRegister_TNNetSplitChannels(CL);
  RIRegister_TNNetSplitChannelEvery(CL);
  RIRegister_TNNetFullConnect(CL);
  RIRegister_TNNetFullConnectLinear(CL);
  RIRegister_TNNetFullConnectSigmoid(CL);
  RIRegister_TNNetFullConnectReLU(CL);
  RIRegister_TNNetFullConnectDiff(CL);
  RIRegister_TNNetSoftMax(CL);
  with CL.Add(TNNetLayerFullConnect) do
  with CL.Add(TNNetLayerFullConnectReLU) do
  with CL.Add(TNNetLayerSoftMax) do
  with CL.Add(TNNetDense) do
  with CL.Add(TNNetDenseReLU) do
  RIRegister_TNNetConvolutionAbstract(CL);
  RIRegister_TNNetDepthwiseConv(CL);
  RIRegister_TNNetDepthwiseConvLinear(CL);
  RIRegister_TNNetDepthwiseConvReLU(CL);
  RIRegister_TNNetConvolutionBase(CL);
  RIRegister_TNNetConvolution(CL);
  RIRegister_TNNetDeconvolution(CL);
  RIRegister_TNNetConvolutionReLU(CL);
  RIRegister_TNNetPointwiseConvReLU(CL);
  RIRegister_TNNetConvolutionLinear(CL);
  RIRegister_TNNetPointwiseConvLinear(CL);
  RIRegister_TNNetDeconvolutionReLU(CL);
  RIRegister_TNNetLocalConnect(CL);
  RIRegister_TNNetDeLocalConnect(CL);
  RIRegister_TNNetLocalConnectReLU(CL);
  RIRegister_TNNetDeLocalConnectReLU(CL);
  RIRegister_TNNetPoolBase(CL);
  RIRegister_TNNetMaxPool(CL);
  RIRegister_TNNetMaxPoolPortable(CL);
  RIRegister_TNNetMinPool(CL);
  RIRegister_TNNetMaxChannel(CL);
  RIRegister_TNNetMinChannel(CL);
  RIRegister_TNNetAvgPool(CL);
  RIRegister_TNNetAvgChannel(CL);
  RIRegister_TNNetDeMaxPool(CL);
  RIRegister_TNNetUpsample(CL);
  with CL.Add(TNNetDeAvgPool) do
  RIRegister_TNNet(CL);
  RIRegister_THistoricalNets(CL);
  RIRegister_TNNetDataParallelism(CL);
end;

 
 
{ TPSImport_neuralnetwork }
(*----------------------------------------------------------------------------*)
procedure TPSImport_neuralnetwork.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_neuralnetwork(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_neuralnetwork.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_neuralnetwork(ri);
  RIRegister_neuralnetwork_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
