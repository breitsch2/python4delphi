unit uPSI_WrapDelphi;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_WrapDelphi = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPyDelphiWrapper(CL: TPSPascalCompiler);
procedure SIRegister_TRegisteredUnits(CL: TPSPascalCompiler);
procedure SIRegister_TRegisteredUnit(CL: TPSPascalCompiler);
procedure SIRegister_TNotifyEventHandler(CL: TPSPascalCompiler);
procedure SIRegister_TEventHandlers(CL: TPSPascalCompiler);
procedure SIRegister_TEventHandler(CL: TPSPascalCompiler);
procedure SIRegister_TPyPascalInterface(CL: TPSPascalCompiler);
procedure SIRegister_TPyPascalRecord(CL: TPSPascalCompiler);
procedure SIRegister_TPyRttiObject(CL: TPSPascalCompiler);
procedure SIRegister_TPyDelphiVarParameter(CL: TPSPascalCompiler);
procedure SIRegister_TPyDelphiObject(CL: TPSPascalCompiler);
procedure SIRegister_TPyInterfacedObject(CL: TPSPascalCompiler);
procedure SIRegister_TPyDelphiIterator(CL: TPSPascalCompiler);
procedure SIRegister_TPyDelphiContainer(CL: TPSPascalCompiler);
procedure SIRegister_TContainerAccess(CL: TPSPascalCompiler);
procedure SIRegister_TFreeNotificationImpl(CL: TPSPascalCompiler);
procedure SIRegister_IFreeNotification(CL: TPSPascalCompiler);
procedure SIRegister_IFreeNotificationSubscriber(CL: TPSPascalCompiler);
procedure SIRegister_WrapDelphi(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_WrapDelphi_Routines(S: TPSExec);
procedure RIRegister_TPyDelphiWrapper(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRegisteredUnits(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRegisteredUnit(CL: TPSRuntimeClassImporter);
procedure RIRegister_TNotifyEventHandler(CL: TPSRuntimeClassImporter);
procedure RIRegister_TEventHandlers(CL: TPSRuntimeClassImporter);
procedure RIRegister_TEventHandler(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyPascalInterface(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyPascalRecord(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyRttiObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyDelphiVarParameter(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyDelphiObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyInterfacedObject(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyDelphiIterator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyDelphiContainer(CL: TPSRuntimeClassImporter);
procedure RIRegister_TContainerAccess(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFreeNotificationImpl(CL: TPSRuntimeClassImporter);
procedure RIRegister_WrapDelphi(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   PythonEngine
  ,TypInfo
  ,Types
  ,Variants
  ,Rtti
  ,ObjAuto
  ,Contnrs
  ,WrapDelphi
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_WrapDelphi]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyDelphiWrapper(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEngineClient', 'TPyDelphiWrapper') do
  with CL.AddClassN(CL.FindClass('TEngineClient'),'TPyDelphiWrapper') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Initialize');
    RegisterMethod('Procedure Finalize');
    RegisterMethod('Procedure DefineVar2( const AName : string; const AValue : Variant);');
    RegisterMethod('Procedure DefineVar3( const AName : string; AValue : TObject);');
    RegisterMethod('Procedure RegisterDelphiWrapper( AWrapperClass : TPyDelphiObjectClass)');
    RegisterMethod('Function RegisterHelperType( APyObjectClass : TPyObjectClass) : TPythonType');
    RegisterMethod('Function RegisterFunction4( AFuncName : PAnsiChar; AFunc : PyCFunction; ADocString : PAnsiChar) : PPyMethodDef;');
    RegisterMethod('Function RegisterFunction5( AFuncName : PAnsiChar; AFunc : TDelphiMethod; ADocString : PAnsiChar) : PPyMethodDef;');
    RegisterMethod('Function GetHelperType( const TypeName : string) : TPythonType');
    RegisterMethod('Function Wrap( AObj : TObject; AOwnership : TObjectOwnership) : PPyObject');
    RegisterMethod('Function WrapRecord( Address : Pointer; Typ : TRttiStructuredType) : PPyObject');
    RegisterMethod('Function WrapInterface( const IValue : TValue) : PPyObject');
    RegisterProperty('EventHandlers', 'TEventHandlers', iptr);
    RegisterProperty('DefaultContainerType', 'TPythonType', iptr);
    RegisterProperty('DefaultIterType', 'TPythonType', iptr);
    RegisterProperty('DelphiMethodType', 'TPythonType', iptr);
    RegisterProperty('VarParamType', 'TPythonType', iptr);
    RegisterProperty('Module', 'TPythonModule', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRegisteredUnits(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TRegisteredUnits') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TRegisteredUnits') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Add( ARegisteredModule : TRegisteredUnit)');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Items', 'TRegisteredUnit Integer', iptr);
    SetDefaultPropery('Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRegisteredUnit(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TRegisteredUnit') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TRegisteredUnit') do
  begin
    RegisterMethod('Function Name : string');
    RegisterMethod('Procedure RegisterWrappers( APyDelphiWrapper : TPyDelphiWrapper)');
    RegisterMethod('Procedure DefineVars( APyDelphiWrapper : TPyDelphiWrapper)');
    RegisterMethod('Procedure DefineFunctions( APyDelphiWrapper : TPyDelphiWrapper)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TNotifyEventHandler(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TEventHandler', 'TNotifyEventHandler') do
  with CL.AddClassN(CL.FindClass('TEventHandler'),'TNotifyEventHandler') do
  begin
    RegisterMethod('Constructor Create( PyDelphiWrapper : TPyDelphiWrapper; Component : TObject; PropertyInfo : PPropInfo; Callable : PPyObject)');
    RegisterMethod('Function GetTypeInfo : PTypeInfo');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TEventHandlers(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TEventHandlers') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TEventHandlers') do
  begin
    RegisterMethod('Constructor Create( APyDelphiWrapper : TPyDelphiWrapper)');
    RegisterMethod('Function Add( AEventHandler : TEventHandler) : Boolean');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Procedure Delete( AIndex : Integer)');
    RegisterMethod('Function GetCallable0( AComponent : TObject; APropInfo : PPropInfo) : PPyObject;');
    RegisterMethod('Function GetCallable1( AComponent : TObject; const APropName : string) : PPyObject;');
    RegisterMethod('Function Link( AComponent : TObject; APropInfo : PPropInfo; ACallable : PPyObject; out ErrMsg : string) : Boolean');
    RegisterMethod('Function IndexOf( AComponent : TObject; APropInfo : PPropInfo) : Integer');
    RegisterMethod('Procedure RegisterHandler( AEventHandlerClass : TEventHandlerClass)');
    RegisterMethod('Function Unlink( AComponent : TObject; APropInfo : PPropInfo) : Boolean');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Items', 'TEventHandler Integer', iptr);
    SetDefaultPropery('Items');
    RegisterProperty('PyDelphiWrapper', 'TPyDelphiWrapper', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TEventHandler(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TEventHandler') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TEventHandler') do
  begin
    RegisterProperty('PyDelphiWrapper', 'TPyDelphiWrapper', iptrw);
    RegisterProperty('PropertyInfo', 'PPropInfo', iptrw);
    RegisterProperty('EventType', 'PTypeInfo', iptrw);
    RegisterProperty('Callable', 'PPyObject', iptrw);
    RegisterMethod('Constructor Create( PyDelphiWrapper : TPyDelphiWrapper; Component : TObject; PropertyInfo : PPropInfo; Callable : PPyObject)');
    RegisterMethod('Procedure Unsubscribe');
    RegisterMethod('Function GetTypeInfo : PTypeInfo');
    RegisterProperty('Component', 'TObject', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyPascalInterface(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyRttiObject', 'TPyPascalInterface') do
  with CL.AddClassN(CL.FindClass('TPyRttiObject'),'TPyPascalInterface') do
  begin
    RegisterMethod('Procedure SetupType( PythonType : TPythonType)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyPascalRecord(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyRttiObject', 'TPyPascalRecord') do
  with CL.AddClassN(CL.FindClass('TPyRttiObject'),'TPyPascalRecord') do
  begin
    RegisterMethod('Procedure SetupType( PythonType : TPythonType)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyRttiObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyObject', 'TPyRttiObject') do
  with CL.AddClassN(CL.FindClass('TPyObject'),'TPyRttiObject') do
  begin
    RegisterProperty('PyDelphiWrapper', 'TPyDelphiWrapper', iptrw);
    RegisterMethod('Constructor Create( APythonType : TPythonType)');
    RegisterMethod('Procedure SetAddrAndType( Address : Pointer; Typ : TRttiStructuredType)');
    RegisterMethod('Function GetAttrO( key : PPyObject) : PPyObject');
    RegisterMethod('Function SetAttrO( key, value : PPyObject) : Integer');
    RegisterMethod('Function Repr : PPyObject');
    RegisterProperty('Addr', 'Pointer', iptr);
    RegisterProperty('RttiType', 'TRttiStructuredType', iptr);
    RegisterProperty('Value', 'TValue', iptr);
    RegisterMethod('Procedure RegisterMethods( PythonType : TPythonType)');
    RegisterMethod('Procedure SetupType( PythonType : TPythonType)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyDelphiVarParameter(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyObject', 'TPyDelphiVarParameter') do
  with CL.AddClassN(CL.FindClass('TPyObject'),'TPyDelphiVarParameter') do
  begin
    RegisterMethod('Function RichCompare( obj : PPyObject; Op : TRichComparisonOpcode) : PPyObject');
    RegisterMethod('Function Repr : PPyObject');
    RegisterMethod('Procedure RegisterGetSets( PythonType : TPythonType)');
    RegisterMethod('Procedure SetupType( PythonType : TPythonType)');
    RegisterProperty('Value', 'PPyObject', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyDelphiObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyInterfacedObject', 'TPyDelphiObject') do
  with CL.AddClassN(CL.FindClass('TPyInterfacedObject'),'TPyDelphiObject') do
  begin
    RegisterProperty('PyDelphiWrapper', 'TPyDelphiWrapper', iptrw);
    RegisterProperty('Owned', 'Boolean', iptrw);
    RegisterMethod('Constructor Create( APythonType : TPythonType)');
    RegisterMethod('Function GetAttrO( key : PPyObject) : PPyObject');
    RegisterMethod('Function SetAttrO( key, value : PPyObject) : Integer');
    RegisterMethod('Function Compare( obj : PPyObject) : Integer');
    RegisterMethod('Function Repr : PPyObject');
    RegisterMethod('Function Iter : PPyObject');
    RegisterMethod('Function SqLength : NativeInt');
    RegisterMethod('Function SqItem( idx : NativeInt) : PPyObject');
    RegisterMethod('Function SqContains( obj : PPyObject) : integer');
    RegisterMethod('Function SqAssItem( idx : NativeInt; obj : PPyObject) : Integer');
    RegisterMethod('Function DelphiObjectClass : TClass');
    RegisterMethod('Function GetContainerAccessClass : TContainerAccessClass');
    RegisterMethod('Function CreateContainerAccess : TContainerAccess');
    RegisterMethod('Function Wrap( AObject : TObject; AOwnership : TObjectOwnership) : PPyObject');
    RegisterProperty('DelphiObject', 'TObject', iptrw);
    RegisterProperty('ContainerAccess', 'TContainerAccess', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyInterfacedObject(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyObject', 'TPyInterfacedObject') do
  with CL.AddClassN(CL.FindClass('TPyObject'),'TPyInterfacedObject') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyDelphiIterator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyObject', 'TPyDelphiIterator') do
  with CL.AddClassN(CL.FindClass('TPyObject'),'TPyDelphiIterator') do
  begin
    RegisterMethod('Procedure Setup( AContainerAccess : TContainerAccess)');
    RegisterMethod('Procedure SetupType( PythonType : TPythonType)');
    RegisterMethod('Function Repr : PPyObject');
    RegisterMethod('Function Iter : PPyObject');
    RegisterMethod('Function IterNext : PPyObject');
    RegisterProperty('Position', 'Integer', iptr);
    RegisterProperty('ContainerAccess', 'TContainerAccess', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyDelphiContainer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyObject', 'TPyDelphiContainer') do
  with CL.AddClassN(CL.FindClass('TPyObject'),'TPyDelphiContainer') do
  begin
    RegisterMethod('Procedure Setup( APyDelphiWrapper : TPyDelphiWrapper; AContainerAccess : TContainerAccess)');
    RegisterMethod('Function Repr : PPyObject');
    RegisterMethod('Function Iter : PPyObject');
    RegisterMethod('Function SqLength : NativeInt');
    RegisterMethod('Function SqItem( idx : NativeInt) : PPyObject');
    RegisterMethod('Function SqAssItem( idx : NativeInt; obj : PPyObject) : Integer');
    RegisterMethod('Function SqContains( obj : PPyObject) : integer');
    RegisterProperty('ContainerAccess', 'TContainerAccess', iptr);
    RegisterProperty('PyDelphiWrapper', 'TPyDelphiWrapper', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TContainerAccess(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TContainerAccess') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TContainerAccess') do
  begin
    RegisterMethod('Constructor Create( AWrapper : TPyDelphiWrapper; AContainer : TObject)');
    RegisterMethod('Function Clone : TContainerAccess');
    RegisterMethod('Function GetItem( AIndex : Integer) : PPyObject');
    RegisterMethod('Function GetSize : Integer');
    RegisterMethod('Function IndexOf( AValue : PPyObject) : Integer');
    RegisterMethod('Function SetItem( AIndex : Integer; AValue : PPyObject) : Boolean');
    RegisterMethod('Function ExpectedContainerClass : TClass');
    RegisterMethod('Function Name : string');
    RegisterMethod('Function SupportsWrite : Boolean');
    RegisterMethod('Function SupportsIndexOf : Boolean');
    RegisterProperty('Container', 'TObject', iptr);
    RegisterProperty('Wrapper', 'TPyDelphiWrapper', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFreeNotificationImpl(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TInterfacedObject', 'TFreeNotificationImpl') do
  with CL.AddClassN(CL.FindClass('TInterfacedObject'),'TFreeNotificationImpl') do
  begin
    RegisterMethod('Constructor Create( AOwner : TObject)');
    RegisterProperty('Owner', 'TObject', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IFreeNotification(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IFreeNotification') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IFreeNotification, 'IFreeNotification') do
  begin
    RegisterMethod('Procedure Subscribe( const ASubscriber : IFreeNotificationSubscriber)', cdRegister);
    RegisterMethod('Procedure UnSubscribe( const ASubscriber : IFreeNotificationSubscriber)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_IFreeNotificationSubscriber(CL: TPSPascalCompiler);
begin
  //with RegInterfaceS(CL,'IUNKNOWN', 'IFreeNotificationSubscriber') do
  with CL.AddInterface(CL.FindInterface('IUNKNOWN'),IFreeNotificationSubscriber, 'IFreeNotificationSubscriber') do
  begin
    RegisterMethod('Procedure Notify( ADeletedObject : TObject)', cdRegister);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_WrapDelphi(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TObjectOwnership', '( soReference, soOwned )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TPyDelphiWrapper');
  SIRegister_IFreeNotificationSubscriber(CL);
  SIRegister_IFreeNotification(CL);
  SIRegister_TFreeNotificationImpl(CL);
  SIRegister_TContainerAccess(CL);
  //CL.AddTypeS('TContainerAccessClass', 'class of TContainerAccess');
  SIRegister_TPyDelphiContainer(CL);
  SIRegister_TPyDelphiIterator(CL);
  SIRegister_TPyInterfacedObject(CL);
  SIRegister_TPyDelphiObject(CL);
  //CL.AddTypeS('TPyDelphiObjectClass', 'class of TPyDelphiObject');
  SIRegister_TPyDelphiVarParameter(CL);
  SIRegister_TPyRttiObject(CL);
  SIRegister_TPyPascalRecord(CL);
  SIRegister_TPyPascalInterface(CL);
  SIRegister_TEventHandler(CL);
  //CL.AddTypeS('TEventHandlerClass', 'class of TEventHandler');
  SIRegister_TEventHandlers(CL);
  SIRegister_TNotifyEventHandler(CL);
  SIRegister_TRegisteredUnit(CL);
  SIRegister_TRegisteredUnits(CL);
  SIRegister_TPyDelphiWrapper(CL);
 CL.AddDelphiFunction('Function RegisteredUnits : TRegisteredUnits');
 CL.AddDelphiFunction('Function CheckIndex( AIndex, ACount : Integer; const AIndexName : string) : Boolean');
 CL.AddDelphiFunction('Function CheckIntAttribute( AAttribute : PPyObject; const AAttributeName : string; out AValue : Integer) : Boolean');
 CL.AddDelphiFunction('Function CheckFloatAttribute( AAttribute : PPyObject; const AAttributeName : string; out AValue : Double) : Boolean');
 CL.AddDelphiFunction('Function CheckBoolAttribute( AAttribute : PPyObject; const AAttributeName : string; out AValue : Boolean) : Boolean');
 CL.AddDelphiFunction('Function CheckStrAttribute( AAttribute : PPyObject; const AAttributeName : string; out AValue : string) : Boolean');
 CL.AddDelphiFunction('Function CheckObjAttribute( AAttribute : PPyObject; const AAttributeName : string; AExpectedClass : TClass; out AValue : TObject) : Boolean');
 CL.AddDelphiFunction('Function CheckCallableAttribute( AAttribute : PPyObject; const AAttributeName : string) : Boolean');
 CL.AddDelphiFunction('Function CheckEnum( const AEnumName : string; AValue, AMinValue, AMaxValue : Integer) : Boolean');
 CL.AddDelphiFunction('Function CreateVarParam( PyDelphiWrapper : TPyDelphiWrapper; const AValue : Variant) : PPyObject');
 CL.AddDelphiFunction('Function SetToPython6( ATypeInfo : PTypeInfo; AValue : Integer) : PPyObject;');
 CL.AddDelphiFunction('Function SetToPython7( APropInfo : PPropInfo; AValue : Integer) : PPyObject;');
 CL.AddDelphiFunction('Function SetToPython8( AInstance : TObject; APropInfo : PPropInfo) : PPyObject;');
 CL.AddDelphiFunction('Function PythonToSet9( APropInfo : PPropInfo; ASet : PPyObject) : Integer;');
 CL.AddDelphiFunction('Function PythonToSet10( ATypeInfo : PTypeInfo; ASet : PPyObject) : Integer;');
 CL.AddDelphiFunction('Function SupportsFreeNotification( AObject : TObject) : Boolean');
 CL.AddDelphiFunction('Procedure RaiseNotifyEvent( PyDelphiWrapper : TPyDelphiWrapper; ACallable : PPyObject; Sender : TObject)');
 CL.AddDelphiFunction('Function SetProperties( PyObject : PPyObject; keywords : PPyObject) : PPyObject');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function PythonToSet10_P( ATypeInfo : PTypeInfo; ASet : PPyObject) : Integer;
Begin Result := WrapDelphi.PythonToSet(ATypeInfo, ASet); END;

(*----------------------------------------------------------------------------*)
Function PythonToSet9_P( APropInfo : PPropInfo; ASet : PPyObject) : Integer;
Begin Result := WrapDelphi.PythonToSet(APropInfo, ASet); END;

(*----------------------------------------------------------------------------*)
Function SetToPython8_P( AInstance : TObject; APropInfo : PPropInfo) : PPyObject;
Begin Result := WrapDelphi.SetToPython(AInstance, APropInfo); END;

(*----------------------------------------------------------------------------*)
Function SetToPython7_P( APropInfo : PPropInfo; AValue : Integer) : PPyObject;
Begin Result := WrapDelphi.SetToPython(APropInfo, AValue); END;

(*----------------------------------------------------------------------------*)
Function SetToPython6_P( ATypeInfo : PTypeInfo; AValue : Integer) : PPyObject;
Begin Result := WrapDelphi.SetToPython(ATypeInfo, AValue); END;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperModule_W(Self: TPyDelphiWrapper; const T: TPythonModule);
begin Self.Module := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperModule_R(Self: TPyDelphiWrapper; var T: TPythonModule);
begin T := Self.Module; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperVarParamType_R(Self: TPyDelphiWrapper; var T: TPythonType);
begin T := Self.VarParamType; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperDelphiMethodType_R(Self: TPyDelphiWrapper; var T: TPythonType);
begin T := Self.DelphiMethodType; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperDefaultIterType_R(Self: TPyDelphiWrapper; var T: TPythonType);
begin T := Self.DefaultIterType; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperDefaultContainerType_R(Self: TPyDelphiWrapper; var T: TPythonType);
begin T := Self.DefaultContainerType; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiWrapperEventHandlers_R(Self: TPyDelphiWrapper; var T: TEventHandlers);
begin T := Self.EventHandlers; end;

(*----------------------------------------------------------------------------*)
Function TPyDelphiWrapperRegisterFunction5_P(Self: TPyDelphiWrapper;  AFuncName : PAnsiChar; AFunc : TDelphiMethod; ADocString : PAnsiChar) : PPyMethodDef;
Begin Result := Self.RegisterFunction(AFuncName, AFunc, ADocString); END;

(*----------------------------------------------------------------------------*)
Function TPyDelphiWrapperRegisterFunction4_P(Self: TPyDelphiWrapper;  AFuncName : PAnsiChar; AFunc : PyCFunction; ADocString : PAnsiChar) : PPyMethodDef;
Begin Result := Self.RegisterFunction(AFuncName, AFunc, ADocString); END;

(*----------------------------------------------------------------------------*)
Procedure TPyDelphiWrapperDefineVar3_P(Self: TPyDelphiWrapper;  const AName : string; AValue : TObject);
Begin Self.DefineVar(AName, AValue); END;

(*----------------------------------------------------------------------------*)
Procedure TPyDelphiWrapperDefineVar2_P(Self: TPyDelphiWrapper;  const AName : string; const AValue : Variant);
Begin Self.DefineVar(AName, AValue); END;

(*----------------------------------------------------------------------------*)
procedure TRegisteredUnitsItems_R(Self: TRegisteredUnits; var T: TRegisteredUnit; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TRegisteredUnitsCount_R(Self: TRegisteredUnits; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlersPyDelphiWrapper_R(Self: TEventHandlers; var T: TPyDelphiWrapper);
begin T := Self.PyDelphiWrapper; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlersItems_R(Self: TEventHandlers; var T: TEventHandler; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlersCount_R(Self: TEventHandlers; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
Function TEventHandlersGetCallable1_P(Self: TEventHandlers;  AComponent : TObject; const APropName : string) : PPyObject;
Begin Result := Self.GetCallable(AComponent, APropName); END;

(*----------------------------------------------------------------------------*)
Function TEventHandlersGetCallable0_P(Self: TEventHandlers;  AComponent : TObject; APropInfo : PPropInfo) : PPyObject;
Begin Result := Self.GetCallable(AComponent, APropInfo); END;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerComponent_R(Self: TEventHandler; var T: TObject);
begin T := Self.Component; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerCallable_W(Self: TEventHandler; const T: PPyObject);
Begin Self.Callable := T; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerCallable_R(Self: TEventHandler; var T: PPyObject);
Begin T := Self.Callable; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerEventType_W(Self: TEventHandler; const T: PTypeInfo);
Begin Self.EventType := T; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerEventType_R(Self: TEventHandler; var T: PTypeInfo);
Begin T := Self.EventType; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerPropertyInfo_W(Self: TEventHandler; const T: PPropInfo);
Begin Self.PropertyInfo := T; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerPropertyInfo_R(Self: TEventHandler; var T: PPropInfo);
Begin T := Self.PropertyInfo; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerPyDelphiWrapper_W(Self: TEventHandler; const T: TPyDelphiWrapper);
Begin Self.PyDelphiWrapper := T; end;

(*----------------------------------------------------------------------------*)
procedure TEventHandlerPyDelphiWrapper_R(Self: TEventHandler; var T: TPyDelphiWrapper);
Begin T := Self.PyDelphiWrapper; end;

(*----------------------------------------------------------------------------*)
procedure TPyRttiObjectValue_R(Self: TPyRttiObject; var T: TValue);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TPyRttiObjectRttiType_R(Self: TPyRttiObject; var T: TRttiStructuredType);
begin T := Self.RttiType; end;

(*----------------------------------------------------------------------------*)
procedure TPyRttiObjectAddr_R(Self: TPyRttiObject; var T: Pointer);
begin T := Self.Addr; end;

(*----------------------------------------------------------------------------*)
procedure TPyRttiObjectPyDelphiWrapper_W(Self: TPyRttiObject; const T: TPyDelphiWrapper);
Begin Self.PyDelphiWrapper := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyRttiObjectPyDelphiWrapper_R(Self: TPyRttiObject; var T: TPyDelphiWrapper);
Begin T := Self.PyDelphiWrapper; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiVarParameterValue_W(Self: TPyDelphiVarParameter; const T: PPyObject);
begin Self.Value := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiVarParameterValue_R(Self: TPyDelphiVarParameter; var T: PPyObject);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectContainerAccess_R(Self: TPyDelphiObject; var T: TContainerAccess);
begin T := Self.ContainerAccess; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectDelphiObject_W(Self: TPyDelphiObject; const T: TObject);
begin Self.DelphiObject := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectDelphiObject_R(Self: TPyDelphiObject; var T: TObject);
begin T := Self.DelphiObject; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectOwned_W(Self: TPyDelphiObject; const T: Boolean);
Begin Self.Owned := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectOwned_R(Self: TPyDelphiObject; var T: Boolean);
Begin T := Self.Owned; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectPyDelphiWrapper_W(Self: TPyDelphiObject; const T: TPyDelphiWrapper);
Begin Self.PyDelphiWrapper := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiObjectPyDelphiWrapper_R(Self: TPyDelphiObject; var T: TPyDelphiWrapper);
Begin T := Self.PyDelphiWrapper; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiIteratorContainerAccess_R(Self: TPyDelphiIterator; var T: TContainerAccess);
begin T := Self.ContainerAccess; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiIteratorPosition_R(Self: TPyDelphiIterator; var T: Integer);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiContainerPyDelphiWrapper_R(Self: TPyDelphiContainer; var T: TPyDelphiWrapper);
begin T := Self.PyDelphiWrapper; end;

(*----------------------------------------------------------------------------*)
procedure TPyDelphiContainerContainerAccess_R(Self: TPyDelphiContainer; var T: TContainerAccess);
begin T := Self.ContainerAccess; end;

(*----------------------------------------------------------------------------*)
procedure TContainerAccessWrapper_R(Self: TContainerAccess; var T: TPyDelphiWrapper);
begin T := Self.Wrapper; end;

(*----------------------------------------------------------------------------*)
procedure TContainerAccessContainer_R(Self: TContainerAccess; var T: TObject);
begin T := Self.Container; end;

(*----------------------------------------------------------------------------*)
procedure TFreeNotificationImplOwner_R(Self: TFreeNotificationImpl; var T: TObject);
begin T := Self.Owner; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_WrapDelphi_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@RegisteredUnits, 'RegisteredUnits', cdRegister);
 S.RegisterDelphiFunction(@CheckIndex, 'CheckIndex', cdRegister);
 S.RegisterDelphiFunction(@CheckIntAttribute, 'CheckIntAttribute', cdRegister);
 S.RegisterDelphiFunction(@CheckFloatAttribute, 'CheckFloatAttribute', cdRegister);
 S.RegisterDelphiFunction(@CheckBoolAttribute, 'CheckBoolAttribute', cdRegister);
 S.RegisterDelphiFunction(@CheckStrAttribute, 'CheckStrAttribute', cdRegister);
 S.RegisterDelphiFunction(@CheckObjAttribute, 'CheckObjAttribute', cdRegister);
 S.RegisterDelphiFunction(@CheckCallableAttribute, 'CheckCallableAttribute', cdRegister);
 S.RegisterDelphiFunction(@CheckEnum, 'CheckEnum', cdRegister);
 S.RegisterDelphiFunction(@CreateVarParam, 'CreateVarParam', cdRegister);
 S.RegisterDelphiFunction(@SetToPython6, 'SetToPython6', cdRegister);
 S.RegisterDelphiFunction(@SetToPython7, 'SetToPython7', cdRegister);
 S.RegisterDelphiFunction(@SetToPython8, 'SetToPython8', cdRegister);
 S.RegisterDelphiFunction(@PythonToSet9, 'PythonToSet9', cdRegister);
 S.RegisterDelphiFunction(@PythonToSet10, 'PythonToSet10', cdRegister);
 S.RegisterDelphiFunction(@SupportsFreeNotification, 'SupportsFreeNotification', cdRegister);
 S.RegisterDelphiFunction(@RaiseNotifyEvent, 'RaiseNotifyEvent', cdRegister);
 S.RegisterDelphiFunction(@SetProperties, 'SetProperties', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyDelphiWrapper(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyDelphiWrapper) do
  begin
    RegisterConstructor(@TPyDelphiWrapper.Create, 'Create');
    RegisterMethod(@TPyDelphiWrapper.Initialize, 'Initialize');
    RegisterMethod(@TPyDelphiWrapper.Finalize, 'Finalize');
    RegisterMethod(@TPyDelphiWrapperDefineVar2_P, 'DefineVar2');
    RegisterMethod(@TPyDelphiWrapperDefineVar3_P, 'DefineVar3');
    RegisterMethod(@TPyDelphiWrapper.RegisterDelphiWrapper, 'RegisterDelphiWrapper');
    RegisterMethod(@TPyDelphiWrapper.RegisterHelperType, 'RegisterHelperType');
    RegisterMethod(@TPyDelphiWrapperRegisterFunction4_P, 'RegisterFunction4');
    RegisterMethod(@TPyDelphiWrapperRegisterFunction5_P, 'RegisterFunction5');
    RegisterMethod(@TPyDelphiWrapper.GetHelperType, 'GetHelperType');
    RegisterMethod(@TPyDelphiWrapper.Wrap, 'Wrap');
    RegisterMethod(@TPyDelphiWrapper.WrapRecord, 'WrapRecord');
    RegisterMethod(@TPyDelphiWrapper.WrapInterface, 'WrapInterface');
    RegisterPropertyHelper(@TPyDelphiWrapperEventHandlers_R,nil,'EventHandlers');
    RegisterPropertyHelper(@TPyDelphiWrapperDefaultContainerType_R,nil,'DefaultContainerType');
    RegisterPropertyHelper(@TPyDelphiWrapperDefaultIterType_R,nil,'DefaultIterType');
    RegisterPropertyHelper(@TPyDelphiWrapperDelphiMethodType_R,nil,'DelphiMethodType');
    RegisterPropertyHelper(@TPyDelphiWrapperVarParamType_R,nil,'VarParamType');
    RegisterPropertyHelper(@TPyDelphiWrapperModule_R,@TPyDelphiWrapperModule_W,'Module');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRegisteredUnits(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRegisteredUnits) do
  begin
    RegisterConstructor(@TRegisteredUnits.Create, 'Create');
    RegisterMethod(@TRegisteredUnits.Add, 'Add');
    RegisterPropertyHelper(@TRegisteredUnitsCount_R,nil,'Count');
    RegisterPropertyHelper(@TRegisteredUnitsItems_R,nil,'Items');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRegisteredUnit(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRegisteredUnit) do
  begin
    RegisterVirtualAbstractMethod(@TRegisteredUnit, @!.Name, 'Name');
    RegisterVirtualMethod(@TRegisteredUnit.RegisterWrappers, 'RegisterWrappers');
    RegisterVirtualMethod(@TRegisteredUnit.DefineVars, 'DefineVars');
    RegisterVirtualMethod(@TRegisteredUnit.DefineFunctions, 'DefineFunctions');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TNotifyEventHandler(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TNotifyEventHandler) do
  begin
    RegisterConstructor(@TNotifyEventHandler.Create, 'Create');
    RegisterMethod(@TNotifyEventHandler.GetTypeInfo, 'GetTypeInfo');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEventHandlers(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEventHandlers) do
  begin
    RegisterConstructor(@TEventHandlers.Create, 'Create');
    RegisterMethod(@TEventHandlers.Add, 'Add');
    RegisterMethod(@TEventHandlers.Clear, 'Clear');
    RegisterMethod(@TEventHandlers.Delete, 'Delete');
    RegisterMethod(@TEventHandlersGetCallable0_P, 'GetCallable0');
    RegisterMethod(@TEventHandlersGetCallable1_P, 'GetCallable1');
    RegisterMethod(@TEventHandlers.Link, 'Link');
    RegisterMethod(@TEventHandlers.IndexOf, 'IndexOf');
    RegisterMethod(@TEventHandlers.RegisterHandler, 'RegisterHandler');
    RegisterMethod(@TEventHandlers.Unlink, 'Unlink');
    RegisterPropertyHelper(@TEventHandlersCount_R,nil,'Count');
    RegisterPropertyHelper(@TEventHandlersItems_R,nil,'Items');
    RegisterPropertyHelper(@TEventHandlersPyDelphiWrapper_R,nil,'PyDelphiWrapper');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEventHandler(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEventHandler) do
  begin
    RegisterPropertyHelper(@TEventHandlerPyDelphiWrapper_R,@TEventHandlerPyDelphiWrapper_W,'PyDelphiWrapper');
    RegisterPropertyHelper(@TEventHandlerPropertyInfo_R,@TEventHandlerPropertyInfo_W,'PropertyInfo');
    RegisterPropertyHelper(@TEventHandlerEventType_R,@TEventHandlerEventType_W,'EventType');
    RegisterPropertyHelper(@TEventHandlerCallable_R,@TEventHandlerCallable_W,'Callable');
    RegisterVirtualConstructor(@TEventHandler.Create, 'Create');
    RegisterMethod(@TEventHandler.Unsubscribe, 'Unsubscribe');
    RegisterVirtualAbstractMethod(@TEventHandler, @!.GetTypeInfo, 'GetTypeInfo');
    RegisterPropertyHelper(@TEventHandlerComponent_R,nil,'Component');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyPascalInterface(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyPascalInterface) do
  begin
    RegisterMethod(@TPyPascalInterface.SetupType, 'SetupType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyPascalRecord(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyPascalRecord) do
  begin
    RegisterMethod(@TPyPascalRecord.SetupType, 'SetupType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyRttiObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyRttiObject) do
  begin
    RegisterPropertyHelper(@TPyRttiObjectPyDelphiWrapper_R,@TPyRttiObjectPyDelphiWrapper_W,'PyDelphiWrapper');
    RegisterConstructor(@TPyRttiObject.Create, 'Create');
    RegisterMethod(@TPyRttiObject.SetAddrAndType, 'SetAddrAndType');
    RegisterMethod(@TPyRttiObject.GetAttrO, 'GetAttrO');
    RegisterMethod(@TPyRttiObject.SetAttrO, 'SetAttrO');
    RegisterMethod(@TPyRttiObject.Repr, 'Repr');
    RegisterPropertyHelper(@TPyRttiObjectAddr_R,nil,'Addr');
    RegisterPropertyHelper(@TPyRttiObjectRttiType_R,nil,'RttiType');
    RegisterPropertyHelper(@TPyRttiObjectValue_R,nil,'Value');
    RegisterMethod(@TPyRttiObject.RegisterMethods, 'RegisterMethods');
    RegisterMethod(@TPyRttiObject.SetupType, 'SetupType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyDelphiVarParameter(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyDelphiVarParameter) do
  begin
    RegisterMethod(@TPyDelphiVarParameter.RichCompare, 'RichCompare');
    RegisterMethod(@TPyDelphiVarParameter.Repr, 'Repr');
    RegisterMethod(@TPyDelphiVarParameter.RegisterGetSets, 'RegisterGetSets');
    RegisterMethod(@TPyDelphiVarParameter.SetupType, 'SetupType');
    RegisterPropertyHelper(@TPyDelphiVarParameterValue_R,@TPyDelphiVarParameterValue_W,'Value');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyDelphiObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyDelphiObject) do
  begin
    RegisterPropertyHelper(@TPyDelphiObjectPyDelphiWrapper_R,@TPyDelphiObjectPyDelphiWrapper_W,'PyDelphiWrapper');
    RegisterPropertyHelper(@TPyDelphiObjectOwned_R,@TPyDelphiObjectOwned_W,'Owned');
    RegisterConstructor(@TPyDelphiObject.Create, 'Create');
    RegisterMethod(@TPyDelphiObject.GetAttrO, 'GetAttrO');
    RegisterMethod(@TPyDelphiObject.SetAttrO, 'SetAttrO');
    RegisterMethod(@TPyDelphiObject.Compare, 'Compare');
    RegisterMethod(@TPyDelphiObject.Repr, 'Repr');
    RegisterMethod(@TPyDelphiObject.Iter, 'Iter');
    RegisterMethod(@TPyDelphiObject.SqLength, 'SqLength');
    RegisterMethod(@TPyDelphiObject.SqItem, 'SqItem');
    RegisterMethod(@TPyDelphiObject.SqContains, 'SqContains');
    RegisterMethod(@TPyDelphiObject.SqAssItem, 'SqAssItem');
    RegisterVirtualMethod(@TPyDelphiObject.DelphiObjectClass, 'DelphiObjectClass');
    RegisterVirtualMethod(@TPyDelphiObject.GetContainerAccessClass, 'GetContainerAccessClass');
    RegisterVirtualMethod(@TPyDelphiObject.CreateContainerAccess, 'CreateContainerAccess');
    RegisterMethod(@TPyDelphiObject.Wrap, 'Wrap');
    RegisterPropertyHelper(@TPyDelphiObjectDelphiObject_R,@TPyDelphiObjectDelphiObject_W,'DelphiObject');
    RegisterPropertyHelper(@TPyDelphiObjectContainerAccess_R,nil,'ContainerAccess');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyInterfacedObject(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyInterfacedObject) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyDelphiIterator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyDelphiIterator) do
  begin
    RegisterMethod(@TPyDelphiIterator.Setup, 'Setup');
    RegisterMethod(@TPyDelphiIterator.SetupType, 'SetupType');
    RegisterMethod(@TPyDelphiIterator.Repr, 'Repr');
    RegisterMethod(@TPyDelphiIterator.Iter, 'Iter');
    RegisterMethod(@TPyDelphiIterator.IterNext, 'IterNext');
    RegisterPropertyHelper(@TPyDelphiIteratorPosition_R,nil,'Position');
    RegisterPropertyHelper(@TPyDelphiIteratorContainerAccess_R,nil,'ContainerAccess');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyDelphiContainer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyDelphiContainer) do
  begin
    RegisterMethod(@TPyDelphiContainer.Setup, 'Setup');
    RegisterMethod(@TPyDelphiContainer.Repr, 'Repr');
    RegisterMethod(@TPyDelphiContainer.Iter, 'Iter');
    RegisterMethod(@TPyDelphiContainer.SqLength, 'SqLength');
    RegisterMethod(@TPyDelphiContainer.SqItem, 'SqItem');
    RegisterMethod(@TPyDelphiContainer.SqAssItem, 'SqAssItem');
    RegisterMethod(@TPyDelphiContainer.SqContains, 'SqContains');
    RegisterPropertyHelper(@TPyDelphiContainerContainerAccess_R,nil,'ContainerAccess');
    RegisterPropertyHelper(@TPyDelphiContainerPyDelphiWrapper_R,nil,'PyDelphiWrapper');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TContainerAccess(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TContainerAccess) do
  begin
    RegisterVirtualConstructor(@TContainerAccess.Create, 'Create');
    RegisterVirtualMethod(@TContainerAccess.Clone, 'Clone');
    RegisterVirtualAbstractMethod(@TContainerAccess, @!.GetItem, 'GetItem');
    RegisterVirtualAbstractMethod(@TContainerAccess, @!.GetSize, 'GetSize');
    RegisterVirtualMethod(@TContainerAccess.IndexOf, 'IndexOf');
    RegisterVirtualMethod(@TContainerAccess.SetItem, 'SetItem');
    RegisterVirtualAbstractMethod(@TContainerAccess, @!.ExpectedContainerClass, 'ExpectedContainerClass');
    RegisterVirtualMethod(@TContainerAccess.Name, 'Name');
    RegisterVirtualMethod(@TContainerAccess.SupportsWrite, 'SupportsWrite');
    RegisterVirtualMethod(@TContainerAccess.SupportsIndexOf, 'SupportsIndexOf');
    RegisterPropertyHelper(@TContainerAccessContainer_R,nil,'Container');
    RegisterPropertyHelper(@TContainerAccessWrapper_R,nil,'Wrapper');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFreeNotificationImpl(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFreeNotificationImpl) do
  begin
    RegisterConstructor(@TFreeNotificationImpl.Create, 'Create');
    RegisterPropertyHelper(@TFreeNotificationImplOwner_R,nil,'Owner');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_WrapDelphi(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyDelphiWrapper) do
  RIRegister_TFreeNotificationImpl(CL);
  RIRegister_TContainerAccess(CL);
  RIRegister_TPyDelphiContainer(CL);
  RIRegister_TPyDelphiIterator(CL);
  RIRegister_TPyInterfacedObject(CL);
  RIRegister_TPyDelphiObject(CL);
  RIRegister_TPyDelphiVarParameter(CL);
  RIRegister_TPyRttiObject(CL);
  RIRegister_TPyPascalRecord(CL);
  RIRegister_TPyPascalInterface(CL);
  RIRegister_TEventHandler(CL);
  RIRegister_TEventHandlers(CL);
  RIRegister_TNotifyEventHandler(CL);
  RIRegister_TRegisteredUnit(CL);
  RIRegister_TRegisteredUnits(CL);
  RIRegister_TPyDelphiWrapper(CL);
end;

 
 
{ TPSImport_WrapDelphi }
(*----------------------------------------------------------------------------*)
procedure TPSImport_WrapDelphi.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_WrapDelphi(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_WrapDelphi.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_WrapDelphi(ri);
  RIRegister_WrapDelphi_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
