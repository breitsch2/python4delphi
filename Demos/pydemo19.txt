PROGRAM SEPDemo__PythonTemplate_ColabMini;
{Purpose: shows running dlls from process!}

Const PYHOME32 = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\'; 
      PYDLL32  = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\python36.dll'; 

      REXDEF= 'def striphtml(data):       '+LF+
               '  p = re.compile(r"<.*?>")'+LF+
               '  return p.sub("", data)  ';  
               
Begin  //@Main
  maxform1.console1click(self)
  memo2.height:= 200;
  with TPythonEngine.Create(Nil) do begin
    pythonhome:= PYHOME32;
    try
      opendll(PYDLL32)
      Println('Colab Platform: '+ 
          EvalStr('__import__("platform").platform()')); 
      //Println('CPU Arch. Check Linux: '+ 
      //EvalStr('__import__("subprocess").check_output("lscpu",shell=True).strip().decode()'));     
     Println('DIR Check: '+ 
     EvalStr('__import__("subprocess").check_output("dir",shell=True).strip().decode()')); 
          
    except
      raiseError;
    finally                         
      Free;
    end;
  end;  
//<Definitions>  
End. 

Ref Error:  Command 'lscpu' returned non-zero exit status 1
It occurs randomly ; after restarting the same build, the error first happened on another job then it passed...
Or maybe it's cache-related (passing only the second time ?)

      if (ValidationRate > ValidationRecord) then
        begin
          ValidationRecord := ValidationRate;
          FMessageProc('VALIDATION RECORD! Saving NN at '+fileName);
          FAvgWeight.SaveToFile(fileName);
        end;

Ref:  https://www.sonarqube.org/features/multi-languages/python/
C:\maXbox\mX39998\maxbox3>pip3 install -U -t C:\Users\max\AppData\Local\Programs
\Python\Python36-32\Lib https://files.pythonhosted.org/packages/19/29/f7a38ee300
83f2caa14cc77a6d34c4d5cfd1a69641e87bf1b3d6ba90d0ba/psutil-5.8.0-cp36-cp36m-win32.whl
Collecting psutil==5.8.0
  Using cached psutil-5.8.0-cp36-cp36m-win32.whl (240 kB)
ERROR: distributed 2.22.0 has requirement cloudpickle>=1.5.0, but you'll have cl
oudpickle 0.5.3 which is incompatible.
Installing collected packages: psutil
Successfully installed psutil-5.8.0
----File newtemplate.txt not exists - now saved!----

# -*- coding: utf-8 -*-
"""Kopie von EKON_SimpleImageClassificationCPU.ipynb
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clvG2uoMGo-_bfrJnxBJmpNTxjvnsMx9
"""

!apt-get update
!apt-get install fpc fpc-source lazarus git subversion

!git clone https://github.com/joaopauloschuler/neural-api.git

!svn checkout https://svn.code.sf.net/p/lazarus-ccr/svn/components/multithreadprocs mtprocs

!lazbuild mtprocs/multithreadprocslaz.lpk

!ls -l neural-api/examples/SimpleImageClassifier/SimpleImageClassifier.lpi

!lazbuild neural-api/examples/SimpleImageClassifier/SimpleImageClassifier.lpi

ls -l neural-api/bin/x86_64-linux/bin/SimpleImageClassifier

import os
import urllib.request

if not os.path.isfile('cifar-10-batches-bin/data_batch_1.bin'):
  print("Downloading CIFAR-10 Files")
  url = 'https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz'
  urllib.request.urlretrieve(url, './file.tar')

ls -l
!tar -xvf ./file.tar

if not os.path.isfile('./data_batch_1.bin'):
  print("Copying files to current folder")
  !cp ./cifar-10-batches-bin/* ./

if os.path.isfile('./data_batch_1.bin'):
  print("RUNNING!")
  !neural-api/bin/x86_64-linux/bin/SimpleImageClassifier

from google.colab import files
!ls -l

files.download('SimpleImageClassifier-66.nn')
files.download('SimpleImageClassifier-66.csv')

Statistic
Starting Rate:100%
Rate:94%
Characters:55104
Char. w/o Space:47777
Words:7132
Lines:716
Errors (Red):250
Unknown (Orange):198
Auto Corrected (Green):5
Corrected by user (Blue):1

Gen private key pair tester
OpenSSL> genpkey -algorithm RSA -out genpkeySSH.cer -outform DER -pkeyopt rsa_ke
ygen_bits:2048
......................................................+++
.+++
OpenSSL> rsa -inform DER -outform PEM -in genpkeySSH.cer -out genpkeySSH.pem
writing RSA key
OpenSSL>
Extract the public key from the PEM formatted RSA pair
OpenSSL> rsa -in genpkeySSH.pem -pubout -out genpubkeySSH.pem
writing RSA key
ssh-rsa 2048 49:c8:b6:21:b0:90:76:47:2f:e9:ab:6e:5e:e6:6c:ef
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjRMOq7NaaonIGzYYrYClbNEztVDnZ+rIK21R3xLJogPJwiaKQk3ZPLf9Wf9SaZkEkFb+xDdecU+NsOk0Plmc65eY7dsJHfa/UqYj7KXDy7cf+TxZN5EA2+QuTLkQEcWvj4IJXknNMxlZUZUJ5kvTcm0U+FdvYQPIZtcipmslPblx0YfXSXI4QkpBuEerKHanwU0lI+iXUQTC6yOubICaSC0lU3UAkShr/iS5JKjWiB8OI7cEmGTqjvzRhQe4nzhl92Vi1y2DqTN0vmVRQSXFdEsq1AaHPXjrhuLgBiCsDNCC4r6o3MDZMf6O2MpeDQHtaa8YcK8TyXl6YmbdxQ3E5 imported-openssh-key

        
   
   