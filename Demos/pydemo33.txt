Program Python_Pascal_PrimeTime32_SynDat_Tutorial91_1;

//https://www.programiz.com/python-programming/time/sleep
//Note: modify PYHOME and PYDLL :  SynDat <make the fake>
//http://www.softwareschule.ch/download/maxbox_starter91_1.pdf
//https://www.section.io/engineering-education/how-to-create-a-blockchain-in-python/

Const //PYHOME = 'C:\Users\breitsch\AppData\Local\Programs\Python\Python37-32\';
    PYHOME = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\';
    PYDLL  = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\python36.dll'; 
    PYSCRIPT = 'C:\maXbox\maxbox3\maxbox3\maXbox3\examples\module1maxbox1.py';
    LB= CR+LF;
    EmptyStr = '';
       
Const PRIME =  'def py_is_prime(n):'+LB+
               '  import math'+LB+
               '  """ totally naive implementation """'+LB+
               '  if n <= 1:'+LB+
               '    return False'+LB+
               '  q = math.floor(math.sqrt(n))'+LB+
               '  for i in range(2, q + 1):'+LB+
               '    if (n % i == 0):'+LB+
               '      return False'+LB+
               '  return True';

      ATIME='while True: '+LB+ 
            '  localtime = time.localtime()'+LB+ 
            '  result = time.strftime("%I:%M:%S %p", localtime)'+LB+ 
            '  print(result, end="", flush=True)'+LB+ 
            '  print("\r", end="", flush=True)'+LB+ 
            '  time.sleep(1)';   
            
  BLOCKCH=  'class Blockchain: '+LB+ 
            '  def __init__(self):'+LB+
            '     self.chain = []'+LB+
            '     self.create_blockchain(proof=1, previous_hash="0")'; 
            
  BHASH=    '# generate a hash of an entire block'+LB+ 
            'def bhash(self, block):'+LB+ 
            '  encoded_block = json.dumps(block, sort_keys=True).encode()'+LB+ 
            '  return hashlib.sha256(encoded_block).hexdigest()';  
  BHASH2=   '# generate a hash of an entire block'+LB+ 
            'def bhash2(self,block):'+LB+ 
            '  #encoded_block = json.dumps(block, sort_keys=True).encode()'+LB+ 
            '  return hashlib.sha256(block.encode("utf-8")).hexdigest()';            
                              
              
var  PyForm: TForm; pyMemo: TMemo; pyval: variant; fprofile: string;
     eg: TPythonEngine; aPythonVersion: TPythonVersion;
     apd: TApdMeter; sw: TStopWatch; 
     ajt: TJson; JObj: TJsonObject2; JArr: TJsonArray2; 
     
     
procedure dumpJSON(response: string);
var cnt: integer; clb: string;
begin
ajt:= TJson.create();
  try
    response:= '{'+response+'}'; //*)
    ajt.parse(response);
  except
     writeln( 'Exception: <TJson>"" parse error: {'+
     exceptiontostring(exceptiontype, exceptionparam)) 
  end;
  JObj:= ajt.JsonObject;
  //JArr:= ajt.values[''].asarray;
  //for cnt:= 0 to jarr.count-1 do begin
  for cnt:= 0 to jobj.count-1 do begin
    clb:= jobj.items[cnt].name;
    writeln('this '+clb)
  end;  //}
  ajt.Free;
end;  

//------------------------------------------------------------------------------
// check if two StringLists contain identical strings
//------------------------------------------------------------------------------
function ListIdentical(l1,l2:TStringList):Boolean;
var
  ix            : Integer;
begin
  Result := False;
  if l1.count = l2.count then begin
    for ix := 0 to l1.count-1 do begin
      if (l1[ix] <> l2[ix]) then Exit;
    end;
    Result := True;
  end;
end;  

function ReverseHash(Hash: string): string;
var
  k: byte;
begin
  Result := EmptyStr;
  k := 64;
  while (k > 0) do begin
    Result := Result + Hash[k - 1] + Hash[k];
    k := k - 2;
  end;
end;

const
  HEADERSIZE = 80;

type
  ATSHA256HASH = array [0 .. 7] of Cardinal;
  //PSHA256HASH = ^TSHA256HASH;

  // To store a 32 bytes
  T32 = array [0 .. 31] of byte;

  // To store the block header
  ATHeader = array [0 .. HEADERSIZE - 1] of byte;

function T32ToString(const at32: T32): string;
var
  k: Integer;
begin
  Result := EmptyStr;
  for k := 0 to 31 do begin
    //Result := IntToHex(byte(at32[k]),2) + Result;
    Result := IntToHex(ord(at32[k]),2) + Result;
  end;
end;


function GetMemoryStream: TMemoryStream;
var
  aMemoryStream: TMemoryStream;
begin
  if aMemoryStream = nil then
    aMemoryStream := TMemoryStream.Create;

  Result := aMemoryStream;
end;     

begin  //@main
  //myloadscript2:= filetostring(PYSCRIPT2);
  PyForm:= loadForm2(200,300, clgreen,'PyFrm4D_SynDat_Tester_EKON25');
  pyMemo:= TMemo.create(PyForm);
  apd:= TApdMeter.create(pyform);
  //apd.color:= clyellow;
  apd.parent:= pyform;
  apd.barcolor:= clred;
  apd.position:= 30;
  apd.SetBounds(10,100, 150, 150);
  apd.visible:= true;
  pyMemo.parent:= PyForm
  PyForm.show;
  
  //println('user_max_complete = '+eng.evalStr('top_users[0][1]')); 
  //https://medium.com/@swathiarun63/10-fantastic-python-packages-af2a16a1183a
  //PYLaz_P4D_Demo2;   EKON25 - explicit better than implicit
  eg:= TPythonEngine.Create(Nil);
  try
    eg.pythonhome:= PYHOME;
    eg.loadDLL;
    println('test import '+GetPythonEngine.EvalStr('__import__("decimal").Decimal(0.1)'));
    println('test import '+eg.EvalStr('__import__("decimal").Decimal(0.1)')); 
    writeln('') 
    //https://medium.com/@swathiarun63/10-fantastic-python-packages-af2a16a1183a
    apd.position:= 60;
    pyMemo.lines.add('call test with execStr() from faker import Faker');
    println(eg.EvalStr('__import__("faker").Faker()')); 
    sw:= TStopWatch.Create();
    sw.Start;
    eg.execStr('from faker import Faker');
    eg.execStr('import simplejson as json');  //# instead of import json
    eg.execStr('import dumper, hashlib, json');
    eg.execStr('fake = Faker()');
    fprofile:= eg.evalStr('(fake.profile())')
    fprofile:= StringReplace(fprofile,'\n',CRLF,[rfReplaceAll]);
    //fprofile:= eg.evalStr('fake.profile().replace("\n"," ")');
    //Exception: <class 'AttributeError'>: 'dict' object has no attribute 'replace'.
    println('fake person profile: '+CRLF+fprofile+CRLF);
    //dumpJSON(fprofile);
    //eg.execStr('profile1 = fake.simple_profile()');
    //eg.execStr('ad= dumper.dump(profile1)');
    //println(eg.evalStr('dumper.dump(profile1)'))
    //println(eg.evalStr('f"my profile: {fake.profile()}"'));
    //println(eg.evalStr('json.dumps(fake.profile(),indent=4)'));
    println('creditcard#: '+eg.evalStr('fake.credit_card_number()')); //}
    eg.execStr('fake = Faker(["es_MX"])')
    //for i in range(10):
    for it:= 1 to 5 do 
      println(UTF8toAnsi(eg.evalStr('fake.name()')));
    
    eg.execStr(BHASH)  
    println(eg.evalStr('bhash(0,"maXbox4")'));
    eg.execStr(BHASH2)  
    println(eg.evalStr('bhash2(0,"maXbox4")'));  
    writeln(ReverseHash(eg.evalStr('bhash2(0,"maXbox4")')));
    writeln(eg.evalStr('hash(10**2000)'));             
    sw.Stop;
    //sw.ElapsedMilliseconds;
    writeln('Stop Watch Faker Tester1: '+sw.getValueStr)
  except
    eg.raiseError;
    writeln(ExceptionToString(ExceptionType, ExceptionParam));  
  finally
    eg.Free;
    sw.Free;
    sw:= Nil;
    apd.position:= 100;
  end; 
  
    with TSectionList.create do begin
       //IndexOf(const S: AnsiString): Integer; override;
         //IndexOfName(const name: string): Integer; //override;
       //SectionItems  
      free
    end;  
   
End.

Ref: https://towardsdatascience.com/build-a-data-streaming-job-in-5-mins-with-pyspark-faker-a4f3d2420384
     https://www.codespeedy.com/faker-library-in-python/
{'job': 'Research officer, political party', 'company': 'Davis-Perez', 'ssn': '520-11-9286', 'residence': '18365 Katherine Plains\nAliceville, OK 31762', 'current_location': (Decimal('47.667757'), Decimal('14.943272')), 'blood_group': 'O-', 'website': ['https://www.thompson.com/', 'https://graham.com/', 'http://www.thomas.com/'], 'username': 'hbass', 'name': 'Tammy Crane', 'sex': 'F', 'address': '3144 Stephanie Road\nWilliambury, MT 95571', 'mail': 'wthompson@yahoo.com', 'birthdate': datetime.date(1962, 11, 25)}
4978088480978
 mX4 executed: 05/12/2021 11:43:04  Runtime: 0:0:2.197  Memload: 36% use
 

Optimizations

The Faker constructor takes a performance-related argument called use_weighting. It specifies whether to attempt to have the frequency of values match real-world frequencies (e.g. the English name Gary would be much more frequent than the name Lorimer). If use_weighting is False, then all items have an equal chance of being selected, and the selection process is much faster. The default is True.

Santiago Carmona
Ángel Judith Roque Amador
Susana Eloy Rocha Blanco
Rodolfo Urbina Suárez
Juana Irma de la Torre Mares

Doc: One thing to note is that the map() function returns an iterable object, and thus we can use the list() function to generate a list from this iterable.
writeln('RegVersion: '+itoa(TPythonEngine(eng).RegVersion));
https://stackoverflow.com/questions/16779799/py-initialize-and-py-finalize-and-matplotlib

import threading 
  
def print_hello_three_times():
  for i in range(3):
    print("Hello")
  
def print_hi_three_times(): 
    for i in range(3): 
      print("Hi") 

t1 = threading.Thread(target=print_hello_three_times)  
t2 = threading.Thread(target=print_hi_three_times)  
t1.start()
t2.start()

This package implements JSON support for FPC.

# check if the blockchain is valid
def is_chain_valid(self, chain):
   # get the first block in the chain and it serves as the previous block
   previous_block = chain[0]
   # an index of the blocks in the chain for iteration
   block_index = 1
   while block_index < len(chain):
       # get the current block
       block = chain[block_index]
       # check if current block link to previous block is same as the hash of previous block
       if block["previous_hash"] != self.hash(previous_block):
           return False

       # get the previous proof from the previous block
       previous_proof = previous_block['proof']

       # get the current proof from the current block
       current_proof = block['proof']

       # run the proof data through the algorithm
       hash_operation = hashlib.sha256(str(current_proof ** 2 - 
                                  previous_proof ** 2).encode()).hexdigest()
       # check if hash operation is invalid
       if hash_operation[:4] != '0000':
           return False
       # set previous block to current block after running validation on current block
       previous_block = block
       block_index += 1
   return True
   
PascalCoin: Cryptocurrecy developed with FreePascal.

    Infinite Scaling  Only keeps the last 100 blocks of the blockchain (the Flow) instead the full history. This keeps the ledger from getting large.
    Very high transaction rate  over 100 transactions per second.
    Supports Asserts, Sub Tokens and smart contracts.
    Wallet available on Windows and Linux. No android and ios support yet.
    for Current Pascalcoin Price, check here. 
    Passion is no replacement for reason 
"When one person suffers from a delusion, it is called insanity. When a million people suffer from a delusion, it is called religion." (Richard Dawkins)     
    