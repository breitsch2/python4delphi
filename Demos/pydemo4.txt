Program PyDemo7_Eval_IOEvents;

//https://github.com/Alexey-T/Python-for-Lazarus/blob/master/python4lazarus/PythonEngine.pas
//https://github.com/maxkleiner/python4delphi/blob/master/Demos/Demo02/Unit1.pas
//https://stackoverflow.com/questions/21464102/reset-python4delphi-engine
//https://thepythonguru.com/python-builtin-functions/eval/
//https://maxbox4.wordpress.com/2021/07/28/python4maxbox-code/
//https://stackoverflow.com/questions/359498/how-can-i-unload-a-dll-using-ctypes-in-python
//https://levelup.gitconnected.com/5-powerful-python-one-liners-you-should-know-469b9c4737c7

//interface   - customize your PY environment first
{uses
  Classes, SysUtils,
  Windows, Messages, Graphics, Controls, Forms, Dialogs,
  StdCtrls, ComCtrls, ExtCtrls,
  PythonEngine, Vcl.PythonGUIInputOutput, PythonVersions.pas ;   }  
  
{procedure PyFinalize();
      external 
  'Py_Finalize@C:\Users\breitsch\AppData\Local\Programs\Python\Python37-32\python37.dll stdcall';   }    
//Note: modify PYHOME and PYDLL :

const //PYHOME = 'C:\Users\breitsch\AppData\Local\Programs\Python\Python37-32\';
    PYHOME = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\';
    PYDLL  = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\python36.dll'; 
    PYSCRIPT = 'C:\maXbox\maxbox3\maxbox3\maXbox3\examples\module1maxbox1.py';
    PYSCRIPT2= 'C:\maXbox\maxbox3\maXbox4\examples\896_textclassification.py';
    LB = CR+LF;
       
const PyModule =
              'def printData(data): '+#13#10+
              '  return data+data+"/n"';       
         
const PYCMD = 'print("this is box")'+LB+ 
              'import sys'+LB+ 
              'f=open(r"1050pytest21_5powers.txt","w")'+LB+
              'f.write("Hello PyWorld_mX47580, \n")'+LB+
              'f.write("This data will be written on the file.")'+LB+ 
              'f.close()';

//https://stackoverflow.com/questions/9771261/python4delphi-returning-a-python-object-in-a-function-delphiwrapper
              
const PYCMD2 = 'print("this is box2")'+LF+ 
              'import sys'+LF+ 
              '#import pyio'+LF+ 
              'f=open(r"1050pytest21_5powers.txt","w")'+LF+
              'f.write("Hello PyWorld_mX47580_2_pyIO, \n")'+LF+
              'f.write("This data will be written on the file.")'+LF+ 
              'print("this is box4fromPyscript")'+LF+ 
              'print(2+2)'+LF+
              '12+200'+LF+
              '#print(sys.argv[1])'+LF+ 
              '#val = input("Enter your value: ")'+LF+
              'f.close()';              
              
var  PyForm: TForm; pyMemo: TMemo;
     avar: string; pyval: variant; pyint: integer;
     
 

Procedure PYLaz_P4D_Demo2;
//https://wiki.freepascal.org/Python4Delphi 
var eng : TPythonEngine;
    Out1: TPythonGUIInputOutput;
    pystrings: TStrings;
begin

// FIOPythonModule := TPythonModule.Create( Self );
    //with  TPythonModule.Create( Self ) do
      //AddMethod(
      
  eng:= TPythonEngine.Create(Nil);
  Out1:= TPythonGUIInputOutput.create(eng)
  pystrings:= TStringlist.create;
  Out1.output:= pyMemo; //debugout.output; or memo2;
  //eng.IO:= Out1;
  Out1.RawOutput:= True;
  Out1.UnicodeIO:= False;
  //eng.IO:= Out1;
  Out1.maxlines:= 40;
  out1.DelayWrites:= False;
  out1.displaystring('this string thing draw the line')
  out1.write('YXthis write string thing draw the line');
  //eng.IO:= Out1;
  writeln(botostr(Isx64(PYDLL)));
  //writeln(botostr(Isx64(pydllpath2)));
  //eng.dllpath:= exepath;
  //eng.dllname:='python37.dll';
  eng.pythonhome:= PYHOME;
  pystrings.add(PYCMD2);
  eng.InitScript:= pystrings;
  try
   //pymod.InitializeForNewInterpreter; //}
   //pymod.engine:= eng;
   //eng.IO:= Out1;
   eng.RedirectIO:= true;
    eng.opendll(PYDLL)
    //eng.loadDLL;
    eng.RedirectIO:= true;
    eng.IO:= Out1;
    Out1.output:= pyMemo; 
    //eng.traceback
    eng.AutoFinalize:= True; 
    //eng.RedirectIO:= true;
    //eng.AutoUnload:= false; 
    writeln(eng.dllname);
    //pymod.engine:= eng;
    if eng.IsHandleValid then begin
      writeln('DLLhandle: '+botostr(eng.IsHandleValid))
      WriteLn('evens: '+ eng.EvalStringAsStr('[x**2 for x in range(15)]'));
      WriteLn('gauss: '+ eng.EvalStringAsStr('sum([x for x in range(101)])'));
      WriteLn('gauss2: '+ eng.EvalStr('sum([x % 2 for x in range(10100)])'));
      WriteLn('mathstr: '+ eng.EvalStr('"py " * 7'));
      WriteLn('builtins: '+ eng.EvalStr('dir(__builtins__)'));
      WriteLn('upperstr: '+ eng.EvalStr('"hello again".upper()'));
      pymemo.lines.add('workdir: '+ eng.EvalStr('__import__("os").getcwd()'));
      writeln('syncheck '+
      botostr(eng.CheckEvalSyntax('print("powers:",[x**2 for x in range(10)])')));
      
      WriteLn('powerline1: '+ eng.EvalStr('list(map(int, ["1", "2", "3"]))'));
      WriteLn('powerline2: '+ 
               eng.EvalStr('list(map(float,["1",2,"3.0",4.0,"5",6]))'));
               eng.Execstring('sum_of_digits=lambda x: sum(map(int, str(x)))');
      WriteLn('powerline3: '+ eng.EvalStr('sum_of_digits(1789)'));
      
               eng.Execstring('A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]');
               eng.Execstring('transpose_A = [list(i) for i in zip(*A)]');
      WriteLn('powerline4: '+ eng.EvalStr('transpose_A'));  
      
      //We can use dictionary comprehension to swap key-value pairs.
               eng.Execstring('staff={"Data Scientist":"John","Django Developer":"Max"}');
      WriteLn('powerline5: '+ eng.EvalStr('{i:j for j, i in staff.items()}'));                                                   
      eng.ExecString('print("powers:",[x**2 for x in range(10)])');
      
      writeln('ExecSynCheck1 '+botostr(eng.CheckExecSyntax(PYCMD2)));
      //eng.ExecString(PYCMD2+'parainput');
      eng.ExecString(PYCMD2+'');
      eng.CheckError(true);
      
     { pystrings:= TStringlist.create;
      pystrings.add('import matplotlib.pyplot as plt')
      pystrings.add('import numpy as np')
      pystrings.add('np.arange(5, 24, 3)')
      pystrings.add('fig, ax = plt.subplots(dpi=153)')
      pystrings.add('plt.plot([1,2,3,4,5,6], [1,2,3,4,9,5], "go")')
      pystrings.add('plt.show()')
      eng.ExecStrings4(pystrings);
      pystrings.free; }
      
     (* eng.ExecString('import subprocess');  
      eng.ExecString('subprocess.call(["pip", "install", "sympy"])')
      eng.ExecString('from sympy import *');
      eng.ExecString('from sympy.plotting import plot'); 
      writeln(eng.EvalStr('list(primerange(7, 150))'));
      writeln(eng.EvalStr('sum(list(primerange(0, 100)))'));
      writeln(eng.EvalStr('(list(primerange(0, 101)))'));
      writeln(eng.EvalStr('len(list(primerange(0, 101)))'));
      //https://www.tutorialspoint.com/sympy/sympy_solvers.htm
      avar:= '-2';
      eng.ExecString('x=Symbol("x")');
      eng.ExecString('x,y=symbols("x y")');
      writeln(eng.EvalStr('solveset(Eq(x**2-9,0), x)'));
      writeln(eng.EvalStr('solveset(Eq(x**2-3*x,'+avar+'),x)'));
      writeln(eng.EvalStr('solveset(exp(x),x)'));
      println(eng.EvalStr('linsolve([Eq(x-y,4),Eq( x + y ,1) ], (x, y))'));
       *)
     
      //eng.ExecString('plot(x**'+avar+', line_color="red")');
      //eng.ExecString('plot((sin(x),(x, -2*pi, 2*pi)),(cos(x), (x, -pi, pi)))');
      {
      eng.ExecString('from sympy.plotting import plot3d'); 
      eng.ExecString('x,y=symbols("x y") '); 
      eng.ExecString('plot3d(x*y, (x, -10,10), (y, -10,10))'); }
      
      WriteLn('powerline6: '+ eng.EvalStr('len(str(2**4096))'));
      pymemo.lines.add('Decimal: '+ 
              eng.EvalStr('__import__("decimal").Decimal((0,(3,1,4),-2))'));
      pymemo.lines.add('Decimal: '+ 
              eng.EvalStr('__import__("decimal").Decimal(0.1)')); 
      eng.ExecString('import decimal')  
      //https://www.w3schools.com/python/python_ref_functions.asp      
      writeln('is instance: '+eng.EvalStr('isinstance(decimal.Decimal,'+
                    '(float, int, str, list, dict, tuple, type))')); 
      writeln('is type: '+eng.EvalStr('type(str(decimal.Decimal(0.1)))'));
      writeln('is type: '+eng.EvalStr('type(float(decimal.Decimal(0.1)))'));
      writeln('is type: '+eng.EvalStr('type(decimal.Decimal)')); 
      writeln('is type: '+eng.EvalStr('type(decimal)'));                    
      //eng.ExecString('from spacy import *');
      //eng.ExecString('from nltk.classify import MaxentClassifier')          
      //eng.ExecString('import tensorflow')  
      
      eng.ExecString('print("2*4")');        
      
      pyval:= VarPythonEval('sum([x for x in range(201)])');
      //writeln('evalvar '+botostr(VarIsPythonList(pyval)));
      writeln('evalvar '+botostr(VarIsnumeric(pyval)));
      pyval:= NewPythonDict;
      writeln(botostr(VarIsPython( pyval)));
      pyval := (VarPythonEval('2 ** 3'));         
     { eng.ExecString('import subprocess');  
      eng.ExecString('subprocess.call(["pip", "install", "langdetect"])')
      eng.ExecString('from langdetect import detect'); 
      println('lang detect: '+eng.EvalStr('detect("bonjour mes ordinateurs")'));
      }
      Out1.output:= pyMemo; 
      pymemo.update;
    end
      else writeln('invalid library handle! '+Getlasterrortext);
    println('PythonOK: '+botostr(PythonOK));  
  except
     eng.raiseError;
     writeln('PyErr '+ExceptionToString(ExceptionType, ExceptionParam));
  //PyErr Exception: Access violation at address 50F49DA6 in module '_multiarray_umath.cp37-win32.pyd'. Write of address 00000022.
  finally
     //eng.close 
     eng.unloaddll; 
     //PyFinalize();
     out1.free;
     eng.free;
     //PyFinalize();
     pystrings.Free;
  end;     
  //out1.free;
  //pyImport(PyModule);
end;

procedure PythonInputOutput_SendData(sender: tobject; const data: ansistring);
Var
  S : string;
begin
  { if Assigned(FOnSendData) then
    inherited
  else
    DisplayString( string(Data) );}
    
  showmessage('event second sended...')
  println(itoa(length(data)));
  for it:= 1 to length(data) do begin
    s:= s+data[it];
    //write(s)
    end;
  println('event send data '+s)
  println('event2 send data '+data)
end;  

procedure PythonInputOutput_ReceiveData(sender: tobject; var data: ansistring);
Var
  S : string;
begin
  {if Assigned( FOnReceiveData ) then
    Result := inherited ReceiveData
  else
  begin
    InputQuery( 'Query from Python', 'Enter text', S);
    Result := AnsiString(S);
  end;  }
  showmessage('second received...')
  println('event send data '+data)
end;  

function SysVersionFromDLLName2(const DLLFileName : string): string;
var
  Minor, Major: integer;
begin
  PythonVersionFromDLLName(DLLFileName, Major, Minor);
  Result := Format('%d.%d', [Major, Minor]);
end;

//https://stackoverflow.com/questions/64324481/delphi-4-python/69123825#69123825
procedure callDynPy;
var
  PyEngine_netA: TPythonEngine;
  PyInpOut_netA: TPythonInputOutput;
  FIOPythonModule : TPythonModule;
  pystrings: TStrings;
begin
  PyEngine_netA := TPythonEngine.Create(Self);
  PyInpOut_netA := TPythonInputOutput.Create(Self);
  FIOPythonModule := TPythonModule.Create( Self );
  pystrings:= TStringlist.create;
  
  pystrings.text:=
   'import sys'+LF+
   'import os'+LF+
   'pylist = []'+LF+
   'print("Python path =", sys.path)         '+LF+
   'print()                                  '+LF+
   'print("Python modules already imported:")'+LF+
   'for m in sys.modules.values():           '+LF+
   '    if m:                                '+LF+
   '        print(" ", m,"\n")               '+LF+
   '        pylist.append(m)                 '+LF+
   '        pylist.append("\n")              '+LF+
   'print()                                  '+LF+
   '#pylist = "\n".join(pylist)              '+LF+ 
   '#PYTHONHOME=os.getenv(r"'+PYHOME+'\"))   '+LF+
   'pylist.append(os.getenv("PYTHONHOME"))   '+LF+
   '#print("PYTHONPATH =", os.getenv("PYTHONPATH"))';
   
  try
    ///  configure the components
    //saveString(exepath+'pystrings.py', pystrings.text);
    //writeln(getDosOutput('py '+exepath+'pystrings.py', exePath));
    PyEngine_netA.DllName:= PYDLL;
    PyEngine_netA.pythonhome:= PYHOME;
    //writeln(TPythonModule(PyEngine_netA.IOPythonModule).modulename); 
              {TPythonModule}
    writeln(FIOPythonModule.modulename);
    writeln(objtostr(PyEngine_netA.IOPythonModule)); 
    //PyEngine_netA.modulename 
   
    //PyEngine_netA.IO := PyInpOut_netA;
    PyEngine_netA.UseLastKnownVersion := True;
    writeln('SysVersionFromDLLName2: '+SysVersionFromDLLName2(PYDLL));
    //PyEngine_netA.opendll(PYDLL)
    PyEngine_netA.LoadDll;
    //PyEngine_netA.CheckPython;
    PyEngine_netA.IO := PyInpOut_netA;
    PyEngine_netA.redirectio := true;

    PyInpOut_netA.OnSendData:= @PythonInputOutput_SendData;
    PyInpOut_netA.OnReceiveData:= @PythonInputOutput_ReceiveData;
    PyInpOut_netA.UnicodeIO := false;
    PyInpOut_netA.RawOutput := true;
    //PyInpOut_netA.Write('print(49+78,"\n")');
    //PyEngine_netA.ExecString('import pyio');
    PyInpOut_netA.Writeline('print(49+78+23,"\n")');
    PyEngine_netA.ExecString(UTF8Encode(PYCMD2));
    
    {with PyEngine_netA do begin
      ExecString('import subprocess');  
      ExecString('subprocess.call(["pip", "install", "pyio"])')
    end; } 
    //  println('lang detect: '+eng.EvalStr('detect("bonjour mes ordinateurs")'));
          
    println('CheckExecSyntax:'+botostr(PyEngine_netA.CheckExecSyntax(pystrings.text)));
    PyEngine_netA.ExecStrings4(pystrings);
    //synStringReplace(const S, OldPattern,NewPattern:str;Flags:TReplaceFlags):str
    println('module list detect: '+
             StringReplace(PyEngine_netA.EvalStr('pylist'),'\n',CR+LF,[rfReplaceAll]));
    //PyInpOut_netA.Read('print(49+78,"\n")');
    //PyInpOut_netA.output:= pyMemo;     
    //PyEngine_netA.IO:= PyInpOut_netA;

    ///  execute  the script
    //PyEngine_netA.ExecString(UTF8Encode(mmo_pythoncode.text));
//https://stackoverflow.com/questions/49599004/how-to-convert-a-python-datetime-to-a-delphi-tdatetime#49599145
    PyEngine_netA.ExecString(UTF8Encode('print(49+78),"\n"'));
    PyEngine_netA.ExecString(('from datetime import datetime, timedelta'));
    PyEngine_netA.ExecString(UTF8Encode('DELPHI_EPOCH=datetime(1899,12,30)'));
    PyEngine_netA.ExecString('def datetime_fromdelphi(dvalue):'+LF+
                                 '  return DELPHI_EPOCH + timedelta(days=dvalue)');
    println(PyEngine_netA.EvalStr(('datetime_fromdelphi(43191.68205925926)')));
                                 
    //PyEngine_netA.ExecString(('49+78'));
    println(PyEngine_netA.EvalStr(('(49+78+2**5),"\n"'+LF)));
    println(PyEngine_netA.EvalStr(('__import__("sys").version')));
  except
    PyEngine_netA.raiseError;  
  finally
    PyEngine_netA.free;
    PyInpOut_netA.free;
    FIOPythonModule.Free;
    pystrings.Free;
  end;
end;  

begin  //@main
  //PythonEngine1.Free;
  //myloadscript2:= filetostring(PYSCRIPT2);
  //Memo1.beginUpdate;
  PyForm:= loadForm2(300,200, clgreen,'PyFrm4D');
  pyMemo:= TMemo.create(PyForm);
  pyMemo.parent:= PyForm
  pymemo.align:= albottom;
  PyForm.show;
  
  PYLaz_P4D_Demo2; 
  //Memo1.EndUpdate;
  
  callDynPy;
  
  //register_PYthonGUI;
End.
----app_template_loaded_code----
----File newtemplate.txt not exists - now saved!----

doc: https://stackoverflow.com/questions/23134820/unhandled-exception-at-multiarray-pyd-the-2nd-time-the-program-runs#23173191

https://stackoverflow.com/questions/16779799/py-initialize-and-py-finalize-and-matplotlib

maXbox_Starter86_3_Python4maXbox

Doc: Destroying it calls Py_Finalize, which frees all memory allocated by the Python DLL.
Or, if you're just using the Python API without the VCL wrappers, you can probably just call Py_NewInterpreter on your TPythonInterface object to get a fresh execution environment without necessarily discarding everything done before.

Evil eval()

You should never pass untrusted source to the eval() directly. As it is quite easy for the malicious user to wreak havoc on your system. For example, the following code can be used to delete all the files from the system.

1 >>>
2 eval('os.system("RM -RF /")') # command is deliberately capitalized
3 >>>

#  demo script
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0,8*np.pi,0.1)   # start,stop,step
y = np.cos(x) *1/(1+x)
plt.plot(x,y)
plt.show()


Ref: https://sourceforge.net/projects/maxbox/files/Examples/EKON/P4D/python37.dll/download
--------------------------------------------------------
dll EXCEPT Exception: There is already one instance of TPythonEngine running.
TRUE
Exception: Python is not properly initialized.
PascalScript maXbox4 - RemObjects & SynEdit

dll EXCEPT Exception: There is already one instance of TPythonEngine running.
TRUE
Exception: Python is not properly initialized.

dll EXCEPT Exception: Access violation at address 00345A76 in module 'maXbox4.exe'. Read of address 4365636E.
TRUE
Exception: Access violation at address 6BA3BA66 in module 'python36.dll'. Read of address 000000AD.

mapdll EXCEPT Exception: There is already one instance of TPythonEngine running.
PythonOK TRUE
ImportEXCEPT Exception: Access violation at address 6BA3BA66 in module 'python36.dll'. Read of address 000000AC.
 mX4 executed: 26/07/2021 13:30:51  Runtime: 0:0:2.48  Memload: 71% use
 
Example 3: Python multithreading

All the programs above in this article are single-threaded programs. Here's an example of a multithreaded Python program.


import threading 
  
def print_hello_three_times():
  for i in range(3):
    print("Hello")
  
def print_hi_three_times(): 
    for i in range(3): 
      print("Hi") 

t1 = threading.Thread(target=print_hello_three_times)  
t2 = threading.Thread(target=print_hi_three_times)  

t1.start()
t2.start()

This package implements JSON support for FPC.

You might want to have a look at the lazarus jsonviewer tool, written using
fpJSON (see lazarus/tools/jsonviewer). It visualizes the fpJSON data and
shows how to program using fpjson.

JSON support consists of 3 parts:

unit fpJSON contains the data representation. Basically, it defines a set of
classes:

TJSONData
+- TJSONNumber
   +- TJSONIntegerNumber
   +- TJSONFloatNumber
   +- TJSONInt64Number
+- TJSONString
+- TJSONBoolean
+- TJSONNull
+- TJSONObject
+- TJSONArray

The TJSONData.JSONType property is an enumerated:
TJSONtype = (jtUnknown, jtNumber, jtString, jtBoolean, jtNull, jtArray, jtObject);

Which allows to determine the type of a value.

Page 7: But the eval-uation of -> But the evaluation of
page 8: Ans here's the -> And here's the
page 10: The mentioned windows dll file for Python. > The mentioned windows dll file from Python.
page 10: (I'll show that in the Tutor III). -> (I'll show that in the Part 3).
page 14: so we use the same inter-preter as from a shell -> so we use the same  from a shell

procedure TPythonEngine.DoRedirectIO;
const
  code = 'import sys'+LF+
         'class DebugOutput:'+LF+
         '  pyio = __import__("pyio")'+LF+
         '  softspace=0'+LF+
         '  encoding=None'+LF+
         '  def write(self,message):'+LF+
         '     self.pyio.write(message)'+LF+
         '  def readline(self, size=None):'+LF+
         '     return self.pyio.read(size)'+LF+
         '  def flush(self):' + LF +
         '     pass' + LF +
         '  def isatty(self):' + LF +
         '     return True' + LF +
         'sys.old_stdin=sys.stdin'+LF+
         'sys.old_stdout=sys.stdout'+LF+
         'sys.old_stderr=sys.stderr'+LF+
         'sys.stdin=sys.stderr=sys.stdout=DebugOutput()'+LF+#0;
begin
  if csDesigning in ComponentState then
    Exit;
  CheckPython;
  if not Assigned(FIOPythonModule) then
  begin
    // create a new module called pyio
    FIOPythonModule := TPythonModule.Create( Self );
    with FIOPythonModule as TPythonModule do
      begin
        Engine := Self;
        ModuleName := 'pyio';
        AddMethod( 'write', pyio_write, 'write(String) -> None' );
        AddMethod( 'read',  pyio_read,  'read() -> String' );
        AddMethod( 'SetDelayWrites',  pyio_SetDelayWrites,  'SetDelayWrites(Boolean) -> None' );
        AddMethod( 'SetMaxLines',  pyio_SetMaxLines,  'SetMaxLines(Integer) -> None' );
        AddMethod( 'GetTypesStats',  pyio_GetTypesStats,  'GetTypesStats( [type name] ) -> a list of tuple (TypeName, InstanceCount, CreateHits, DeleteHits)' );
      end;
  end;
  with FIOPythonModule as TPythonModule do
    if not Initialized then
      Initialize;
  // execute the code
  ExecString(code);
  FIORedirected := True;
end;








































                   



  


    