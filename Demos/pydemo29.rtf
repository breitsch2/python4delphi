{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue128;\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue128;\red166\green202\blue240;\red0\green128\blue0;\red255\green165\blue0;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Untitled}}
\deflang1033\pard\plain\f0\fs20 \cf4\b Program\b0\cf1  Python_ThreadsDemo28_Dissasemble\cf5 ;
\par 
\par \cf6\i //https://arutselvan99.medium.com/python-why-is-faster-than-list-1b52d0ea9ac9
\par //https://www.programiz.com/python-programming/time/sleep
\par //Note: modify PYHOME and PYDLL :
\par 
\par \i0\cf4\b const\b0\cf1  \cf6\i //PYHOME = 'C:\\Users\\breitsch\\AppData\\Local\\Programs\\Python\\Python37-32\\';
\par \i0\cf1     PYHOME \cf5 =\cf1  \cf3 'C:\\Users\\max\\AppData\\Local\\Programs\\Python\\Python36-32\\'\cf5 ;
\par \cf1     PYDLL  \cf5 =\cf1  \cf3 'C:\\Users\\max\\AppData\\Local\\Programs\\Python\\Python36-32\\python36.dll'\cf5 ;\cf1  
\par     PYSCRIPT \cf5 =\cf1  \cf3 'C:\\maXbox\\maxbox3\\maxbox3\\maXbox3\\examples\\module1maxbox1.py'\cf5 ;
\par \cf1     LB\cf5 =\cf1  CR\cf5 +\cf1 LF\cf5 ;
\par \cf1        
\par \cf4\b const\b0\cf1  TH1 \cf5 =\cf1  \cf3 'def print_hello_three_times(): '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '  for i in range(3):           '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '    winsound.Beep(540, 500)    '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '    #time.sleep(1.4)           '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '  return "Hello"'\cf5 ;
\par \cf1   
\par \cf4\b const\b0\cf1  TH2 \cf5 =\cf1  \cf3 'def print_hi_three_times():    '\cf5 +\cf1 LB\cf5 +\cf1  
\par             \cf3 '  for i in range(3):           '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '    print("\\a")                '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '    winsound.Beep(440, 500)    '\cf5 +\cf1 LB\cf5 +
\par \cf1             \cf3 '  return "Hi"'\cf5 ;\cf1  
\par             
\par \cf4\b const\b0\cf1  ATIME\cf5 =\cf3 'while True: '\cf5 +\cf1 LB\cf5 +\cf1  
\par             \cf3 '  localtime = time.localtime()'\cf5 +\cf1 LB\cf5 +\cf1  
\par             \cf3 '  result = time.strftime("%I:%M:%S %p", localtime)'\cf5 +\cf1 LB\cf5 +\cf1  
\par             \cf3 '  print(result, end="", flush=True)'\cf5 +\cf1 LB\cf5 +\cf1  
\par             \cf3 '  print("\\r", end="", flush=True)'\cf5 +\cf1 LB\cf5 +\cf1  
\par             \cf3 '  time.sleep(1)'\cf5 ;\cf1                         
\par               
\par \cf4\b var\b0\cf1   PyForm\cf5 :\cf1  TForm\cf5 ;\cf1  pyMemo\cf5 :\cf1  TMemo\cf5 ;
\par \cf1      pyval\cf5 :\cf1  variant\cf5 ;
\par \cf1      
\par 
\par \cf4\b var\b0\cf1  eng\cf5 :\cf1  TPythonEngine\cf5 ;\cf1  aPythonVersion\cf5 :\cf1  TPythonVersion\cf5 ;
\par \cf1          PythonVersions\cf5 :\cf1  TPythonVersions\cf5 ;\cf1  AllUserInstall\cf5 :\cf1  Boolean\cf5 ;
\par \cf1          apd\cf5 :\cf1  TApdMeter\cf5 ;
\par 
\par \cf4\b begin\b0\cf1   \cf6\i //@main
\par \i0\cf1   \cf6\i //myloadscript2:= filetostring(PYSCRIPT2);
\par \i0\cf1   
\par   PyForm\cf5 :=\cf1  loadForm2\cf5 (\cf2 200\cf5 ,\cf2 300\cf5 ,\cf1  clgreen\cf5 ,\cf3 'PyFrm4D_VersionThread_Tester_EKON25'\cf5 );
\par \cf1   pyMemo\cf5 :=\cf1  TMemo\cf5 .\cf1 create\cf5 (\cf1 PyForm\cf5 );
\par \cf1   apd\cf5 :=\cf1  TApdMeter\cf5 .\cf1 create\cf5 (\cf1 pyform\cf5 );
\par \cf1   \cf6\i //apd.color:= clyellow;
\par \i0\cf1   apd\cf5 .\cf1 parent\cf5 :=\cf1  pyform\cf5 ;
\par \cf1   apd\cf5 .\cf1 barcolor\cf5 :=\cf1  clred\cf5 ;
\par \cf1   apd\cf5 .\cf1 position\cf5 :=\cf1  \cf2 30\cf5 ;
\par \cf1   apd\cf5 .\cf1 SetBounds\cf5 (\cf2 10\cf5 ,\cf2 100\cf5 ,\cf1  \cf2 150\cf5 ,\cf1  \cf2 150\cf5 );
\par \cf1   apd\cf5 .\cf1 visible\cf5 :=\cf1  true\cf5 ;
\par \cf1   pyMemo\cf5 .\cf1 parent\cf5 :=\cf1  PyForm
\par   PyForm\cf5 .\cf1 show\cf5 ;
\par \cf1   aPythonVersion\cf5 :=\cf1  TPythonVersion\cf5 .\cf1 create\cf5 ;
\par \cf1   
\par  \cf6\i //3. replace maps demo
\par \i0\cf1    eng\cf5 :=\cf1  TPythonEngine\cf5 .\cf1 Create\cf5 (\cf4\b Nil\b0\cf5 );
\par \cf1    eng\cf5 .\cf1 pythonhome\cf5 :=\cf1  PYHOME\cf5 ;
\par \cf1    eng\cf5 .\cf1 opendll\cf5 (\cf1 PYDLL\cf5 )
\par \cf1    \cf6\i //eng.IO:= pyMemo;
\par \i0\cf1    \cf4\b try
\par \b0\cf1      eng\cf5 .\cf1 Execstring\cf5 (\cf3 'pets= ("bird","snake","dog","turtle","cat","hamster")'\cf5 );
\par \cf1      \cf6\i // eng.Execstring('val.sort(key=lambda x: x[2],reverse=False)');
\par \i0\cf1      eng\cf5 .\cf1 Execstring\cf5 (\cf3 'uppercased_pets = list(map(str.upper, pets))'\cf5 );
\par \cf1      println\cf5 (\cf3 'Tip replace maps: '\cf5 +\cf1 eng\cf5 .\cf1 EvalStr\cf5 (\cf3 'uppercased_pets'\cf5 ));
\par \cf1      pyMemo\cf5 .\cf1 lines\cf5 .\cf1 add\cf5 (\cf1 eng\cf5 .\cf1 EvalStr\cf5 (\cf3 'list(map(str.upper, pets))'\cf5 ));
\par \cf1      
\par      eng\cf5 .\cf1 Execstr\cf5 (\cf3 'import dis, winsound, time'\cf5 );
\par \cf1      println\cf5 (\cf3 'disassemble call1: '\cf5 +\cf1 eng\cf5 .\cf1 EvalStr\cf5 (\cf3 '(dis.dis(lambda: []))'\cf5 ));\cf1  
\par      println\cf5 (\cf3 'disassemble call2: '\cf5 +\cf1 eng\cf5 .\cf1 EvalStr\cf5 (\cf3 '(dis.dis(lambda: list()))'\cf5 ));\cf1  
\par      \cf6\i //println('def call: '+eng.EvalStr('print_hello_three_times()')); 
\par \i0\cf1      println\cf5 (\cf3 'call3: '\cf5 +\cf1 eng\cf5 .\cf1 evalstr\cf5 (\cf3 '__import__("dis").dis(lambda: [])'\cf5 ));\cf1  
\par      \cf6\i //saveString(exepath+'pydis.py', 'import dis'+CRLF+('print(dis.dis(lambda: list()))'));
\par \i0\cf1    \cf6\i //saveString(exepath+'pydis.py','import dis'+CRLF+('repr(print(dis.dis(print("TXT"))))'+CRLF));
\par \i0\cf1      \cf6\i //ExecuteShell('py', 'pydis.py');
\par \i0\cf1      saveString\cf5 (\cf1 exepath\cf5 +\cf3 'pydis.py'\cf5 ,\cf1  \cf3 'import dis'\cf5 +\cf1 CRLF\cf5 +(\cf3 'dis.dis(x for x in range(5))'\cf5 ));
\par \cf1      println\cf5 (\cf1 getDOSOutput\cf5 (\cf3 'py '\cf5 +\cf1 exepath\cf5 +\cf3 'pydis.py'\cf5 ,\cf1  exePath\cf5 ));
\par \cf1      
\par      \cf6\i //eng.Execstring(ATIME);
\par \i0\cf1      \cf4\b if\b0\cf1  PythonVersionFromPath\cf5 (\cf1 PYHOME\cf5 ,\cf1  aPythonVersion\cf5 ,\cf1  false\cf5 )\cf1  \cf4\b then\b0\cf1  \cf4\b begin
\par \b0\cf1        aPythonVersion\cf5 .\cf1 AssignTo\cf5 (\cf1 eng\cf5 )\cf1  \cf5 ;
\par \cf1        writeln\cf5 (\cf3 'Version from path: '\cf5 +\cf1 TPythonEngine\cf5 (\cf1 eng\cf5 ).\cf1 RegVersion\cf5 );
\par \cf1        writeln\cf5 (\cf3 'DLL from path: '\cf5 +\cf1 TPythonEngine\cf5 (\cf1 eng\cf5 ).\cf1 DLLName\cf5 );
\par \cf1      \cf4\b end\b0\cf5 ;
\par \cf1      \cf6\i \{for it:= 10 to 50 do begin
\par        sleep(100) 
\par        apd.position:= it;
\par      end;\}
\par \i0\cf1    \cf4\b except
\par \b0\cf1      \cf6\i //eng.raiseError;
\par \i0\cf1      writeln\cf5 (\cf1 ExceptionToString\cf5 (\cf1 ExceptionType\cf5 ,\cf1  ExceptionParam\cf5 ));
\par \cf1    \cf4\b finally
\par \b0\cf1      eng\cf5 .\cf1 Free\cf5 ;
\par \cf1      aPythonVersion\cf5 .\cf1 Free\cf5 ;
\par \cf1      apd\cf5 .\cf1 position\cf5 :=\cf1  \cf2 100\cf5 ;
\par \cf1   \cf4\b end\b0\cf5 ;\cf1   
\par   
\par  eng\cf5 :=\cf1  TPythonEngine\cf5 .\cf1 Create\cf5 (\cf4\b Nil\b0\cf5 );
\par \cf1  eng\cf5 .\cf1 pythonhome\cf5 :=\cf1  PYHOME\cf5 ;
\par \cf1  eng\cf5 .\cf1 opendll\cf5 (\cf1 PYDLL\cf5 )
\par \cf1   \cf6\i //eng.IO:= pyMemo;
\par \i0\cf1  \cf4\b try
\par \b0\cf1    eng\cf5 .\cf1 Execstring\cf5 (\cf3 'with open(r"'\cf5 +\cf1 exepath\cf5 +\cf3 'maXbox4.exe","rb") as afile:'\cf5 +
\par \cf1                            \cf3 ' fbuf = afile.read()'\cf5 );
\par \cf1    println\cf5 (\cf1 eng\cf5 .\cf1 evalstr\cf5 (\cf3 '__import__("hashlib").sha512('\cf5 +
\par \cf1                                  \cf3 'fbuf).hexdigest().upper()'\cf5 ));\cf1  
\par  \cf4\b except
\par \b0\cf1    eng\cf5 .\cf1 raiseError\cf5 ;
\par \cf1  \cf4\b finally
\par \b0\cf1    eng\cf5 .\cf1 Free\cf5 ;
\par \cf1  \cf4\b end\b0\cf5 ;\cf1       
\par   
\par   \cf6\i //PYLaz_P4D_Demo2; 
\par \i0\cf4\b End\b0\cf5 .
\par 
\par \cf4\b Doc\b0\cf5 :\cf1  One thing \cf4\b to\b0\cf1  note \cf4\b is\b0\cf1  that the map\cf5 ()\cf1  \cf4\b function\b0\cf1  returns an iterable \cf4\b object\b0\cf5 ,\cf1  \cf4\b and\b0\cf1  thus we can use the list\cf5 ()\cf1  \cf4\b function\b0\cf1  \cf4\b to\b0\cf1  generate a list from this iterable\cf5 .
\par \cf1 writeln\cf5 (\cf3 'RegVersion: '\cf5 +\cf1 itoa\cf5 (\cf1 TPythonEngine\cf5 (\cf1 eng\cf5 ).\cf1 RegVersion\cf5 ));
\par \cf1 https\cf5 :\cf6\i //stackoverflow.com/questions/16779799/py-initialize-and-py-finalize-and-matplotlib
\par 
\par \i0\cf1 import threading 
\par   
\par \cf4\b def\b0\cf1  print_hello_three_times\cf5 ():
\par \cf1   \cf4\b for\b0\cf1  i \cf4\b in\b0\cf1  range\cf5 (\cf2 3\cf5 ):
\par \cf1     print\cf5 ("\cf1 Hello\cf5 ")
\par \cf1   
\par \cf4\b def\b0\cf1  print_hi_three_times\cf5 ():\cf1  
\par     \cf4\b for\b0\cf1  i \cf4\b in\b0\cf1  range\cf5 (\cf2 3\cf5 ):\cf1  
\par       print\cf5 ("\cf1 Hi\cf5 ")\cf1  
\par 
\par t1 \cf5 =\cf1  threading\cf5 .\cf1 Thread\cf5 (\cf1 target\cf5 =\cf1 print_hello_three_times\cf5 )\cf1   
\par t2 \cf5 =\cf1  threading\cf5 .\cf1 Thread\cf5 (\cf1 target\cf5 =\cf1 print_hi_three_times\cf5 )\cf1   
\par t1\cf5 .\cf1 start\cf5 ()
\par \cf1 t2\cf5 .\cf1 start\cf5 ()
\par 
\par \cf1 This \cf4\b package\b0\cf1  implements JSON support \cf4\b for\b0\cf1  FPC\cf5 .
\par \cf1     
\par }