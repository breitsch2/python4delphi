{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red128\green0\blue0;\red0\green0\blue0;\red128\green128\blue0;\red255\green0\blue0;\red0\green0\blue255;\red0\green0\blue128;\red128\green128\blue128;\red0\green128\blue128;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Untitled}}
\deflang1033\pard\plain\f0\fs20 \cf0 PROGRAM\cf1  \cf0 SEPDemo__PythonTemplate_ColabMini\cf2 ;
\par \{\cf0 Purpose\cf2 :\cf1  \cf0 shows\cf1  \cf0 running\cf1  \cf0 dlls\cf1  \cf3\b from\b0\cf1  \cf0 process\cf2 !\}
\par 
\par \cf0 Const\cf1  \cf0 PYHOME32\cf1  \cf2 =\cf1  \cf4 'C:\\Users\\max\\AppData\\Local\\Programs\\Python\\Python36-32\\'; 
\par \cf1       \cf0 PYDLL32\cf1   \cf2 =\cf1  \cf4 'C:\\Users\\max\\AppData\\Local\\Programs\\Python\\Python36-32\\python36.dll'\cf2 ;\cf1  
\par 
\par       \cf0 REXDEF\cf2 =\cf1  \cf4 'def striphtml(data):       '\cf2 +\cf0 LF\cf2 +
\par \cf1                \cf4 '  p = re.compile(r"<.*?>")'\cf2 +\cf0 LF\cf2 +
\par \cf1                \cf4 '  return p.sub("", data)  '\cf2 ;\cf1   
\par                
\par \cf0 Begin\cf1   \cf2 //\cf3 @\cf0 Main
\par \cf1   \cf0 with\cf1  \cf0 TPythonEngine\cf2 .\cf0 Create\cf2 (\cf0 Nil\cf2 )\cf1  \cf0 do\cf1  \cf0 begin
\par \cf1     \cf0 pythonhome\cf2 :=\cf1  \cf0 PYHOME32\cf2 ;
\par \cf1     \cf3\b try
\par \b0\cf1       \cf0 opendll\cf2 (\cf0 PYDLL32\cf2 )
\par \cf1       \cf0 Println\cf2 (\cf4 'Colab Platform: '\cf2 +\cf1  
\par           \cf0 EvalStr\cf2 (\cf4 '__import__("platform").platform()'\cf2 ));\cf1  
\par       \cf2 //\cf0 Println\cf2 (\cf4 'CPU Check: '\cf2 +\cf1  
\par       \cf2 //\cf0 EvalStr\cf2 (\cf4 '__import__("subprocess").check_output("lscpu",shell=True).strip().decode()'\cf2 ));\cf1      
\par     \cf3\b except
\par \b0\cf1       \cf0 raiseError\cf2 ;
\par \cf1     \cf3\b finally\b0\cf1                          
\par       \cf0 Free\cf2 ;
\par \cf1     \cf0 end\cf2 ;
\par \cf1   \cf0 end\cf2 ;\cf1   
\par \cf2 //<\cf0 Definitions\cf2 >\cf1   
\par \cf0 End\cf2 .\cf1  
\par 
\par       \cf3\b if\b0\cf1  \cf2 (\cf0 ValidationRate\cf1  \cf2 >\cf1  \cf0 ValidationRecord\cf2 )\cf1  \cf0 then
\par \cf1         \cf0 begin
\par \cf1           \cf0 ValidationRecord\cf1  \cf2 :=\cf1  \cf0 ValidationRate\cf2 ;
\par \cf1           \cf0 FMessageProc\cf2 (\cf4 'VALIDATION RECORD! Saving NN at '\cf2 +\cf0 fileName\cf2 );
\par \cf1           \cf0 FAvgWeight\cf2 .\cf0 SaveToFile\cf2 (\cf0 fileName\cf2 );
\par \cf1         \cf0 end\cf2 ;
\par 
\par \cf0 Ref\cf2 :\cf1   \cf0 https\cf2 ://\cf0 www\cf2 .\cf0 sonarqube\cf2 .\cf0 org\cf2 /\cf0 features\cf2 /\cf0 multi\cf2 -\cf0 languages\cf2 /\cf0 python\cf2 /
\par \cf0 C\cf2 :\\\cf0 maXbox\cf2 \\\cf0 mX39998\cf2 \\\cf0 maxbox3\cf2 >\cf0 pip3\cf1  \cf0 install\cf1  \cf2 -\cf0 U\cf1  \cf2 -\cf0 t\cf1  \cf0 C\cf2 :\\\cf0 Users\cf2 \\\cf5\b max\b0\cf2 \\\cf0 AppData\cf2 \\\cf0 Local\cf2 \\\cf0 Programs
\par \cf2 \\\cf0 Python\cf2 \\\cf0 Python36\cf2 -\cf3 32\cf2 \\\cf0 Lib\cf1  \cf0 https\cf2 ://\cf0 files\cf2 .\cf0 pythonhosted\cf2 .\cf0 org\cf2 /\cf0 packages\cf2 /\cf3 19\cf2 /\cf3 29\cf2 /\cf0 f7a38ee300
\par \cf3 83f2caa14cc77a6d34c4d5cfd1a69641e87bf1b3d6ba90d0ba\cf2 /\cf0 psutil\cf2 -\cf3 5.8.0\cf2 -\cf0 cp36\cf2 -\cf0 cp36m\cf2 -\cf0 win32\cf2 .\cf0 whl
\par Collecting\cf1  \cf0 psutil\cf2 ==\cf3 5.8.0
\par \cf1   \cf0 Using\cf1  \cf0 cached\cf1  \cf0 psutil\cf2 -\cf3 5.8.0\cf2 -\cf0 cp36\cf2 -\cf0 cp36m\cf2 -\cf0 win32\cf2 .\cf0 whl\cf1  \cf2 (\cf3 240\cf1  \cf0 kB\cf2 )
\par \cf0 ERROR\cf2 :\cf1  \cf0 distributed\cf1  \cf3 2.22.0\cf1  \cf0 has\cf1  \cf0 requirement\cf1  \cf0 cloudpickle\cf2 >=\cf3 1.5.0\cf2 ,\cf1  \cf0 but\cf1  \cf0 you\cf4 'll have cl
\par \cf0 oudpickle\cf1  \cf3 0.5.3\cf1  \cf0 which\cf1  \cf3\b is\b0\cf1  \cf0 incompatible\cf2 .
\par \cf0 Installing\cf1  \cf0 collected\cf1  \cf0 packages\cf2 :\cf1  \cf0 psutil
\par Successfully\cf1  \cf0 installed\cf1  \cf0 psutil\cf2 -\cf3 5.8.0
\par \cf2 ----\cf0 File\cf1  \cf0 newtemplate\cf2 .\cf0 txt\cf1  \cf3\b not\b0\cf1  \cf0 exists\cf1  \cf2 -\cf1  \cf0 now\cf1  \cf0 saved\cf2 !----
\par 
\par \cf6\i # -*- coding: utf-8 -*-
\par \i0\cf7 """Kopie von EKON_SimpleImageClassificationCPU.ipynb
\par Automatically generated by Colaboratory.
\par 
\par Original file is located at
\par     https://colab.research.google.com/drive/1clvG2uoMGo-_bfrJnxBJmpNTxjvnsMx9
\par """
\par 
\par \cf2 !\cf0 apt\cf2 -\cf0 get\cf1  \cf0 update
\par \cf2 !\cf0 apt\cf2 -\cf0 get\cf1  \cf0 install\cf1  \cf0 fpc\cf1  \cf0 fpc\cf2 -\cf0 source\cf1  \cf0 lazarus\cf1  \cf0 git\cf1  \cf0 subversion
\par 
\par \cf2 !\cf0 git\cf1  \cf0 clone\cf1  \cf0 https\cf2 ://\cf0 github\cf2 .\cf0 com\cf2 /\cf0 joaopauloschuler\cf2 /\cf0 neural\cf2 -\cf0 api\cf2 .\cf0 git
\par 
\par \cf2 !\cf0 svn\cf1  \cf0 checkout\cf1  \cf0 https\cf2 ://\cf0 svn\cf2 .\cf0 code\cf2 .\cf0 sf\cf2 .\cf0 net\cf2 /\cf0 p\cf2 /\cf0 lazarus\cf2 -\cf0 ccr\cf2 /\cf0 svn\cf2 /\cf0 components\cf2 /\cf0 multithreadprocs\cf1  \cf0 mtprocs
\par 
\par \cf2 !\cf0 lazbuild\cf1  \cf0 mtprocs\cf2 /\cf0 multithreadprocslaz\cf2 .\cf0 lpk
\par 
\par \cf2 !\cf0 ls\cf1  \cf2 -\cf0 l\cf1  \cf0 neural\cf2 -\cf0 api\cf2 /\cf0 examples\cf2 /\cf0 SimpleImageClassifier\cf2 /\cf0 SimpleImageClassifier\cf2 .\cf0 lpi
\par 
\par \cf2 !\cf0 lazbuild\cf1  \cf0 neural\cf2 -\cf0 api\cf2 /\cf0 examples\cf2 /\cf0 SimpleImageClassifier\cf2 /\cf0 SimpleImageClassifier\cf2 .\cf0 lpi
\par 
\par ls\cf1  \cf2 -\cf0 l\cf1  \cf0 neural\cf2 -\cf0 api\cf2 /\cf0 bin\cf2 /\cf0 x86_64\cf2 -\cf0 linux\cf2 /\cf0 bin\cf2 /\cf0 SimpleImageClassifier
\par 
\par \cf3\b import\b0\cf1  \cf0 os
\par \cf3\b import\b0\cf1  \cf0 urllib\cf2 .\cf0 request
\par 
\par \cf3\b if\b0\cf1  \cf3\b not\b0\cf1  \cf0 os\cf2 .\cf0 path\cf2 .\cf0 isfile\cf2 (\cf4 'cifar-10-batches-bin/data_batch_1.bin'\cf2 ):
\par \cf1   \cf3\b print\b0\cf2 (\cf4 "Downloading CIFAR-10 Files"\cf2 )
\par \cf1   \cf0 url\cf1  \cf2 =\cf1  \cf4 'https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz'
\par \cf1   \cf0 urllib\cf2 .\cf0 request\cf2 .\cf0 urlretrieve\cf2 (\cf0 url\cf2 ,\cf1  \cf4 './file.tar'\cf2 )
\par 
\par \cf0 ls\cf1  \cf2 -\cf0 l
\par \cf2 !\cf0 tar\cf1  \cf2 -\cf0 xvf\cf1  \cf2 ./\cf5\b file\b0\cf2 .\cf0 tar
\par 
\par \cf3\b if\b0\cf1  \cf3\b not\b0\cf1  \cf0 os\cf2 .\cf0 path\cf2 .\cf0 isfile\cf2 (\cf4 './data_batch_1.bin'\cf2 ):
\par \cf1   \cf3\b print\b0\cf2 (\cf4 "Copying files to current folder"\cf2 )
\par \cf1   \cf2 !\cf0 cp\cf1  \cf2 ./\cf0 cifar\cf2 -\cf3 10\cf2 -\cf0 batches\cf2 -\cf0 bin\cf2 /*\cf1  \cf2 ./
\par 
\par \cf3\b if\b0\cf1  \cf0 os\cf2 .\cf0 path\cf2 .\cf0 isfile\cf2 (\cf4 './data_batch_1.bin'\cf2 ):
\par \cf1   \cf3\b print\b0\cf2 (\cf4 "RUNNING!"\cf2 )
\par \cf1   \cf2 !\cf0 neural\cf2 -\cf0 api\cf2 /\cf0 bin\cf2 /\cf0 x86_64\cf2 -\cf0 linux\cf2 /\cf0 bin\cf2 /\cf0 SimpleImageClassifier
\par 
\par \cf3\b from\b0\cf1  \cf0 google\cf2 .\cf0 colab\cf1  \cf3\b import\b0\cf1  \cf0 files
\par \cf2 !\cf0 ls\cf1  \cf2 -\cf0 l
\par 
\par files\cf2 .\cf0 download\cf2 (\cf4 'SimpleImageClassifier-66.nn'\cf2 )
\par \cf0 files\cf2 .\cf0 download\cf2 (\cf4 'SimpleImageClassifier-66.csv'\cf2 )
\par \cf1         
\par    
\par    
\par }