Version:0.9
StartHTML:0000000105
EndHTML:0000027356
StartFragment:0000001085
EndFragment:0000027340
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>mXScriptasHTML</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="generator" content="SynEdit HTML exporter" />
<style type="text/css">
<!--
body { color: #000000; background-color: #FFFFFF; }
.pas1-assembler { color: #FF0000; }
.pas1-character { color: #0066CC; text-decoration: underline; }
.pas1-comment { color: #FFA500; font-style: italic; }
.pas1-float { color: #00FF00; }
.pas1-hexadecimal { color: #FF00FF; }
.pas1-identifier { }
.pas1-number { color: #FF0000; }
.pas1-preprocessor { color: #FFFFFF; font-style: italic; }
.pas1-reservedword { color: #A6CAF0; font-weight: bold; }
.pas1-space { }
.pas1-string { color: #008080; }
.pas1-symbol { color: #008000; }
-->
</style>
</head>
<body>
<!--StartFragment--><pre><code><span class="pas1-reservedword">Program</span><span class="pas1-space"> Python_ThreadsDemo28_Dissasemble</span><span class="pas1-symbol">;

</span><span class="pas1-comment">//https://arutselvan99.medium.com/python-why-is-faster-than-list-1b52d0ea9ac9
//https://www.programiz.com/python-programming/time/sleep
//Note: modify PYHOME and PYDLL :

</span><span class="pas1-reservedword">const</span><span class="pas1-space"> </span><span class="pas1-comment">//PYHOME = 'C:\Users\breitsch\AppData\Local\Programs\Python\Python37-32\';
</span><span class="pas1-space">    PYHOME </span><span class="pas1-symbol">=</span><span class="pas1-space"> </span><span class="pas1-string">'C:\Users\max\AppData\Local\Programs\Python\Python36-32\'</span><span class="pas1-symbol">;
</span><span class="pas1-space">    PYDLL  </span><span class="pas1-symbol">=</span><span class="pas1-space"> </span><span class="pas1-string">'C:\Users\max\AppData\Local\Programs\Python\Python36-32\python36.dll'</span><span class="pas1-symbol">;</span><span class="pas1-space"> 
    PYSCRIPT </span><span class="pas1-symbol">=</span><span class="pas1-space"> </span><span class="pas1-string">'C:\maXbox\maxbox3\maxbox3\maXbox3\examples\module1maxbox1.py'</span><span class="pas1-symbol">;
</span><span class="pas1-space">    LB</span><span class="pas1-symbol">=</span><span class="pas1-space"> CR</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LF</span><span class="pas1-symbol">;
</span><span class="pas1-space">       
</span><span class="pas1-reservedword">const</span><span class="pas1-space"> TH1 </span><span class="pas1-symbol">=</span><span class="pas1-space"> </span><span class="pas1-string">'def print_hello_three_times(): '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'  for i in range(3):           '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'    winsound.Beep(540, 500)    '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'    #time.sleep(1.4)           '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'  return &quot;Hello&quot;'</span><span class="pas1-symbol">;
</span><span class="pas1-space">  
</span><span class="pas1-reservedword">const</span><span class="pas1-space"> TH2 </span><span class="pas1-symbol">=</span><span class="pas1-space"> </span><span class="pas1-string">'def print_hi_three_times():    '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+</span><span class="pas1-space"> 
            </span><span class="pas1-string">'  for i in range(3):           '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'    print(&quot;\a&quot;)                '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'    winsound.Beep(440, 500)    '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+
</span><span class="pas1-space">            </span><span class="pas1-string">'  return &quot;Hi&quot;'</span><span class="pas1-symbol">;</span><span class="pas1-space"> 
            
</span><span class="pas1-reservedword">const</span><span class="pas1-space"> ATIME</span><span class="pas1-symbol">=</span><span class="pas1-string">'while True: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+</span><span class="pas1-space"> 
            </span><span class="pas1-string">'  localtime = time.localtime()'</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+</span><span class="pas1-space"> 
            </span><span class="pas1-string">'  result = time.strftime(&quot;%I:%M:%S %p&quot;, localtime)'</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+</span><span class="pas1-space"> 
            </span><span class="pas1-string">'  print(result, end=&quot;&quot;, flush=True)'</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+</span><span class="pas1-space"> 
            </span><span class="pas1-string">'  print(&quot;\r&quot;, end=&quot;&quot;, flush=True)'</span><span class="pas1-symbol">+</span><span class="pas1-identifier">LB</span><span class="pas1-symbol">+</span><span class="pas1-space"> 
            </span><span class="pas1-string">'  time.sleep(1)'</span><span class="pas1-symbol">;</span><span class="pas1-space">                        
              
</span><span class="pas1-reservedword">var</span><span class="pas1-space">  PyForm</span><span class="pas1-symbol">:</span><span class="pas1-space"> TForm</span><span class="pas1-symbol">;</span><span class="pas1-space"> pyMemo</span><span class="pas1-symbol">:</span><span class="pas1-space"> TMemo</span><span class="pas1-symbol">;
</span><span class="pas1-space">     pyval</span><span class="pas1-symbol">:</span><span class="pas1-space"> variant</span><span class="pas1-symbol">;
</span><span class="pas1-space">     

</span><span class="pas1-reservedword">var</span><span class="pas1-space"> eng</span><span class="pas1-symbol">:</span><span class="pas1-space"> TPythonEngine</span><span class="pas1-symbol">;</span><span class="pas1-space"> aPythonVersion</span><span class="pas1-symbol">:</span><span class="pas1-space"> TPythonVersion</span><span class="pas1-symbol">;
</span><span class="pas1-space">         PythonVersions</span><span class="pas1-symbol">:</span><span class="pas1-space"> TPythonVersions</span><span class="pas1-symbol">;</span><span class="pas1-space"> AllUserInstall</span><span class="pas1-symbol">:</span><span class="pas1-space"> Boolean</span><span class="pas1-symbol">;
</span><span class="pas1-space">         apd</span><span class="pas1-symbol">:</span><span class="pas1-space"> TApdMeter</span><span class="pas1-symbol">;

</span><span class="pas1-reservedword">begin</span><span class="pas1-space">  </span><span class="pas1-comment">//@main
</span><span class="pas1-space">  </span><span class="pas1-comment">//myloadscript2:= filetostring(PYSCRIPT2);
</span><span class="pas1-space">  
  PyForm</span><span class="pas1-symbol">:=</span><span class="pas1-space"> loadForm2</span><span class="pas1-symbol">(</span><span class="pas1-number">200</span><span class="pas1-symbol">,</span><span class="pas1-number">300</span><span class="pas1-symbol">,</span><span class="pas1-space"> clgreen</span><span class="pas1-symbol">,</span><span class="pas1-string">'PyFrm4D_VersionThread_Tester_EKON25'</span><span class="pas1-symbol">);
</span><span class="pas1-space">  pyMemo</span><span class="pas1-symbol">:=</span><span class="pas1-space"> TMemo</span><span class="pas1-symbol">.</span><span class="pas1-identifier">create</span><span class="pas1-symbol">(</span><span class="pas1-identifier">PyForm</span><span class="pas1-symbol">);
</span><span class="pas1-space">  apd</span><span class="pas1-symbol">:=</span><span class="pas1-space"> TApdMeter</span><span class="pas1-symbol">.</span><span class="pas1-identifier">create</span><span class="pas1-symbol">(</span><span class="pas1-identifier">pyform</span><span class="pas1-symbol">);
</span><span class="pas1-space">  </span><span class="pas1-comment">//apd.color:= clyellow;
</span><span class="pas1-space">  apd</span><span class="pas1-symbol">.</span><span class="pas1-identifier">parent</span><span class="pas1-symbol">:=</span><span class="pas1-space"> pyform</span><span class="pas1-symbol">;
</span><span class="pas1-space">  apd</span><span class="pas1-symbol">.</span><span class="pas1-identifier">barcolor</span><span class="pas1-symbol">:=</span><span class="pas1-space"> clred</span><span class="pas1-symbol">;
</span><span class="pas1-space">  apd</span><span class="pas1-symbol">.</span><span class="pas1-identifier">position</span><span class="pas1-symbol">:=</span><span class="pas1-space"> </span><span class="pas1-number">30</span><span class="pas1-symbol">;
</span><span class="pas1-space">  apd</span><span class="pas1-symbol">.</span><span class="pas1-identifier">SetBounds</span><span class="pas1-symbol">(</span><span class="pas1-number">10</span><span class="pas1-symbol">,</span><span class="pas1-number">100</span><span class="pas1-symbol">,</span><span class="pas1-space"> </span><span class="pas1-number">150</span><span class="pas1-symbol">,</span><span class="pas1-space"> </span><span class="pas1-number">150</span><span class="pas1-symbol">);
</span><span class="pas1-space">  apd</span><span class="pas1-symbol">.</span><span class="pas1-identifier">visible</span><span class="pas1-symbol">:=</span><span class="pas1-space"> true</span><span class="pas1-symbol">;
</span><span class="pas1-space">  pyMemo</span><span class="pas1-symbol">.</span><span class="pas1-identifier">parent</span><span class="pas1-symbol">:=</span><span class="pas1-space"> PyForm
  PyForm</span><span class="pas1-symbol">.</span><span class="pas1-identifier">show</span><span class="pas1-symbol">;
</span><span class="pas1-space">  aPythonVersion</span><span class="pas1-symbol">:=</span><span class="pas1-space"> TPythonVersion</span><span class="pas1-symbol">.</span><span class="pas1-identifier">create</span><span class="pas1-symbol">;
</span><span class="pas1-space">  
 </span><span class="pas1-comment">//3. replace maps demo
</span><span class="pas1-space">   eng</span><span class="pas1-symbol">:=</span><span class="pas1-space"> TPythonEngine</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Create</span><span class="pas1-symbol">(</span><span class="pas1-reservedword">Nil</span><span class="pas1-symbol">);
</span><span class="pas1-space">   eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">pythonhome</span><span class="pas1-symbol">:=</span><span class="pas1-space"> PYHOME</span><span class="pas1-symbol">;
</span><span class="pas1-space">   eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">opendll</span><span class="pas1-symbol">(</span><span class="pas1-identifier">PYDLL</span><span class="pas1-symbol">)
</span><span class="pas1-space">   </span><span class="pas1-comment">//eng.IO:= pyMemo;
</span><span class="pas1-space">   </span><span class="pas1-reservedword">try
</span><span class="pas1-space">     eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Execstring</span><span class="pas1-symbol">(</span><span class="pas1-string">'pets= (&quot;bird&quot;,&quot;snake&quot;,&quot;dog&quot;,&quot;turtle&quot;,&quot;cat&quot;,&quot;hamster&quot;)'</span><span class="pas1-symbol">);
</span><span class="pas1-space">     </span><span class="pas1-comment">// eng.Execstring('val.sort(key=lambda x: x[2],reverse=False)');
</span><span class="pas1-space">     eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Execstring</span><span class="pas1-symbol">(</span><span class="pas1-string">'uppercased_pets = list(map(str.upper, pets))'</span><span class="pas1-symbol">);
</span><span class="pas1-space">     println</span><span class="pas1-symbol">(</span><span class="pas1-string">'Tip replace maps: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">EvalStr</span><span class="pas1-symbol">(</span><span class="pas1-string">'uppercased_pets'</span><span class="pas1-symbol">));
</span><span class="pas1-space">     pyMemo</span><span class="pas1-symbol">.</span><span class="pas1-identifier">lines</span><span class="pas1-symbol">.</span><span class="pas1-identifier">add</span><span class="pas1-symbol">(</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">EvalStr</span><span class="pas1-symbol">(</span><span class="pas1-string">'list(map(str.upper, pets))'</span><span class="pas1-symbol">));
</span><span class="pas1-space">     
     eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Execstr</span><span class="pas1-symbol">(</span><span class="pas1-string">'import dis, winsound, time'</span><span class="pas1-symbol">);
</span><span class="pas1-space">     println</span><span class="pas1-symbol">(</span><span class="pas1-string">'disassemble call1: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">EvalStr</span><span class="pas1-symbol">(</span><span class="pas1-string">'(dis.dis(lambda: []))'</span><span class="pas1-symbol">));</span><span class="pas1-space"> 
     println</span><span class="pas1-symbol">(</span><span class="pas1-string">'disassemble call2: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">EvalStr</span><span class="pas1-symbol">(</span><span class="pas1-string">'(dis.dis(lambda: list()))'</span><span class="pas1-symbol">));</span><span class="pas1-space"> 
     </span><span class="pas1-comment">//println('def call: '+eng.EvalStr('print_hello_three_times()')); 
</span><span class="pas1-space">     println</span><span class="pas1-symbol">(</span><span class="pas1-string">'call3: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">evalstr</span><span class="pas1-symbol">(</span><span class="pas1-string">'__import__(&quot;dis&quot;).dis(lambda: [])'</span><span class="pas1-symbol">));</span><span class="pas1-space"> 
     </span><span class="pas1-comment">//saveString(exepath+'pydis.py', 'import dis'+CRLF+('print(dis.dis(lambda: list()))'));
</span><span class="pas1-space">   </span><span class="pas1-comment">//saveString(exepath+'pydis.py','import dis'+CRLF+('repr(print(dis.dis(print(&quot;TXT&quot;))))'+CRLF));
</span><span class="pas1-space">     </span><span class="pas1-comment">//ExecuteShell('py', 'pydis.py');
</span><span class="pas1-space">     saveString</span><span class="pas1-symbol">(</span><span class="pas1-identifier">exepath</span><span class="pas1-symbol">+</span><span class="pas1-string">'pydis.py'</span><span class="pas1-symbol">,</span><span class="pas1-space"> </span><span class="pas1-string">'import dis'</span><span class="pas1-symbol">+</span><span class="pas1-identifier">CRLF</span><span class="pas1-symbol">+(</span><span class="pas1-string">'dis.dis(x for x in range(5))'</span><span class="pas1-symbol">));
</span><span class="pas1-space">     println</span><span class="pas1-symbol">(</span><span class="pas1-identifier">getDOSOutput</span><span class="pas1-symbol">(</span><span class="pas1-string">'py '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">exepath</span><span class="pas1-symbol">+</span><span class="pas1-string">'pydis.py'</span><span class="pas1-symbol">,</span><span class="pas1-space"> exePath</span><span class="pas1-symbol">));
</span><span class="pas1-space">     
     </span><span class="pas1-comment">//eng.Execstring(ATIME);
</span><span class="pas1-space">     </span><span class="pas1-reservedword">if</span><span class="pas1-space"> PythonVersionFromPath</span><span class="pas1-symbol">(</span><span class="pas1-identifier">PYHOME</span><span class="pas1-symbol">,</span><span class="pas1-space"> aPythonVersion</span><span class="pas1-symbol">,</span><span class="pas1-space"> false</span><span class="pas1-symbol">)</span><span class="pas1-space"> </span><span class="pas1-reservedword">then</span><span class="pas1-space"> </span><span class="pas1-reservedword">begin
</span><span class="pas1-space">       aPythonVersion</span><span class="pas1-symbol">.</span><span class="pas1-identifier">AssignTo</span><span class="pas1-symbol">(</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">)</span><span class="pas1-space"> </span><span class="pas1-symbol">;
</span><span class="pas1-space">       writeln</span><span class="pas1-symbol">(</span><span class="pas1-string">'Version from path: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">TPythonEngine</span><span class="pas1-symbol">(</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">).</span><span class="pas1-identifier">RegVersion</span><span class="pas1-symbol">);
</span><span class="pas1-space">       writeln</span><span class="pas1-symbol">(</span><span class="pas1-string">'DLL from path: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">TPythonEngine</span><span class="pas1-symbol">(</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">).</span><span class="pas1-identifier">DLLName</span><span class="pas1-symbol">);
</span><span class="pas1-space">     </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;
</span><span class="pas1-space">     </span><span class="pas1-comment">{for it:= 10 to 50 do begin
       sleep(100) 
       apd.position:= it;
     end;}
</span><span class="pas1-space">   </span><span class="pas1-reservedword">except
</span><span class="pas1-space">     </span><span class="pas1-comment">//eng.raiseError;
</span><span class="pas1-space">     writeln</span><span class="pas1-symbol">(</span><span class="pas1-identifier">ExceptionToString</span><span class="pas1-symbol">(</span><span class="pas1-identifier">ExceptionType</span><span class="pas1-symbol">,</span><span class="pas1-space"> ExceptionParam</span><span class="pas1-symbol">));
</span><span class="pas1-space">   </span><span class="pas1-reservedword">finally
</span><span class="pas1-space">     eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Free</span><span class="pas1-symbol">;
</span><span class="pas1-space">     aPythonVersion</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Free</span><span class="pas1-symbol">;
</span><span class="pas1-space">     apd</span><span class="pas1-symbol">.</span><span class="pas1-identifier">position</span><span class="pas1-symbol">:=</span><span class="pas1-space"> </span><span class="pas1-number">100</span><span class="pas1-symbol">;
</span><span class="pas1-space">  </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;</span><span class="pas1-space">  
  
 eng</span><span class="pas1-symbol">:=</span><span class="pas1-space"> TPythonEngine</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Create</span><span class="pas1-symbol">(</span><span class="pas1-reservedword">Nil</span><span class="pas1-symbol">);
</span><span class="pas1-space"> eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">pythonhome</span><span class="pas1-symbol">:=</span><span class="pas1-space"> PYHOME</span><span class="pas1-symbol">;
</span><span class="pas1-space"> eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">opendll</span><span class="pas1-symbol">(</span><span class="pas1-identifier">PYDLL</span><span class="pas1-symbol">)
</span><span class="pas1-space">  </span><span class="pas1-comment">//eng.IO:= pyMemo;
</span><span class="pas1-space"> </span><span class="pas1-reservedword">try
</span><span class="pas1-space">   eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Execstring</span><span class="pas1-symbol">(</span><span class="pas1-string">'with open(r&quot;'</span><span class="pas1-symbol">+</span><span class="pas1-identifier">exepath</span><span class="pas1-symbol">+</span><span class="pas1-string">'maXbox4.exe&quot;,&quot;rb&quot;) as afile:'</span><span class="pas1-symbol">+
</span><span class="pas1-space">                           </span><span class="pas1-string">' fbuf = afile.read()'</span><span class="pas1-symbol">);
</span><span class="pas1-space">   println</span><span class="pas1-symbol">(</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">evalstr</span><span class="pas1-symbol">(</span><span class="pas1-string">'__import__(&quot;hashlib&quot;).sha512('</span><span class="pas1-symbol">+
</span><span class="pas1-space">                                 </span><span class="pas1-string">'fbuf).hexdigest().upper()'</span><span class="pas1-symbol">));</span><span class="pas1-space"> 
 </span><span class="pas1-reservedword">except
</span><span class="pas1-space">   eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">raiseError</span><span class="pas1-symbol">;
</span><span class="pas1-space"> </span><span class="pas1-reservedword">finally
</span><span class="pas1-space">   eng</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Free</span><span class="pas1-symbol">;
</span><span class="pas1-space"> </span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;</span><span class="pas1-space">      
  
  </span><span class="pas1-comment">//PYLaz_P4D_Demo2; 
</span><span class="pas1-reservedword">End</span><span class="pas1-symbol">.

</span><span class="pas1-reservedword">Doc</span><span class="pas1-symbol">:</span><span class="pas1-space"> One thing </span><span class="pas1-reservedword">to</span><span class="pas1-space"> note </span><span class="pas1-reservedword">is</span><span class="pas1-space"> that the map</span><span class="pas1-symbol">()</span><span class="pas1-space"> </span><span class="pas1-reservedword">function</span><span class="pas1-space"> returns an iterable </span><span class="pas1-reservedword">object</span><span class="pas1-symbol">,</span><span class="pas1-space"> </span><span class="pas1-reservedword">and</span><span class="pas1-space"> thus we can use the list</span><span class="pas1-symbol">()</span><span class="pas1-space"> </span><span class="pas1-reservedword">function</span><span class="pas1-space"> </span><span class="pas1-reservedword">to</span><span class="pas1-space"> generate a list from this iterable</span><span class="pas1-symbol">.
</span><span class="pas1-identifier">writeln</span><span class="pas1-symbol">(</span><span class="pas1-string">'RegVersion: '</span><span class="pas1-symbol">+</span><span class="pas1-identifier">itoa</span><span class="pas1-symbol">(</span><span class="pas1-identifier">TPythonEngine</span><span class="pas1-symbol">(</span><span class="pas1-identifier">eng</span><span class="pas1-symbol">).</span><span class="pas1-identifier">RegVersion</span><span class="pas1-symbol">));
</span><span class="pas1-identifier">https</span><span class="pas1-symbol">:</span><span class="pas1-comment">//stackoverflow.com/questions/16779799/py-initialize-and-py-finalize-and-matplotlib

</span><span class="pas1-identifier">import threading 
  
</span><span class="pas1-reservedword">def</span><span class="pas1-space"> print_hello_three_times</span><span class="pas1-symbol">():
</span><span class="pas1-space">  </span><span class="pas1-reservedword">for</span><span class="pas1-space"> i </span><span class="pas1-reservedword">in</span><span class="pas1-space"> range</span><span class="pas1-symbol">(</span><span class="pas1-number">3</span><span class="pas1-symbol">):
</span><span class="pas1-space">    print</span><span class="pas1-symbol">(&quot;</span><span class="pas1-identifier">Hello</span><span class="pas1-symbol">&quot;)
</span><span class="pas1-space">  
</span><span class="pas1-reservedword">def</span><span class="pas1-space"> print_hi_three_times</span><span class="pas1-symbol">():</span><span class="pas1-space"> 
    </span><span class="pas1-reservedword">for</span><span class="pas1-space"> i </span><span class="pas1-reservedword">in</span><span class="pas1-space"> range</span><span class="pas1-symbol">(</span><span class="pas1-number">3</span><span class="pas1-symbol">):</span><span class="pas1-space"> 
      print</span><span class="pas1-symbol">(&quot;</span><span class="pas1-identifier">Hi</span><span class="pas1-symbol">&quot;)</span><span class="pas1-space"> 

t1 </span><span class="pas1-symbol">=</span><span class="pas1-space"> threading</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Thread</span><span class="pas1-symbol">(</span><span class="pas1-identifier">target</span><span class="pas1-symbol">=</span><span class="pas1-identifier">print_hello_three_times</span><span class="pas1-symbol">)</span><span class="pas1-space">  
t2 </span><span class="pas1-symbol">=</span><span class="pas1-space"> threading</span><span class="pas1-symbol">.</span><span class="pas1-identifier">Thread</span><span class="pas1-symbol">(</span><span class="pas1-identifier">target</span><span class="pas1-symbol">=</span><span class="pas1-identifier">print_hi_three_times</span><span class="pas1-symbol">)</span><span class="pas1-space">  
t1</span><span class="pas1-symbol">.</span><span class="pas1-identifier">start</span><span class="pas1-symbol">()
</span><span class="pas1-identifier">t2</span><span class="pas1-symbol">.</span><span class="pas1-identifier">start</span><span class="pas1-symbol">()

</span><span class="pas1-identifier">This </span><span class="pas1-reservedword">package</span><span class="pas1-space"> implements JSON support </span><span class="pas1-reservedword">for</span><span class="pas1-space"> FPC</span><span class="pas1-symbol">.
</span><span class="pas1-space">    
</span></code></pre><!--EndFragment--></body>
</html>