Program Python_Delphi_PrimeTime30_Compare;

//https://arutselvan99.medium.com/python-why-is-faster-than-list-1b52d0ea9ac9
//https://www.programiz.com/python-programming/time/sleep
//Note: modify PYHOME and PYDLL :

Const //PYHOME = 'C:\Users\breitsch\AppData\Local\Programs\Python\Python37-32\';
    PYHOME = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\';
    PYDLL  = 'C:\Users\max\AppData\Local\Programs\Python\Python36-32\python36.dll'; 
    PYSCRIPT = 'C:\maXbox\maxbox3\maxbox3\maXbox3\examples\module1maxbox1.py';
    LB= CR+LF;
       
const PRIME =  'def py_is_prime(n):'+LB+
               '  import math'+LB+
               '  """ totally naive implementation """'+LB+
               '  if n <= 1:'+LB+
               '    return False'+LB+
               '  q = math.floor(math.sqrt(n))'+LB+
               '  for i in range(2, q + 1):'+LB+
               '    if (n % i == 0):'+LB+
               '      return False'+LB+
               '  return True';

//   Delphi func with exit()
function D_IsPrime(x: Integer): Boolean;
var q, i: integer;
begin 
  if (x <= 1) then begin
    result:= false
    Exit;
  end;  
  q:= Floor(Sqrt(x)); 
     for i:= 2 to q do 
       if (x mod i = 0) then begin
        result:= false;
        Exit;
       end;
    result:= True
    Exit;
  end;
  
function D_IsPrime2Slow(N: Integer): Boolean;
var M: Integer;
begin
  synAssert(N > 0);
  if N = 1 then begin// annoying special case
    Result := False;
    exit;
  end;
  //for M := 2 to (N div 2) do begin
  for M := 2 to floor(Sqrt(N)) do begin
    if N mod M = 0 then begin
      Result := False;
      exit;
    end;
  end;
  Result:= True;
end; 
  
{ Returns a count of the number of occurences of SubText in Text }
function CountOccurences( const SubText: string;
                          const Text: string): Integer;
begin
  Result := Pos(SubText, Text); 
  if Result > 0 then
    Result:= (Length(Text)-Length(StringReplace(Text,SubText,'',
                             [rfReplaceAll]))) div  Length(subtext);
end;  { CountOccurences }
  
const ATIME='while True: '+LB+ 
            '  localtime = time.localtime()'+LB+ 
            '  result = time.strftime("%I:%M:%S %p", localtime)'+LB+ 
            '  print(result, end="", flush=True)'+LB+ 
            '  print("\r", end="", flush=True)'+LB+ 
            '  time.sleep(1)';                        
              
var  PyForm: TForm; pyMemo: TMemo; pyval: variant;
     eng: TPythonEngine; aPythonVersion: TPythonVersion;
     PythonVersions: TPythonVersions; AllUserInstall: Boolean;
     apd: TApdMeter; primelist: TStringlist; sw: TStopWatch; mpr: TPrimes;

begin  //@main
  //myloadscript2:= filetostring(PYSCRIPT2);
  PyForm:= loadForm2(200,300, clgreen,'PyFrm4D_VersionThread_Tester_EKON25');
  pyMemo:= TMemo.create(PyForm);
  apd:= TApdMeter.create(pyform);
  //apd.color:= clyellow;
  apd.parent:= pyform;
  apd.barcolor:= clred;
  apd.position:= 30;
  apd.SetBounds(10,100, 150, 150);
  apd.visible:= true;
  pyMemo.parent:= PyForm
  PyForm.show;
  aPythonVersion:= TPythonVersion.create;
  
 //3. replace maps demo
  eng:= TPythonEngine.Create(Nil);
  eng.pythonhome:= PYHOME;
  eng.opendll(PYDLL)
  //eng.free;
  //eng.IO:= pyMemo;
  try
    eng.Execstring('pets= ("bird","snake","dog","turtle","cat","hamster","monster")');
    // eng.Execstring('val.sort(key=lambda x: x[2],reverse=False)');
    eng.Execstring('uppercased_pets = list(map(str.upper, pets))');
    println('Tip replace maps: '+eng.EvalStr('uppercased_pets'));
    pyMemo.lines.add(eng.EvalStr('list(map(str.upper, pets))'));
     
    eng.Execstr('import dis, winsound, time');
    println('disassemble call1: '+eng.EvalStr('(dis.dis(lambda: []))')); 
    println('disassemble call2: '+eng.EvalStr('(dis.dis(lambda: list()))')); 
     
    //eng.Execstring(ATIME);
    eng.Execstring(PRIME);
    println('primetest: '+eng.EvalStr('py_is_prime(4703)'));
    primelist:= TStringlist.create;
    //https://www.wolframalpha.com/input/?i=primes+between+4700+and+4800
    sw:= TStopWatch.Create();
    sw.Start;
    for it:= 1000 to 11000 do 
      //println(+itoa(it)+' primetest: '+eng.EvalStr('py_is_prime('+itoa(it)+')'));
       primelist.add(eng.EvalStr('py_is_prime('+itoa(it)+')'));
    //writeln('count primes1: '+itoa(CountOccurences('True',primelist.text)));
    println('count primes1: '+itoa(SubstringCount('True', primelist.text)));
    sw.Stop;
    //sw.ElapsedMilliseconds;
    writeln('Stop Watch Prime Tester1: '+sw.getValueStr)
    primelist.clear;
    sw.Start;
    for it:= 1000 to 11000 do 
      primelist.add(botostr(D_IsPrime(it)));
    writeln('count primes2: '+itoa(SubstringCount('TRUE', primelist.text)));
    sw.stop;
    writeln('Stop Watch Prime Tester2: '+sw.getValueStr);
    primelist.clear;
    mpr:= TPrimes.create;
    sw.Start;
    writeln('compiled pretest '+botostr(mpr.isprime(4703)))
    for it:= 1000 to 11000 do 
      primelist.add(botostr(mpr.IsPrime(it)));
    {for it:= 0 to 500000 do begin 
       if it mod 100000 = 0 then apd.position:= apd.position+10;
       primelist.add(botostr(mpr.IsPrime(it)));
    end; }  
    writeln('count primes3: '+itoa(SubstringCount('TRUE', primelist.text)));   
    sw.stop;
    writeln('Stop Watch Prime Tester3: '+sw.getValueStr);
    
    if PythonVersionFromPath(PYHOME, aPythonVersion, false) then begin
      aPythonVersion.AssignTo(eng) ;
      writeln('Version from path: '+TPythonEngine(eng).RegVersion);
      writeln('DLL from path: '+TPythonEngine(eng).DLLName);
    end;
  except
    eng.raiseError;
    writeln(ExceptionToString(ExceptionType, ExceptionParam));
  finally
    eng.Free;
    aPythonVersion.Free;
    primelist.Free;
    mpr.Free;
    sw.Free;
 end;  
  
  //PYLaz_P4D_Demo2;   EKON25 - explicit better than implicit
  eng:= TPythonEngine.Create(Nil);
  eng.pythonhome:= PYHOME;
  eng.loadDLL;
  println(GetPythonEngine.EvalStr('__import__("decimal").Decimal(0.1)')); 
  eng.Free;
  apd.position:= 100;
  
End.

Ref: 78498 prime numbers:
 mX4 executed: 19/10/2021 12:28:54  Runtime: 0:0:16.485  Memload: 74% use
 mX4 executed: 19/10/2021 11:59:40  Runtime: 0:1:4.390  Memload: 72% use

Doc: One thing to note is that the map() function returns an iterable object, and thus we can use the list() function to generate a list from this iterable.
writeln('RegVersion: '+itoa(TPythonEngine(eng).RegVersion));
https://stackoverflow.com/questions/16779799/py-initialize-and-py-finalize-and-matplotlib

import threading 
  
def print_hello_three_times():
  for i in range(3):
    print("Hello")
  
def print_hi_three_times(): 
    for i in range(3): 
      print("Hi") 

t1 = threading.Thread(target=print_hello_three_times)  
t2 = threading.Thread(target=print_hi_three_times)  
t1.start()
t2.start()

This package implements JSON support for FPC.
    